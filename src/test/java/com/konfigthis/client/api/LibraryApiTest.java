/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AlbumsRemoveSavedRequest;
import com.konfigthis.client.model.AlbumsSaveCurrentUserLibraryRequest;
import com.konfigthis.client.model.EpisodesRemoveFromLibraryRequest;
import com.konfigthis.client.model.EpisodesSaveCurrentUserLibraryRequest;
import com.konfigthis.client.model.PagingPlaylistObject;
import com.konfigthis.client.model.PagingSavedAlbumObject;
import com.konfigthis.client.model.PagingSavedEpisodeObject;
import com.konfigthis.client.model.PagingSavedShowObject;
import com.konfigthis.client.model.PagingSavedTrackObject;
import com.konfigthis.client.model.PagingSimplifiedAudiobookObject;
import com.konfigthis.client.model.PlaylistObject;
import com.konfigthis.client.model.PlaylistsCreatePlaylistRequest;
import com.konfigthis.client.model.PlaylistsUpdateDetailsRequest;
import com.konfigthis.client.model.TracksRemoveFromLibraryRequest;
import com.konfigthis.client.model.TracksSaveForCurrentUserRequest;
import com.konfigthis.client.model.UsersFollowArtistsOrUsersRequest;
import com.konfigthis.client.model.UsersGetFollowedArtistsResponse;
import com.konfigthis.client.model.UsersGetTopItemsResponse;
import com.konfigthis.client.model.UsersUnfollowArtistsUsersRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LibraryApi
 */
@Disabled
public class LibraryApiTest {

    private static LibraryApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new LibraryApi(apiClient);
    }

    /**
     * Check If User Follows Artists or Users 
     *
     * Check to see if the current user is following one or more artists or other Spotify users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkFollowingArtistsUsersTest() throws ApiException {
        String type = null;
        String ids = null;
        List<Boolean> response = api.checkFollowingArtistsUsers(type, ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Check User&#39;s Saved Albums 
     *
     * Check if one or more albums is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkSavedTest() throws ApiException {
        String ids = null;
        List<Boolean> response = api.checkSaved(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Check User&#39;s Saved Episodes 
     *
     * Check if one or more episodes is already saved in the current Spotify user&#39;s &#39;Your Episodes&#39; library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkSavedEpisodesTest() throws ApiException {
        String ids = null;
        List<Boolean> response = api.checkSavedEpisodes(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Check User&#39;s Saved Shows 
     *
     * Check if one or more shows is already saved in the current Spotify user&#39;s library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkSavedShowsTest() throws ApiException {
        String ids = null;
        List<Boolean> response = api.checkSavedShows(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Check User&#39;s Saved Tracks 
     *
     * Check if one or more tracks is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkSaved_0Test() throws ApiException {
        String ids = null;
        List<Boolean> response = api.checkSaved_0(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Check User&#39;s Saved Audiobooks 
     *
     * Check if one or more audiobooks are already saved in the current Spotify user&#39;s library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkUserSavedTest() throws ApiException {
        String ids = null;
        List<Boolean> response = api.checkUserSaved(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Playlist 
     *
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPlaylistTest() throws ApiException {
        String name = null;
        String userId = null;
        String description = null;
        Boolean _public = null;
        Boolean collaborative = null;
        PlaylistObject response = api.createPlaylist(name, userId)
                .description(description)
                ._public(_public)
                .collaborative(collaborative)
                .execute();
        // TODO: test validations
    }

    /**
     * Follow Artists or Users 
     *
     * Add the current user as a follower of one or more artists or other Spotify users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followArtistsOrUsersTest() throws ApiException {
        List<String> ids = null;
        String type = null;
        String ids = null;
        api.followArtistsOrUsers(ids, type, ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Followed Artists 
     *
     * Get the current user&#39;s followed artists. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFollowedArtistsTest() throws ApiException {
        String type = null;
        String after = null;
        Integer limit = null;
        UsersGetFollowedArtistsResponse response = api.getFollowedArtists(type)
                .after(after)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Get User&#39;s Saved Albums 
     *
     * Get a list of the albums saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSavedTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String market = null;
        PagingSavedAlbumObject response = api.getSaved()
                .limit(limit)
                .offset(offset)
                .market(market)
                .execute();
        // TODO: test validations
    }

    /**
     * Get User&#39;s Top Items 
     *
     * Get the current user&#39;s top artists or tracks based on calculated affinity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTopItemsTest() throws ApiException {
        String type = null;
        String timeRange = null;
        Integer limit = null;
        Integer offset = null;
        UsersGetTopItemsResponse response = api.getTopItems(type)
                .timeRange(timeRange)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Current User&#39;s Playlists 
     *
     * Get a list of the playlists owned or followed by the current Spotify user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPlaylistsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PagingPlaylistObject response = api.getUserPlaylists()
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get User&#39;s Saved Tracks 
     *
     * Get a list of the songs saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserSavedTest() throws ApiException {
        String market = null;
        Integer limit = null;
        Integer offset = null;
        PagingSavedTrackObject response = api.getUserSaved()
                .market(market)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get User&#39;s Saved Episodes 
     *
     * Get a list of the episodes saved in the current Spotify user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserSavedEpisodesTest() throws ApiException {
        String market = null;
        Integer limit = null;
        Integer offset = null;
        PagingSavedEpisodeObject response = api.getUserSavedEpisodes()
                .market(market)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get User&#39;s Saved Shows 
     *
     * Get a list of shows saved in the current Spotify user&#39;s library. Optional parameters can be used to limit the number of shows returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserSavedShowsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PagingSavedShowObject response = api.getUserSavedShows()
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get User&#39;s Saved Audiobooks 
     *
     * Get a list of the audiobooks saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSavedTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PagingSimplifiedAudiobookObject response = api.listSaved()
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove User&#39;s Saved Audiobooks 
     *
     * Remove one or more audiobooks from the Spotify user&#39;s library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFromLibraryTest() throws ApiException {
        String ids = null;
        api.removeFromLibrary(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove User&#39;s Saved Tracks 
     *
     * Remove one or more tracks from the current user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFromLibrary_0Test() throws ApiException {
        String ids = null;
        List<String> ids = null;
        api.removeFromLibrary_0(ids)
                .ids(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove User&#39;s Saved Episodes 
     *
     * Remove one or more episodes from the current user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFromLibrary_1Test() throws ApiException {
        String ids = null;
        List<String> ids = null;
        api.removeFromLibrary_1(ids)
                .ids(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove Users&#39; Saved Albums 
     *
     * Remove one or more albums from the current user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSavedTest() throws ApiException {
        String ids = null;
        List<String> ids = null;
        api.removeSaved(ids)
                .ids(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove User&#39;s Saved Shows 
     *
     * Delete one or more shows from current Spotify user&#39;s library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserLibraryTest() throws ApiException {
        String ids = null;
        String market = null;
        api.removeUserLibrary(ids)
                .market(market)
                .execute();
        // TODO: test validations
    }

    /**
     * Save Audiobooks for Current User 
     *
     * Save one or more audiobooks to the current Spotify user&#39;s library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveCurrentUserLibraryTest() throws ApiException {
        String ids = null;
        api.saveCurrentUserLibrary(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Save Albums for Current User 
     *
     * Save one or more albums to the current user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveCurrentUserLibrary_0Test() throws ApiException {
        String ids = null;
        List<String> ids = null;
        api.saveCurrentUserLibrary_0(ids)
                .ids(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Save Episodes for Current User 
     *
     * Save one or more episodes to the current user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveCurrentUserLibrary_1Test() throws ApiException {
        String ids = null;
        List<String> ids = null;
        api.saveCurrentUserLibrary_1(ids)
                .ids(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Save Shows for Current User 
     *
     * Save one or more shows to current Spotify user&#39;s library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveCurrentUserLibrary_2Test() throws ApiException {
        String ids = null;
        api.saveCurrentUserLibrary_2(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Save Tracks for Current User 
     *
     * Save one or more tracks to the current user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveForCurrentUserTest() throws ApiException {
        String ids = null;
        List<String> ids = null;
        api.saveForCurrentUser(ids)
                .ids(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Unfollow Artists or Users 
     *
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unfollowArtistsUsersTest() throws ApiException {
        String type = null;
        String ids = null;
        List<String> ids = null;
        api.unfollowArtistsUsers(type, ids)
                .ids(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Change Playlist Details 
     *
     * Change a playlist&#39;s name and public/private state. (The user must, of course, own the playlist.) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDetailsTest() throws ApiException {
        String playlistId = null;
        String description = null;
        String name = null;
        Boolean _public = null;
        Boolean collaborative = null;
        api.updateDetails(playlistId)
                .description(description)
                .name(name)
                ._public(_public)
                .collaborative(collaborative)
                .execute();
        // TODO: test validations
    }

}
