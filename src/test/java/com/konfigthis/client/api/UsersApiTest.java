/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.PagingPlaylistObject;
import com.konfigthis.client.model.PrivateUserObject;
import com.konfigthis.client.model.PublicUserObject;
import com.konfigthis.client.model.UsersFollowArtistsOrUsersRequest;
import com.konfigthis.client.model.UsersFollowPlaylistRequest;
import com.konfigthis.client.model.UsersGetFollowedArtistsResponse;
import com.konfigthis.client.model.UsersGetTopItemsResponse;
import com.konfigthis.client.model.UsersUnfollowArtistsUsersRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private static UsersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UsersApi(apiClient);
    }

    /**
     * Check If User Follows Artists or Users 
     *
     * Check to see if the current user is following one or more artists or other Spotify users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkFollowingArtistsUsersTest() throws ApiException {
        String type = null;
        String ids = null;
        List<Boolean> response = api.checkFollowingArtistsUsers(type, ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Check if Users Follow Playlist 
     *
     * Check to see if one or more Spotify users are following a specified playlist. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkIfFollowsPlaylistTest() throws ApiException {
        String playlistId = null;
        String ids = null;
        List<Boolean> response = api.checkIfFollowsPlaylist(playlistId, ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Follow Artists or Users 
     *
     * Add the current user as a follower of one or more artists or other Spotify users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followArtistsOrUsersTest() throws ApiException {
        List<String> ids = null;
        String type = null;
        String ids = null;
        api.followArtistsOrUsers(ids, type, ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Follow Playlist 
     *
     * Add the current user as a follower of a playlist. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followPlaylistTest() throws ApiException {
        String playlistId = null;
        Boolean _public = null;
        api.followPlaylist(playlistId)
                ._public(_public)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Current User&#39;s Profile 
     *
     * Get detailed profile information about the current user (including the current user&#39;s username). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserProfileTest() throws ApiException {
        PrivateUserObject response = api.getCurrentUserProfile()
                .execute();
        // TODO: test validations
    }

    /**
     * Get Followed Artists 
     *
     * Get the current user&#39;s followed artists. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFollowedArtistsTest() throws ApiException {
        String type = null;
        String after = null;
        Integer limit = null;
        UsersGetFollowedArtistsResponse response = api.getFollowedArtists(type)
                .after(after)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Get User&#39;s Top Items 
     *
     * Get the current user&#39;s top artists or tracks based on calculated affinity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTopItemsTest() throws ApiException {
        String type = null;
        String timeRange = null;
        Integer limit = null;
        Integer offset = null;
        UsersGetTopItemsResponse response = api.getTopItems(type)
                .timeRange(timeRange)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get User&#39;s Playlists 
     *
     * Get a list of the playlists owned or followed by a Spotify user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPlaylistsTest() throws ApiException {
        String userId = null;
        Integer limit = null;
        Integer offset = null;
        PagingPlaylistObject response = api.getUserPlaylists(userId)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get User&#39;s Profile 
     *
     * Get public profile information about a Spotify user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserProfileTest() throws ApiException {
        String userId = null;
        PublicUserObject response = api.getUserProfile(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Unfollow Artists or Users 
     *
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unfollowArtistsUsersTest() throws ApiException {
        String type = null;
        String ids = null;
        List<String> ids = null;
        api.unfollowArtistsUsers(type, ids)
                .ids(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Unfollow Playlist 
     *
     * Remove the current user as a follower of a playlist. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unfollowPlaylistTest() throws ApiException {
        String playlistId = null;
        api.unfollowPlaylist(playlistId)
                .execute();
        // TODO: test validations
    }

}
