/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CurrentlyPlayingContextObject;
import com.konfigthis.client.model.CursorPagingPlayHistoryObject;
import com.konfigthis.client.model.PlayerGetAvailableDevicesResponse;
import com.konfigthis.client.model.PlayerStartPlaybackRequest;
import com.konfigthis.client.model.PlayerTransferPlaybackToNewDeviceRequest;
import com.konfigthis.client.model.QueueObject;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlayerApi
 */
@Disabled
public class PlayerApiTest {

    private static PlayerApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PlayerApi(apiClient);
    }

    /**
     * Add Item to Playback Queue 
     *
     * Add an item to the end of the user&#39;s current playback queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addItemToQueueTest() throws ApiException {
        String uri = null;
        String deviceId = null;
        api.addItemToQueue(uri)
                .deviceId(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Available Devices 
     *
     * Get information about a user’s available Spotify Connect devices. Some device models are not supported and will not be listed in the API response. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableDevicesTest() throws ApiException {
        PlayerGetAvailableDevicesResponse response = api.getAvailableDevices()
                .execute();
        // TODO: test validations
    }

    /**
     * Get Playback State 
     *
     * Get information about the user’s current playback state, including track or episode, progress, and active device. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentPlaybackStateTest() throws ApiException {
        String market = null;
        String additionalTypes = null;
        CurrentlyPlayingContextObject response = api.getCurrentPlaybackState()
                .market(market)
                .additionalTypes(additionalTypes)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Currently Playing Track 
     *
     * Get the object currently being played on the user&#39;s Spotify account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentlyPlayingTrackTest() throws ApiException {
        String market = null;
        String additionalTypes = null;
        CurrentlyPlayingContextObject response = api.getCurrentlyPlayingTrack()
                .market(market)
                .additionalTypes(additionalTypes)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Recently Played Tracks 
     *
     * Get tracks from the current user&#39;s recently played tracks. _**Note**: Currently doesn&#39;t support podcast episodes._ 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentlyPlayedTracksTest() throws ApiException {
        Integer limit = null;
        Integer after = null;
        Integer before = null;
        CursorPagingPlayHistoryObject response = api.getRecentlyPlayedTracks()
                .limit(limit)
                .after(after)
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the User&#39;s Queue 
     *
     * Get the list of objects that make up the user&#39;s queue. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserQueueTest() throws ApiException {
        QueueObject response = api.getUserQueue()
                .execute();
        // TODO: test validations
    }

    /**
     * Pause Playback 
     *
     * Pause playback on the user&#39;s account. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pausePlaybackTest() throws ApiException {
        String deviceId = null;
        api.pausePlayback()
                .deviceId(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Seek To Position 
     *
     * Seeks to the given position in the user’s currently playing track. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void seekToPositionTest() throws ApiException {
        Integer positionMs = null;
        String deviceId = null;
        api.seekToPosition(positionMs)
                .deviceId(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set Playback Volume 
     *
     * Set the volume for the user’s current playback device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setPlaybackVolumeTest() throws ApiException {
        Integer volumePercent = null;
        String deviceId = null;
        api.setPlaybackVolume(volumePercent)
                .deviceId(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set Repeat Mode 
     *
     * Set the repeat mode for the user&#39;s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setRepeatModeTest() throws ApiException {
        String state = null;
        String deviceId = null;
        api.setRepeatMode(state)
                .deviceId(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Skip To Next 
     *
     * Skips to next track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void skipToNextTrackTest() throws ApiException {
        String deviceId = null;
        api.skipToNextTrack()
                .deviceId(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Skip To Previous 
     *
     * Skips to previous track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void skipToPreviousTrackTest() throws ApiException {
        String deviceId = null;
        api.skipToPreviousTrack()
                .deviceId(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Start/Resume Playback 
     *
     * Start a new context or resume current playback on the user&#39;s active device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startPlaybackTest() throws ApiException {
        Map<String, Object> contextUri = null;
        List<String> uris = null;
        Map<String, Object> offset = null;
        Map<String, Object> positionMs = null;
        String deviceId = null;
        api.startPlayback()
                .contextUri(contextUri)
                .uris(uris)
                .offset(offset)
                .positionMs(positionMs)
                .deviceId(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Toggle Playback Shuffle 
     *
     * Toggle shuffle on or off for user’s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void togglePlaybackShuffleTest() throws ApiException {
        Boolean state = null;
        String deviceId = null;
        api.togglePlaybackShuffle(state)
                .deviceId(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Transfer Playback 
     *
     * Transfer playback to a new device and optionally begin playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transferPlaybackToNewDeviceTest() throws ApiException {
        List<String> deviceIds = null;
        Map<String, Object> play = null;
        api.transferPlaybackToNewDevice(deviceIds)
                .play(play)
                .execute();
        // TODO: test validations
    }

}
