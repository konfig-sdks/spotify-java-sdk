/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ArtistsGetTopTracksResponse;
import com.konfigthis.client.model.AudioAnalysisObject;
import com.konfigthis.client.model.AudioFeaturesObject;
import com.konfigthis.client.model.PagingPlaylistTrackObject;
import com.konfigthis.client.model.PagingSavedTrackObject;
import com.konfigthis.client.model.PagingSimplifiedTrackObject;
import com.konfigthis.client.model.PlaylistsAddItemsRequest;
import com.konfigthis.client.model.PlaylistsRemoveItemsRequest;
import com.konfigthis.client.model.PlaylistsRemoveItemsRequestTracksInner;
import com.konfigthis.client.model.PlaylistsRemoveItemsResponse;
import com.konfigthis.client.model.PlaylistsUpdatePlaylistItemsRequest;
import com.konfigthis.client.model.RecommendationsObject;
import com.konfigthis.client.model.TrackObject;
import com.konfigthis.client.model.TracksGetMultipleAudioFeaturesResponse;
import com.konfigthis.client.model.TracksRemoveFromLibraryRequest;
import com.konfigthis.client.model.TracksSaveForCurrentUserRequest;
import com.konfigthis.client.model.UsersGetTopItemsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TracksApi
 */
@Disabled
public class TracksApiTest {

    private static TracksApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TracksApi(apiClient);
    }

    /**
     * Add Items to Playlist 
     *
     * Add one or more items to a user&#39;s playlist. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addItemsTest() throws ApiException {
        String playlistId = null;
        List<String> uris = null;
        Integer position = null;
        Integer position = null;
        String uris = null;
        PlaylistsRemoveItemsResponse response = api.addItems(playlistId)
                .uris(uris)
                .position(position)
                .position(position)
                .uris(uris)
                .execute();
        // TODO: test validations
    }

    /**
     * Check User&#39;s Saved Tracks 
     *
     * Check if one or more tracks is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkSavedTest() throws ApiException {
        String ids = null;
        List<Boolean> response = api.checkSaved(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Track&#39;s Audio Analysis 
     *
     * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the trackâ€™s structure and musical content, including rhythm, pitch, and timbre. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAudioAnalysisTest() throws ApiException {
        String id = null;
        AudioAnalysisObject response = api.getAudioAnalysis(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Track&#39;s Audio Features 
     *
     * Get audio feature information for a single track identified by its unique Spotify ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAudioFeaturesByIdTest() throws ApiException {
        String id = null;
        AudioFeaturesObject response = api.getAudioFeaturesById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Track 
     *
     * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBySpotifyIdTest() throws ApiException {
        String id = null;
        String market = null;
        TrackObject response = api.getBySpotifyId(id)
                .market(market)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Several Tracks&#39; Audio Features 
     *
     * Get audio features for multiple tracks based on their Spotify IDs. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMultipleAudioFeaturesTest() throws ApiException {
        String ids = null;
        TracksGetMultipleAudioFeaturesResponse response = api.getMultipleAudioFeatures(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Several Tracks 
     *
     * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMultipleByIdsTest() throws ApiException {
        String ids = null;
        String market = null;
        ArtistsGetTopTracksResponse response = api.getMultipleByIds(ids)
                .market(market)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Playlist Items 
     *
     * Get full details of the items of a playlist owned by a Spotify user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlaylistItemsTest() throws ApiException {
        String playlistId = null;
        String market = null;
        String fields = null;
        Integer limit = null;
        Integer offset = null;
        String additionalTypes = null;
        PagingPlaylistTrackObject response = api.getPlaylistItems(playlistId)
                .market(market)
                .fields(fields)
                .limit(limit)
                .offset(offset)
                .additionalTypes(additionalTypes)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Recommendations 
     *
     * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecommendationsTest() throws ApiException {
        String seedArtists = null;
        String seedGenres = null;
        String seedTracks = null;
        Integer limit = null;
        String market = null;
        Double minAcousticness = null;
        Double maxAcousticness = null;
        Double targetAcousticness = null;
        Double minDanceability = null;
        Double maxDanceability = null;
        Double targetDanceability = null;
        Integer minDurationMs = null;
        Integer maxDurationMs = null;
        Integer targetDurationMs = null;
        Double minEnergy = null;
        Double maxEnergy = null;
        Double targetEnergy = null;
        Double minInstrumentalness = null;
        Double maxInstrumentalness = null;
        Double targetInstrumentalness = null;
        Integer minKey = null;
        Integer maxKey = null;
        Integer targetKey = null;
        Double minLiveness = null;
        Double maxLiveness = null;
        Double targetLiveness = null;
        Double minLoudness = null;
        Double maxLoudness = null;
        Double targetLoudness = null;
        Integer minMode = null;
        Integer maxMode = null;
        Integer targetMode = null;
        Integer minPopularity = null;
        Integer maxPopularity = null;
        Integer targetPopularity = null;
        Double minSpeechiness = null;
        Double maxSpeechiness = null;
        Double targetSpeechiness = null;
        Double minTempo = null;
        Double maxTempo = null;
        Double targetTempo = null;
        Integer minTimeSignature = null;
        Integer maxTimeSignature = null;
        Integer targetTimeSignature = null;
        Double minValence = null;
        Double maxValence = null;
        Double targetValence = null;
        RecommendationsObject response = api.getRecommendations(seedArtists, seedGenres, seedTracks)
                .limit(limit)
                .market(market)
                .minAcousticness(minAcousticness)
                .maxAcousticness(maxAcousticness)
                .targetAcousticness(targetAcousticness)
                .minDanceability(minDanceability)
                .maxDanceability(maxDanceability)
                .targetDanceability(targetDanceability)
                .minDurationMs(minDurationMs)
                .maxDurationMs(maxDurationMs)
                .targetDurationMs(targetDurationMs)
                .minEnergy(minEnergy)
                .maxEnergy(maxEnergy)
                .targetEnergy(targetEnergy)
                .minInstrumentalness(minInstrumentalness)
                .maxInstrumentalness(maxInstrumentalness)
                .targetInstrumentalness(targetInstrumentalness)
                .minKey(minKey)
                .maxKey(maxKey)
                .targetKey(targetKey)
                .minLiveness(minLiveness)
                .maxLiveness(maxLiveness)
                .targetLiveness(targetLiveness)
                .minLoudness(minLoudness)
                .maxLoudness(maxLoudness)
                .targetLoudness(targetLoudness)
                .minMode(minMode)
                .maxMode(maxMode)
                .targetMode(targetMode)
                .minPopularity(minPopularity)
                .maxPopularity(maxPopularity)
                .targetPopularity(targetPopularity)
                .minSpeechiness(minSpeechiness)
                .maxSpeechiness(maxSpeechiness)
                .targetSpeechiness(targetSpeechiness)
                .minTempo(minTempo)
                .maxTempo(maxTempo)
                .targetTempo(targetTempo)
                .minTimeSignature(minTimeSignature)
                .maxTimeSignature(maxTimeSignature)
                .targetTimeSignature(targetTimeSignature)
                .minValence(minValence)
                .maxValence(maxValence)
                .targetValence(targetValence)
                .execute();
        // TODO: test validations
    }

    /**
     * Get User&#39;s Top Items 
     *
     * Get the current user&#39;s top artists or tracks based on calculated affinity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTopItemsTest() throws ApiException {
        String type = null;
        String timeRange = null;
        Integer limit = null;
        Integer offset = null;
        UsersGetTopItemsResponse response = api.getTopItems(type)
                .timeRange(timeRange)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Artist&#39;s Top Tracks 
     *
     * Get Spotify catalog information about an artist&#39;s top tracks by country. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTopTracksTest() throws ApiException {
        String id = null;
        String market = null;
        ArtistsGetTopTracksResponse response = api.getTopTracks(id)
                .market(market)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Album Tracks 
     *
     * Get Spotify catalog information about an albumâ€™s tracks. Optional parameters can be used to limit the number of tracks returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTracksByIdTest() throws ApiException {
        String id = null;
        String market = null;
        Integer limit = null;
        Integer offset = null;
        PagingSimplifiedTrackObject response = api.getTracksById(id)
                .market(market)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get User&#39;s Saved Tracks 
     *
     * Get a list of the songs saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserSavedTest() throws ApiException {
        String market = null;
        Integer limit = null;
        Integer offset = null;
        PagingSavedTrackObject response = api.getUserSaved()
                .market(market)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove User&#39;s Saved Tracks 
     *
     * Remove one or more tracks from the current user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFromLibraryTest() throws ApiException {
        String ids = null;
        List<String> ids = null;
        api.removeFromLibrary(ids)
                .ids(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove Playlist Items 
     *
     * Remove one or more items from a user&#39;s playlist. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeItemsTest() throws ApiException {
        List<PlaylistsRemoveItemsRequestTracksInner> tracks = null;
        String playlistId = null;
        String snapshotId = null;
        PlaylistsRemoveItemsResponse response = api.removeItems(tracks, playlistId)
                .snapshotId(snapshotId)
                .execute();
        // TODO: test validations
    }

    /**
     * Save Tracks for Current User 
     *
     * Save one or more tracks to the current user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveForCurrentUserTest() throws ApiException {
        String ids = null;
        List<String> ids = null;
        api.saveForCurrentUser(ids)
                .ids(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Playlist Items 
     *
     * Either reorder or replace items in a playlist depending on the request&#39;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#39;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#39;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#39;t be applied together in a single request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePlaylistItemsTest() throws ApiException {
        String playlistId = null;
        List<String> uris = null;
        Integer rangeStart = null;
        Integer insertBefore = null;
        Integer rangeLength = null;
        String snapshotId = null;
        String uris = null;
        PlaylistsRemoveItemsResponse response = api.updatePlaylistItems(playlistId)
                .uris(uris)
                .rangeStart(rangeStart)
                .insertBefore(insertBefore)
                .rangeLength(rangeLength)
                .snapshotId(snapshotId)
                .uris(uris)
                .execute();
        // TODO: test validations
    }

}
