/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AudioAnalysisObjectMeta;
import com.konfigthis.client.model.AudioAnalysisObjectTrack;
import com.konfigthis.client.model.SectionObject;
import com.konfigthis.client.model.SegmentObject;
import com.konfigthis.client.model.TimeIntervalObject;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AudioAnalysisObject
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AudioAnalysisObject {
  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private AudioAnalysisObjectMeta meta;

  public static final String SERIALIZED_NAME_TRACK = "track";
  @SerializedName(SERIALIZED_NAME_TRACK)
  private AudioAnalysisObjectTrack track;

  public static final String SERIALIZED_NAME_BARS = "bars";
  @SerializedName(SERIALIZED_NAME_BARS)
  private List<TimeIntervalObject> bars = null;

  public static final String SERIALIZED_NAME_BEATS = "beats";
  @SerializedName(SERIALIZED_NAME_BEATS)
  private List<TimeIntervalObject> beats = null;

  public static final String SERIALIZED_NAME_SECTIONS = "sections";
  @SerializedName(SERIALIZED_NAME_SECTIONS)
  private List<SectionObject> sections = null;

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private List<SegmentObject> segments = null;

  public static final String SERIALIZED_NAME_TATUMS = "tatums";
  @SerializedName(SERIALIZED_NAME_TATUMS)
  private List<TimeIntervalObject> tatums = null;

  public AudioAnalysisObject() {
  }

  public AudioAnalysisObject meta(AudioAnalysisObjectMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AudioAnalysisObjectMeta getMeta() {
    return meta;
  }


  public void setMeta(AudioAnalysisObjectMeta meta) {
    
    
    
    this.meta = meta;
  }


  public AudioAnalysisObject track(AudioAnalysisObjectTrack track) {
    
    
    
    
    this.track = track;
    return this;
  }

   /**
   * Get track
   * @return track
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AudioAnalysisObjectTrack getTrack() {
    return track;
  }


  public void setTrack(AudioAnalysisObjectTrack track) {
    
    
    
    this.track = track;
  }


  public AudioAnalysisObject bars(List<TimeIntervalObject> bars) {
    
    
    
    
    this.bars = bars;
    return this;
  }

  public AudioAnalysisObject addBarsItem(TimeIntervalObject barsItem) {
    if (this.bars == null) {
      this.bars = new ArrayList<>();
    }
    this.bars.add(barsItem);
    return this;
  }

   /**
   * The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.
   * @return bars
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.")

  public List<TimeIntervalObject> getBars() {
    return bars;
  }


  public void setBars(List<TimeIntervalObject> bars) {
    
    
    
    this.bars = bars;
  }


  public AudioAnalysisObject beats(List<TimeIntervalObject> beats) {
    
    
    
    
    this.beats = beats;
    return this;
  }

  public AudioAnalysisObject addBeatsItem(TimeIntervalObject beatsItem) {
    if (this.beats == null) {
      this.beats = new ArrayList<>();
    }
    this.beats.add(beatsItem);
    return this;
  }

   /**
   * The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.
   * @return beats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.")

  public List<TimeIntervalObject> getBeats() {
    return beats;
  }


  public void setBeats(List<TimeIntervalObject> beats) {
    
    
    
    this.beats = beats;
  }


  public AudioAnalysisObject sections(List<SectionObject> sections) {
    
    
    
    
    this.sections = sections;
    return this;
  }

  public AudioAnalysisObject addSectionsItem(SectionObject sectionsItem) {
    if (this.sections == null) {
      this.sections = new ArrayList<>();
    }
    this.sections.add(sectionsItem);
    return this;
  }

   /**
   * Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.
   * @return sections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.")

  public List<SectionObject> getSections() {
    return sections;
  }


  public void setSections(List<SectionObject> sections) {
    
    
    
    this.sections = sections;
  }


  public AudioAnalysisObject segments(List<SegmentObject> segments) {
    
    
    
    
    this.segments = segments;
    return this;
  }

  public AudioAnalysisObject addSegmentsItem(SegmentObject segmentsItem) {
    if (this.segments == null) {
      this.segments = new ArrayList<>();
    }
    this.segments.add(segmentsItem);
    return this;
  }

   /**
   * Each segment contains a roughly conisistent sound throughout its duration.
   * @return segments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Each segment contains a roughly conisistent sound throughout its duration.")

  public List<SegmentObject> getSegments() {
    return segments;
  }


  public void setSegments(List<SegmentObject> segments) {
    
    
    
    this.segments = segments;
  }


  public AudioAnalysisObject tatums(List<TimeIntervalObject> tatums) {
    
    
    
    
    this.tatums = tatums;
    return this;
  }

  public AudioAnalysisObject addTatumsItem(TimeIntervalObject tatumsItem) {
    if (this.tatums == null) {
      this.tatums = new ArrayList<>();
    }
    this.tatums.add(tatumsItem);
    return this;
  }

   /**
   * A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).
   * @return tatums
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).")

  public List<TimeIntervalObject> getTatums() {
    return tatums;
  }


  public void setTatums(List<TimeIntervalObject> tatums) {
    
    
    
    this.tatums = tatums;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AudioAnalysisObject instance itself
   */
  public AudioAnalysisObject putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioAnalysisObject audioAnalysisObject = (AudioAnalysisObject) o;
    return Objects.equals(this.meta, audioAnalysisObject.meta) &&
        Objects.equals(this.track, audioAnalysisObject.track) &&
        Objects.equals(this.bars, audioAnalysisObject.bars) &&
        Objects.equals(this.beats, audioAnalysisObject.beats) &&
        Objects.equals(this.sections, audioAnalysisObject.sections) &&
        Objects.equals(this.segments, audioAnalysisObject.segments) &&
        Objects.equals(this.tatums, audioAnalysisObject.tatums)&&
        Objects.equals(this.additionalProperties, audioAnalysisObject.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(meta, track, bars, beats, sections, segments, tatums, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioAnalysisObject {\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    track: ").append(toIndentedString(track)).append("\n");
    sb.append("    bars: ").append(toIndentedString(bars)).append("\n");
    sb.append("    beats: ").append(toIndentedString(beats)).append("\n");
    sb.append("    sections: ").append(toIndentedString(sections)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("    tatums: ").append(toIndentedString(tatums)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("meta");
    openapiFields.add("track");
    openapiFields.add("bars");
    openapiFields.add("beats");
    openapiFields.add("sections");
    openapiFields.add("segments");
    openapiFields.add("tatums");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AudioAnalysisObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AudioAnalysisObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioAnalysisObject is not found in the empty JSON string", AudioAnalysisObject.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        AudioAnalysisObjectMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `track`
      if (jsonObj.get("track") != null && !jsonObj.get("track").isJsonNull()) {
        AudioAnalysisObjectTrack.validateJsonObject(jsonObj.getAsJsonObject("track"));
      }
      if (jsonObj.get("bars") != null && !jsonObj.get("bars").isJsonNull()) {
        JsonArray jsonArraybars = jsonObj.getAsJsonArray("bars");
        if (jsonArraybars != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bars").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bars` to be an array in the JSON string but got `%s`", jsonObj.get("bars").toString()));
          }

          // validate the optional field `bars` (array)
          for (int i = 0; i < jsonArraybars.size(); i++) {
            TimeIntervalObject.validateJsonObject(jsonArraybars.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("beats") != null && !jsonObj.get("beats").isJsonNull()) {
        JsonArray jsonArraybeats = jsonObj.getAsJsonArray("beats");
        if (jsonArraybeats != null) {
          // ensure the json data is an array
          if (!jsonObj.get("beats").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `beats` to be an array in the JSON string but got `%s`", jsonObj.get("beats").toString()));
          }

          // validate the optional field `beats` (array)
          for (int i = 0; i < jsonArraybeats.size(); i++) {
            TimeIntervalObject.validateJsonObject(jsonArraybeats.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("sections") != null && !jsonObj.get("sections").isJsonNull()) {
        JsonArray jsonArraysections = jsonObj.getAsJsonArray("sections");
        if (jsonArraysections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sections` to be an array in the JSON string but got `%s`", jsonObj.get("sections").toString()));
          }

          // validate the optional field `sections` (array)
          for (int i = 0; i < jsonArraysections.size(); i++) {
            SectionObject.validateJsonObject(jsonArraysections.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("segments") != null && !jsonObj.get("segments").isJsonNull()) {
        JsonArray jsonArraysegments = jsonObj.getAsJsonArray("segments");
        if (jsonArraysegments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("segments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `segments` to be an array in the JSON string but got `%s`", jsonObj.get("segments").toString()));
          }

          // validate the optional field `segments` (array)
          for (int i = 0; i < jsonArraysegments.size(); i++) {
            SegmentObject.validateJsonObject(jsonArraysegments.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("tatums") != null && !jsonObj.get("tatums").isJsonNull()) {
        JsonArray jsonArraytatums = jsonObj.getAsJsonArray("tatums");
        if (jsonArraytatums != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tatums").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tatums` to be an array in the JSON string but got `%s`", jsonObj.get("tatums").toString()));
          }

          // validate the optional field `tatums` (array)
          for (int i = 0; i < jsonArraytatums.size(); i++) {
            TimeIntervalObject.validateJsonObject(jsonArraytatums.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioAnalysisObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioAnalysisObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioAnalysisObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioAnalysisObject.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioAnalysisObject>() {
           @Override
           public void write(JsonWriter out, AudioAnalysisObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioAnalysisObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AudioAnalysisObject instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AudioAnalysisObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AudioAnalysisObject
  * @throws IOException if the JSON string is invalid with respect to AudioAnalysisObject
  */
  public static AudioAnalysisObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioAnalysisObject.class);
  }

 /**
  * Convert an instance of AudioAnalysisObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

