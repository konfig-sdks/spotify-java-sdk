/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PlaylistsUpdatePlaylistItemsRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PlaylistsUpdatePlaylistItemsRequest {
  public static final String SERIALIZED_NAME_URIS = "uris";
  @SerializedName(SERIALIZED_NAME_URIS)
  private List<String> uris = null;

  public static final String SERIALIZED_NAME_RANGE_START = "range_start";
  @SerializedName(SERIALIZED_NAME_RANGE_START)
  private Integer rangeStart;

  public static final String SERIALIZED_NAME_INSERT_BEFORE = "insert_before";
  @SerializedName(SERIALIZED_NAME_INSERT_BEFORE)
  private Integer insertBefore;

  public static final String SERIALIZED_NAME_RANGE_LENGTH = "range_length";
  @SerializedName(SERIALIZED_NAME_RANGE_LENGTH)
  private Integer rangeLength;

  public static final String SERIALIZED_NAME_SNAPSHOT_ID = "snapshot_id";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_ID)
  private String snapshotId;

  public PlaylistsUpdatePlaylistItemsRequest() {
  }

  public PlaylistsUpdatePlaylistItemsRequest uris(List<String> uris) {
    
    
    
    
    this.uris = uris;
    return this;
  }

  public PlaylistsUpdatePlaylistItemsRequest addUrisItem(String urisItem) {
    if (this.uris == null) {
      this.uris = new ArrayList<>();
    }
    this.uris.add(urisItem);
    return this;
  }

   /**
   * Get uris
   * @return uris
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getUris() {
    return uris;
  }


  public void setUris(List<String> uris) {
    
    
    
    this.uris = uris;
  }


  public PlaylistsUpdatePlaylistItemsRequest rangeStart(Integer rangeStart) {
    
    
    
    
    this.rangeStart = rangeStart;
    return this;
  }

   /**
   * The position of the first item to be reordered. 
   * @return rangeStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The position of the first item to be reordered. ")

  public Integer getRangeStart() {
    return rangeStart;
  }


  public void setRangeStart(Integer rangeStart) {
    
    
    
    this.rangeStart = rangeStart;
  }


  public PlaylistsUpdatePlaylistItemsRequest insertBefore(Integer insertBefore) {
    
    
    
    
    this.insertBefore = insertBefore;
    return this;
  }

   /**
   * The position where the items should be inserted.&lt;br/&gt;To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.&lt;br/&gt;Examples:&lt;br/&gt;To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.&lt;br/&gt;To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0. 
   * @return insertBefore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "The position where the items should be inserted.<br/>To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.<br/>Examples:<br/>To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.<br/>To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0. ")

  public Integer getInsertBefore() {
    return insertBefore;
  }


  public void setInsertBefore(Integer insertBefore) {
    
    
    
    this.insertBefore = insertBefore;
  }


  public PlaylistsUpdatePlaylistItemsRequest rangeLength(Integer rangeLength) {
    
    
    
    
    this.rangeLength = rangeLength;
    return this;
  }

   /**
   * The amount of items to be reordered. Defaults to 1 if not set.&lt;br/&gt;The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.&lt;br/&gt;Example:&lt;br/&gt;To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2. 
   * @return rangeLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "The amount of items to be reordered. Defaults to 1 if not set.<br/>The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.<br/>Example:<br/>To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2. ")

  public Integer getRangeLength() {
    return rangeLength;
  }


  public void setRangeLength(Integer rangeLength) {
    
    
    
    this.rangeLength = rangeLength;
  }


  public PlaylistsUpdatePlaylistItemsRequest snapshotId(String snapshotId) {
    
    
    
    
    this.snapshotId = snapshotId;
    return this;
  }

   /**
   * The playlist&#39;s snapshot ID against which you want to make the changes. 
   * @return snapshotId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The playlist's snapshot ID against which you want to make the changes. ")

  public String getSnapshotId() {
    return snapshotId;
  }


  public void setSnapshotId(String snapshotId) {
    
    
    
    this.snapshotId = snapshotId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PlaylistsUpdatePlaylistItemsRequest instance itself
   */
  public PlaylistsUpdatePlaylistItemsRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaylistsUpdatePlaylistItemsRequest playlistsUpdatePlaylistItemsRequest = (PlaylistsUpdatePlaylistItemsRequest) o;
    return Objects.equals(this.uris, playlistsUpdatePlaylistItemsRequest.uris) &&
        Objects.equals(this.rangeStart, playlistsUpdatePlaylistItemsRequest.rangeStart) &&
        Objects.equals(this.insertBefore, playlistsUpdatePlaylistItemsRequest.insertBefore) &&
        Objects.equals(this.rangeLength, playlistsUpdatePlaylistItemsRequest.rangeLength) &&
        Objects.equals(this.snapshotId, playlistsUpdatePlaylistItemsRequest.snapshotId)&&
        Objects.equals(this.additionalProperties, playlistsUpdatePlaylistItemsRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uris, rangeStart, insertBefore, rangeLength, snapshotId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaylistsUpdatePlaylistItemsRequest {\n");
    sb.append("    uris: ").append(toIndentedString(uris)).append("\n");
    sb.append("    rangeStart: ").append(toIndentedString(rangeStart)).append("\n");
    sb.append("    insertBefore: ").append(toIndentedString(insertBefore)).append("\n");
    sb.append("    rangeLength: ").append(toIndentedString(rangeLength)).append("\n");
    sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uris");
    openapiFields.add("range_start");
    openapiFields.add("insert_before");
    openapiFields.add("range_length");
    openapiFields.add("snapshot_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PlaylistsUpdatePlaylistItemsRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PlaylistsUpdatePlaylistItemsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaylistsUpdatePlaylistItemsRequest is not found in the empty JSON string", PlaylistsUpdatePlaylistItemsRequest.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("uris") != null && !jsonObj.get("uris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uris` to be an array in the JSON string but got `%s`", jsonObj.get("uris").toString()));
      }
      if ((jsonObj.get("snapshot_id") != null && !jsonObj.get("snapshot_id").isJsonNull()) && !jsonObj.get("snapshot_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshot_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshot_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaylistsUpdatePlaylistItemsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaylistsUpdatePlaylistItemsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaylistsUpdatePlaylistItemsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaylistsUpdatePlaylistItemsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaylistsUpdatePlaylistItemsRequest>() {
           @Override
           public void write(JsonWriter out, PlaylistsUpdatePlaylistItemsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaylistsUpdatePlaylistItemsRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PlaylistsUpdatePlaylistItemsRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PlaylistsUpdatePlaylistItemsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PlaylistsUpdatePlaylistItemsRequest
  * @throws IOException if the JSON string is invalid with respect to PlaylistsUpdatePlaylistItemsRequest
  */
  public static PlaylistsUpdatePlaylistItemsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaylistsUpdatePlaylistItemsRequest.class);
  }

 /**
  * Convert an instance of PlaylistsUpdatePlaylistItemsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

