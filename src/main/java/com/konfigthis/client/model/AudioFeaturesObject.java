/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AudioFeaturesObject
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AudioFeaturesObject {
  public static final String SERIALIZED_NAME_ACOUSTICNESS = "acousticness";
  @SerializedName(SERIALIZED_NAME_ACOUSTICNESS)
  private Float acousticness;

  public static final String SERIALIZED_NAME_ANALYSIS_URL = "analysis_url";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_URL)
  private String analysisUrl;

  public static final String SERIALIZED_NAME_DANCEABILITY = "danceability";
  @SerializedName(SERIALIZED_NAME_DANCEABILITY)
  private Float danceability;

  public static final String SERIALIZED_NAME_DURATION_MS = "duration_ms";
  @SerializedName(SERIALIZED_NAME_DURATION_MS)
  private Integer durationMs;

  public static final String SERIALIZED_NAME_ENERGY = "energy";
  @SerializedName(SERIALIZED_NAME_ENERGY)
  private Float energy;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTRUMENTALNESS = "instrumentalness";
  @SerializedName(SERIALIZED_NAME_INSTRUMENTALNESS)
  private Float instrumentalness;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Integer key;

  public static final String SERIALIZED_NAME_LIVENESS = "liveness";
  @SerializedName(SERIALIZED_NAME_LIVENESS)
  private Float liveness;

  public static final String SERIALIZED_NAME_LOUDNESS = "loudness";
  @SerializedName(SERIALIZED_NAME_LOUDNESS)
  private Float loudness;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private Integer mode;

  public static final String SERIALIZED_NAME_SPEECHINESS = "speechiness";
  @SerializedName(SERIALIZED_NAME_SPEECHINESS)
  private Float speechiness;

  public static final String SERIALIZED_NAME_TEMPO = "tempo";
  @SerializedName(SERIALIZED_NAME_TEMPO)
  private Float tempo;

  public static final String SERIALIZED_NAME_TIME_SIGNATURE = "time_signature";
  @SerializedName(SERIALIZED_NAME_TIME_SIGNATURE)
  private Integer timeSignature;

  public static final String SERIALIZED_NAME_TRACK_HREF = "track_href";
  @SerializedName(SERIALIZED_NAME_TRACK_HREF)
  private String trackHref;

  /**
   * The object type. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    AUDIO_FEATURES("audio_features");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_VALENCE = "valence";
  @SerializedName(SERIALIZED_NAME_VALENCE)
  private Float valence;

  public AudioFeaturesObject() {
  }

  public AudioFeaturesObject acousticness(Float acousticness) {
    if (acousticness != null && acousticness < 0) {
      throw new IllegalArgumentException("Invalid value for acousticness. Must be greater than or equal to 0.");
    }
    if (acousticness != null && acousticness > 1) {
      throw new IllegalArgumentException("Invalid value for acousticness. Must be less than or equal to 1.");
    }
    
    
    this.acousticness = acousticness;
    return this;
  }

   /**
   * A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. 
   * minimum: 0
   * maximum: 1
   * @return acousticness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.00242", value = "A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. ")

  public Float getAcousticness() {
    return acousticness;
  }


  public void setAcousticness(Float acousticness) {
    if (acousticness != null && acousticness < 0) {
      throw new IllegalArgumentException("Invalid value for acousticness. Must be greater than or equal to 0.");
    }
    if (acousticness != null && acousticness > 1) {
      throw new IllegalArgumentException("Invalid value for acousticness. Must be less than or equal to 1.");
    }
    
    this.acousticness = acousticness;
  }


  public AudioFeaturesObject analysisUrl(String analysisUrl) {
    
    
    
    
    this.analysisUrl = analysisUrl;
    return this;
  }

   /**
   * A URL to access the full audio analysis of this track. An access token is required to access this data. 
   * @return analysisUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://api.spotify.com/v1/audio-analysis/2takcwOaAZWiXQijPHIx7B ", value = "A URL to access the full audio analysis of this track. An access token is required to access this data. ")

  public String getAnalysisUrl() {
    return analysisUrl;
  }


  public void setAnalysisUrl(String analysisUrl) {
    
    
    
    this.analysisUrl = analysisUrl;
  }


  public AudioFeaturesObject danceability(Float danceability) {
    
    
    
    
    this.danceability = danceability;
    return this;
  }

   /**
   * Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable. 
   * @return danceability
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.585", value = "Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable. ")

  public Float getDanceability() {
    return danceability;
  }


  public void setDanceability(Float danceability) {
    
    
    
    this.danceability = danceability;
  }


  public AudioFeaturesObject durationMs(Integer durationMs) {
    
    
    
    
    this.durationMs = durationMs;
    return this;
  }

   /**
   * The duration of the track in milliseconds. 
   * @return durationMs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "237040", value = "The duration of the track in milliseconds. ")

  public Integer getDurationMs() {
    return durationMs;
  }


  public void setDurationMs(Integer durationMs) {
    
    
    
    this.durationMs = durationMs;
  }


  public AudioFeaturesObject energy(Float energy) {
    
    
    
    
    this.energy = energy;
    return this;
  }

   /**
   * Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. 
   * @return energy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.842", value = "Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. ")

  public Float getEnergy() {
    return energy;
  }


  public void setEnergy(Float energy) {
    
    
    
    this.energy = energy;
  }


  public AudioFeaturesObject id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The Spotify ID for the track. 
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2takcwOaAZWiXQijPHIx7B", value = "The Spotify ID for the track. ")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public AudioFeaturesObject instrumentalness(Float instrumentalness) {
    
    
    
    
    this.instrumentalness = instrumentalness;
    return this;
  }

   /**
   * Predicts whether a track contains no vocals. \&quot;Ooh\&quot; and \&quot;aah\&quot; sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \&quot;vocal\&quot;. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0. 
   * @return instrumentalness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.00686", value = "Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0. ")

  public Float getInstrumentalness() {
    return instrumentalness;
  }


  public void setInstrumentalness(Float instrumentalness) {
    
    
    
    this.instrumentalness = instrumentalness;
  }


  public AudioFeaturesObject key(Integer key) {
    if (key != null && key < -1) {
      throw new IllegalArgumentException("Invalid value for key. Must be greater than or equal to -1.");
    }
    if (key != null && key > 11) {
      throw new IllegalArgumentException("Invalid value for key. Must be less than or equal to 11.");
    }
    
    
    this.key = key;
    return this;
  }

   /**
   * The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 &#x3D; C, 1 &#x3D; C♯/D♭, 2 &#x3D; D, and so on. If no key was detected, the value is -1. 
   * minimum: -1
   * maximum: 11
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9", value = "The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. ")

  public Integer getKey() {
    return key;
  }


  public void setKey(Integer key) {
    if (key != null && key < -1) {
      throw new IllegalArgumentException("Invalid value for key. Must be greater than or equal to -1.");
    }
    if (key != null && key > 11) {
      throw new IllegalArgumentException("Invalid value for key. Must be less than or equal to 11.");
    }
    
    this.key = key;
  }


  public AudioFeaturesObject liveness(Float liveness) {
    
    
    
    
    this.liveness = liveness;
    return this;
  }

   /**
   * Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live. 
   * @return liveness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.0866", value = "Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live. ")

  public Float getLiveness() {
    return liveness;
  }


  public void setLiveness(Float liveness) {
    
    
    
    this.liveness = liveness;
  }


  public AudioFeaturesObject loudness(Float loudness) {
    
    
    
    
    this.loudness = loudness;
    return this;
  }

   /**
   * The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. 
   * @return loudness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-5.883", value = "The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. ")

  public Float getLoudness() {
    return loudness;
  }


  public void setLoudness(Float loudness) {
    
    
    
    this.loudness = loudness;
  }


  public AudioFeaturesObject mode(Integer mode) {
    
    
    
    
    this.mode = mode;
    return this;
  }

   /**
   * Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. 
   * @return mode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. ")

  public Integer getMode() {
    return mode;
  }


  public void setMode(Integer mode) {
    
    
    
    this.mode = mode;
  }


  public AudioFeaturesObject speechiness(Float speechiness) {
    
    
    
    
    this.speechiness = speechiness;
    return this;
  }

   /**
   * Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks. 
   * @return speechiness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.0556", value = "Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks. ")

  public Float getSpeechiness() {
    return speechiness;
  }


  public void setSpeechiness(Float speechiness) {
    
    
    
    this.speechiness = speechiness;
  }


  public AudioFeaturesObject tempo(Float tempo) {
    
    
    
    
    this.tempo = tempo;
    return this;
  }

   /**
   * The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 
   * @return tempo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "118.211", value = "The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. ")

  public Float getTempo() {
    return tempo;
  }


  public void setTempo(Float tempo) {
    
    
    
    this.tempo = tempo;
  }


  public AudioFeaturesObject timeSignature(Integer timeSignature) {
    if (timeSignature != null && timeSignature < 3) {
      throw new IllegalArgumentException("Invalid value for timeSignature. Must be greater than or equal to 3.");
    }
    if (timeSignature != null && timeSignature > 7) {
      throw new IllegalArgumentException("Invalid value for timeSignature. Must be less than or equal to 7.");
    }
    
    
    this.timeSignature = timeSignature;
    return this;
  }

   /**
   * An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \&quot;3/4\&quot;, to \&quot;7/4\&quot;.
   * minimum: 3
   * maximum: 7
   * @return timeSignature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4", value = "An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".")

  public Integer getTimeSignature() {
    return timeSignature;
  }


  public void setTimeSignature(Integer timeSignature) {
    if (timeSignature != null && timeSignature < 3) {
      throw new IllegalArgumentException("Invalid value for timeSignature. Must be greater than or equal to 3.");
    }
    if (timeSignature != null && timeSignature > 7) {
      throw new IllegalArgumentException("Invalid value for timeSignature. Must be less than or equal to 7.");
    }
    
    this.timeSignature = timeSignature;
  }


  public AudioFeaturesObject trackHref(String trackHref) {
    
    
    
    
    this.trackHref = trackHref;
    return this;
  }

   /**
   * A link to the Web API endpoint providing full details of the track. 
   * @return trackHref
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://api.spotify.com/v1/tracks/2takcwOaAZWiXQijPHIx7B ", value = "A link to the Web API endpoint providing full details of the track. ")

  public String getTrackHref() {
    return trackHref;
  }


  public void setTrackHref(String trackHref) {
    
    
    
    this.trackHref = trackHref;
  }


  public AudioFeaturesObject type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The object type. 
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The object type. ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public AudioFeaturesObject uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The Spotify URI for the track. 
   * @return uri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "spotify:track:2takcwOaAZWiXQijPHIx7B", value = "The Spotify URI for the track. ")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }


  public AudioFeaturesObject valence(Float valence) {
    if (valence != null && valence < 0) {
      throw new IllegalArgumentException("Invalid value for valence. Must be greater than or equal to 0.");
    }
    if (valence != null && valence > 1) {
      throw new IllegalArgumentException("Invalid value for valence. Must be less than or equal to 1.");
    }
    
    
    this.valence = valence;
    return this;
  }

   /**
   * A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry). 
   * minimum: 0
   * maximum: 1
   * @return valence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.428", value = "A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry). ")

  public Float getValence() {
    return valence;
  }


  public void setValence(Float valence) {
    if (valence != null && valence < 0) {
      throw new IllegalArgumentException("Invalid value for valence. Must be greater than or equal to 0.");
    }
    if (valence != null && valence > 1) {
      throw new IllegalArgumentException("Invalid value for valence. Must be less than or equal to 1.");
    }
    
    this.valence = valence;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AudioFeaturesObject instance itself
   */
  public AudioFeaturesObject putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioFeaturesObject audioFeaturesObject = (AudioFeaturesObject) o;
    return Objects.equals(this.acousticness, audioFeaturesObject.acousticness) &&
        Objects.equals(this.analysisUrl, audioFeaturesObject.analysisUrl) &&
        Objects.equals(this.danceability, audioFeaturesObject.danceability) &&
        Objects.equals(this.durationMs, audioFeaturesObject.durationMs) &&
        Objects.equals(this.energy, audioFeaturesObject.energy) &&
        Objects.equals(this.id, audioFeaturesObject.id) &&
        Objects.equals(this.instrumentalness, audioFeaturesObject.instrumentalness) &&
        Objects.equals(this.key, audioFeaturesObject.key) &&
        Objects.equals(this.liveness, audioFeaturesObject.liveness) &&
        Objects.equals(this.loudness, audioFeaturesObject.loudness) &&
        Objects.equals(this.mode, audioFeaturesObject.mode) &&
        Objects.equals(this.speechiness, audioFeaturesObject.speechiness) &&
        Objects.equals(this.tempo, audioFeaturesObject.tempo) &&
        Objects.equals(this.timeSignature, audioFeaturesObject.timeSignature) &&
        Objects.equals(this.trackHref, audioFeaturesObject.trackHref) &&
        Objects.equals(this.type, audioFeaturesObject.type) &&
        Objects.equals(this.uri, audioFeaturesObject.uri) &&
        Objects.equals(this.valence, audioFeaturesObject.valence)&&
        Objects.equals(this.additionalProperties, audioFeaturesObject.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acousticness, analysisUrl, danceability, durationMs, energy, id, instrumentalness, key, liveness, loudness, mode, speechiness, tempo, timeSignature, trackHref, type, uri, valence, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioFeaturesObject {\n");
    sb.append("    acousticness: ").append(toIndentedString(acousticness)).append("\n");
    sb.append("    analysisUrl: ").append(toIndentedString(analysisUrl)).append("\n");
    sb.append("    danceability: ").append(toIndentedString(danceability)).append("\n");
    sb.append("    durationMs: ").append(toIndentedString(durationMs)).append("\n");
    sb.append("    energy: ").append(toIndentedString(energy)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instrumentalness: ").append(toIndentedString(instrumentalness)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    liveness: ").append(toIndentedString(liveness)).append("\n");
    sb.append("    loudness: ").append(toIndentedString(loudness)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    speechiness: ").append(toIndentedString(speechiness)).append("\n");
    sb.append("    tempo: ").append(toIndentedString(tempo)).append("\n");
    sb.append("    timeSignature: ").append(toIndentedString(timeSignature)).append("\n");
    sb.append("    trackHref: ").append(toIndentedString(trackHref)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    valence: ").append(toIndentedString(valence)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acousticness");
    openapiFields.add("analysis_url");
    openapiFields.add("danceability");
    openapiFields.add("duration_ms");
    openapiFields.add("energy");
    openapiFields.add("id");
    openapiFields.add("instrumentalness");
    openapiFields.add("key");
    openapiFields.add("liveness");
    openapiFields.add("loudness");
    openapiFields.add("mode");
    openapiFields.add("speechiness");
    openapiFields.add("tempo");
    openapiFields.add("time_signature");
    openapiFields.add("track_href");
    openapiFields.add("type");
    openapiFields.add("uri");
    openapiFields.add("valence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AudioFeaturesObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AudioFeaturesObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioFeaturesObject is not found in the empty JSON string", AudioFeaturesObject.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("analysis_url") != null && !jsonObj.get("analysis_url").isJsonNull()) && !jsonObj.get("analysis_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analysis_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analysis_url").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("track_href") != null && !jsonObj.get("track_href").isJsonNull()) && !jsonObj.get("track_href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track_href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track_href").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioFeaturesObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioFeaturesObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioFeaturesObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioFeaturesObject.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioFeaturesObject>() {
           @Override
           public void write(JsonWriter out, AudioFeaturesObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioFeaturesObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AudioFeaturesObject instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AudioFeaturesObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AudioFeaturesObject
  * @throws IOException if the JSON string is invalid with respect to AudioFeaturesObject
  */
  public static AudioFeaturesObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioFeaturesObject.class);
  }

 /**
  * Convert an instance of AudioFeaturesObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

