/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DeviceObject
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DeviceObject {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_PRIVATE_SESSION = "is_private_session";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE_SESSION)
  private Boolean isPrivateSession;

  public static final String SERIALIZED_NAME_IS_RESTRICTED = "is_restricted";
  @SerializedName(SERIALIZED_NAME_IS_RESTRICTED)
  private Boolean isRestricted;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VOLUME_PERCENT = "volume_percent";
  @SerializedName(SERIALIZED_NAME_VOLUME_PERCENT)
  private Integer volumePercent;

  public static final String SERIALIZED_NAME_SUPPORTS_VOLUME = "supports_volume";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_VOLUME)
  private Boolean supportsVolume;

  public DeviceObject() {
  }

  public DeviceObject id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The device ID. This ID is unique and persistent to some extent. However, this is not guaranteed and any cached &#x60;device_id&#x60; should periodically be cleared out and refetched as necessary.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The device ID. This ID is unique and persistent to some extent. However, this is not guaranteed and any cached `device_id` should periodically be cleared out and refetched as necessary.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public DeviceObject isActive(Boolean isActive) {
    
    
    
    
    this.isActive = isActive;
    return this;
  }

   /**
   * If this device is the currently active device.
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this device is the currently active device.")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    
    
    
    this.isActive = isActive;
  }


  public DeviceObject isPrivateSession(Boolean isPrivateSession) {
    
    
    
    
    this.isPrivateSession = isPrivateSession;
    return this;
  }

   /**
   * If this device is currently in a private session.
   * @return isPrivateSession
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this device is currently in a private session.")

  public Boolean getIsPrivateSession() {
    return isPrivateSession;
  }


  public void setIsPrivateSession(Boolean isPrivateSession) {
    
    
    
    this.isPrivateSession = isPrivateSession;
  }


  public DeviceObject isRestricted(Boolean isRestricted) {
    
    
    
    
    this.isRestricted = isRestricted;
    return this;
  }

   /**
   * Whether controlling this device is restricted. At present if this is \&quot;true\&quot; then no Web API commands will be accepted by this device.
   * @return isRestricted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether controlling this device is restricted. At present if this is \"true\" then no Web API commands will be accepted by this device.")

  public Boolean getIsRestricted() {
    return isRestricted;
  }


  public void setIsRestricted(Boolean isRestricted) {
    
    
    
    this.isRestricted = isRestricted;
  }


  public DeviceObject name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * A human-readable name for the device. Some devices have a name that the user can configure (e.g. \\\&quot;Loudest speaker\\\&quot;) and some devices have a generic name associated with the manufacturer or device model.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Kitchen speaker", value = "A human-readable name for the device. Some devices have a name that the user can configure (e.g. \\\"Loudest speaker\\\") and some devices have a generic name associated with the manufacturer or device model.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public DeviceObject type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Device type, such as \&quot;computer\&quot;, \&quot;smartphone\&quot; or \&quot;speaker\&quot;.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "computer", value = "Device type, such as \"computer\", \"smartphone\" or \"speaker\".")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public DeviceObject volumePercent(Integer volumePercent) {
    if (volumePercent != null && volumePercent < 0) {
      throw new IllegalArgumentException("Invalid value for volumePercent. Must be greater than or equal to 0.");
    }
    if (volumePercent != null && volumePercent > 100) {
      throw new IllegalArgumentException("Invalid value for volumePercent. Must be less than or equal to 100.");
    }
    
    
    this.volumePercent = volumePercent;
    return this;
  }

   /**
   * The current volume in percent.
   * minimum: 0
   * maximum: 100
   * @return volumePercent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "59", value = "The current volume in percent.")

  public Integer getVolumePercent() {
    return volumePercent;
  }


  public void setVolumePercent(Integer volumePercent) {
    if (volumePercent != null && volumePercent < 0) {
      throw new IllegalArgumentException("Invalid value for volumePercent. Must be greater than or equal to 0.");
    }
    if (volumePercent != null && volumePercent > 100) {
      throw new IllegalArgumentException("Invalid value for volumePercent. Must be less than or equal to 100.");
    }
    
    this.volumePercent = volumePercent;
  }


  public DeviceObject supportsVolume(Boolean supportsVolume) {
    
    
    
    
    this.supportsVolume = supportsVolume;
    return this;
  }

   /**
   * If this device can be used to set the volume.
   * @return supportsVolume
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this device can be used to set the volume.")

  public Boolean getSupportsVolume() {
    return supportsVolume;
  }


  public void setSupportsVolume(Boolean supportsVolume) {
    
    
    
    this.supportsVolume = supportsVolume;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DeviceObject instance itself
   */
  public DeviceObject putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceObject deviceObject = (DeviceObject) o;
    return Objects.equals(this.id, deviceObject.id) &&
        Objects.equals(this.isActive, deviceObject.isActive) &&
        Objects.equals(this.isPrivateSession, deviceObject.isPrivateSession) &&
        Objects.equals(this.isRestricted, deviceObject.isRestricted) &&
        Objects.equals(this.name, deviceObject.name) &&
        Objects.equals(this.type, deviceObject.type) &&
        Objects.equals(this.volumePercent, deviceObject.volumePercent) &&
        Objects.equals(this.supportsVolume, deviceObject.supportsVolume)&&
        Objects.equals(this.additionalProperties, deviceObject.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, isActive, isPrivateSession, isRestricted, name, type, volumePercent, supportsVolume, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceObject {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isPrivateSession: ").append(toIndentedString(isPrivateSession)).append("\n");
    sb.append("    isRestricted: ").append(toIndentedString(isRestricted)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    volumePercent: ").append(toIndentedString(volumePercent)).append("\n");
    sb.append("    supportsVolume: ").append(toIndentedString(supportsVolume)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("is_active");
    openapiFields.add("is_private_session");
    openapiFields.add("is_restricted");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("volume_percent");
    openapiFields.add("supports_volume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeviceObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DeviceObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceObject is not found in the empty JSON string", DeviceObject.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonNull() && (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceObject.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceObject>() {
           @Override
           public void write(JsonWriter out, DeviceObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DeviceObject instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeviceObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeviceObject
  * @throws IOException if the JSON string is invalid with respect to DeviceObject
  */
  public static DeviceObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceObject.class);
  }

 /**
  * Convert an instance of DeviceObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

