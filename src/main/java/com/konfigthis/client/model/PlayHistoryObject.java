/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ContextObject;
import com.konfigthis.client.model.TrackObject;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PlayHistoryObject
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PlayHistoryObject {
  public static final String SERIALIZED_NAME_TRACK = "track";
  @SerializedName(SERIALIZED_NAME_TRACK)
  private TrackObject track;

  public static final String SERIALIZED_NAME_PLAYED_AT = "played_at";
  @SerializedName(SERIALIZED_NAME_PLAYED_AT)
  private OffsetDateTime playedAt;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private ContextObject context;

  public PlayHistoryObject() {
  }

  public PlayHistoryObject track(TrackObject track) {
    
    
    
    
    this.track = track;
    return this;
  }

   /**
   * The track the user listened to.
   * @return track
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The track the user listened to.")

  public TrackObject getTrack() {
    return track;
  }


  public void setTrack(TrackObject track) {
    
    
    
    this.track = track;
  }


  public PlayHistoryObject playedAt(OffsetDateTime playedAt) {
    
    
    
    
    this.playedAt = playedAt;
    return this;
  }

   /**
   * The date and time the track was played.
   * @return playedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the track was played.")

  public OffsetDateTime getPlayedAt() {
    return playedAt;
  }


  public void setPlayedAt(OffsetDateTime playedAt) {
    
    
    
    this.playedAt = playedAt;
  }


  public PlayHistoryObject context(ContextObject context) {
    
    
    
    
    this.context = context;
    return this;
  }

   /**
   * The context the track was played from.
   * @return context
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The context the track was played from.")

  public ContextObject getContext() {
    return context;
  }


  public void setContext(ContextObject context) {
    
    
    
    this.context = context;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PlayHistoryObject instance itself
   */
  public PlayHistoryObject putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayHistoryObject playHistoryObject = (PlayHistoryObject) o;
    return Objects.equals(this.track, playHistoryObject.track) &&
        Objects.equals(this.playedAt, playHistoryObject.playedAt) &&
        Objects.equals(this.context, playHistoryObject.context)&&
        Objects.equals(this.additionalProperties, playHistoryObject.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(track, playedAt, context, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayHistoryObject {\n");
    sb.append("    track: ").append(toIndentedString(track)).append("\n");
    sb.append("    playedAt: ").append(toIndentedString(playedAt)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("track");
    openapiFields.add("played_at");
    openapiFields.add("context");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PlayHistoryObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PlayHistoryObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayHistoryObject is not found in the empty JSON string", PlayHistoryObject.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `track`
      if (jsonObj.get("track") != null && !jsonObj.get("track").isJsonNull()) {
        TrackObject.validateJsonObject(jsonObj.getAsJsonObject("track"));
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        ContextObject.validateJsonObject(jsonObj.getAsJsonObject("context"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayHistoryObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayHistoryObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayHistoryObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayHistoryObject.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayHistoryObject>() {
           @Override
           public void write(JsonWriter out, PlayHistoryObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayHistoryObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PlayHistoryObject instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PlayHistoryObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PlayHistoryObject
  * @throws IOException if the JSON string is invalid with respect to PlayHistoryObject
  */
  public static PlayHistoryObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayHistoryObject.class);
  }

 /**
  * Convert an instance of PlayHistoryObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

