/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RecommendationSeedObject
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RecommendationSeedObject {
  public static final String SERIALIZED_NAME_AFTER_FILTERING_SIZE = "afterFilteringSize";
  @SerializedName(SERIALIZED_NAME_AFTER_FILTERING_SIZE)
  private Integer afterFilteringSize;

  public static final String SERIALIZED_NAME_AFTER_RELINKING_SIZE = "afterRelinkingSize";
  @SerializedName(SERIALIZED_NAME_AFTER_RELINKING_SIZE)
  private Integer afterRelinkingSize;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INITIAL_POOL_SIZE = "initialPoolSize";
  @SerializedName(SERIALIZED_NAME_INITIAL_POOL_SIZE)
  private Integer initialPoolSize;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public RecommendationSeedObject() {
  }

  public RecommendationSeedObject afterFilteringSize(Integer afterFilteringSize) {
    
    
    
    
    this.afterFilteringSize = afterFilteringSize;
    return this;
  }

   /**
   * The number of tracks available after min\\_\\* and max\\_\\* filters have been applied. 
   * @return afterFilteringSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of tracks available after min\\_\\* and max\\_\\* filters have been applied. ")

  public Integer getAfterFilteringSize() {
    return afterFilteringSize;
  }


  public void setAfterFilteringSize(Integer afterFilteringSize) {
    
    
    
    this.afterFilteringSize = afterFilteringSize;
  }


  public RecommendationSeedObject afterRelinkingSize(Integer afterRelinkingSize) {
    
    
    
    
    this.afterRelinkingSize = afterRelinkingSize;
    return this;
  }

   /**
   * The number of tracks available after relinking for regional availability. 
   * @return afterRelinkingSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of tracks available after relinking for regional availability. ")

  public Integer getAfterRelinkingSize() {
    return afterRelinkingSize;
  }


  public void setAfterRelinkingSize(Integer afterRelinkingSize) {
    
    
    
    this.afterRelinkingSize = afterRelinkingSize;
  }


  public RecommendationSeedObject href(String href) {
    
    
    
    
    this.href = href;
    return this;
  }

   /**
   * A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be &#x60;null&#x60;. 
   * @return href
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be `null`. ")

  public String getHref() {
    return href;
  }


  public void setHref(String href) {
    
    
    
    this.href = href;
  }


  public RecommendationSeedObject id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The id used to select this seed. This will be the same as the string used in the &#x60;seed_artists&#x60;, &#x60;seed_tracks&#x60; or &#x60;seed_genres&#x60; parameter. 
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter. ")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public RecommendationSeedObject initialPoolSize(Integer initialPoolSize) {
    
    
    
    
    this.initialPoolSize = initialPoolSize;
    return this;
  }

   /**
   * The number of recommended tracks available for this seed. 
   * @return initialPoolSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of recommended tracks available for this seed. ")

  public Integer getInitialPoolSize() {
    return initialPoolSize;
  }


  public void setInitialPoolSize(Integer initialPoolSize) {
    
    
    
    this.initialPoolSize = initialPoolSize;
  }


  public RecommendationSeedObject type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The entity type of this seed. One of &#x60;artist&#x60;, &#x60;track&#x60; or &#x60;genre&#x60;. 
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The entity type of this seed. One of `artist`, `track` or `genre`. ")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RecommendationSeedObject instance itself
   */
  public RecommendationSeedObject putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationSeedObject recommendationSeedObject = (RecommendationSeedObject) o;
    return Objects.equals(this.afterFilteringSize, recommendationSeedObject.afterFilteringSize) &&
        Objects.equals(this.afterRelinkingSize, recommendationSeedObject.afterRelinkingSize) &&
        Objects.equals(this.href, recommendationSeedObject.href) &&
        Objects.equals(this.id, recommendationSeedObject.id) &&
        Objects.equals(this.initialPoolSize, recommendationSeedObject.initialPoolSize) &&
        Objects.equals(this.type, recommendationSeedObject.type)&&
        Objects.equals(this.additionalProperties, recommendationSeedObject.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(afterFilteringSize, afterRelinkingSize, href, id, initialPoolSize, type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationSeedObject {\n");
    sb.append("    afterFilteringSize: ").append(toIndentedString(afterFilteringSize)).append("\n");
    sb.append("    afterRelinkingSize: ").append(toIndentedString(afterRelinkingSize)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    initialPoolSize: ").append(toIndentedString(initialPoolSize)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("afterFilteringSize");
    openapiFields.add("afterRelinkingSize");
    openapiFields.add("href");
    openapiFields.add("id");
    openapiFields.add("initialPoolSize");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RecommendationSeedObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RecommendationSeedObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationSeedObject is not found in the empty JSON string", RecommendationSeedObject.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationSeedObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationSeedObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationSeedObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationSeedObject.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationSeedObject>() {
           @Override
           public void write(JsonWriter out, RecommendationSeedObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationSeedObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RecommendationSeedObject instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecommendationSeedObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecommendationSeedObject
  * @throws IOException if the JSON string is invalid with respect to RecommendationSeedObject
  */
  public static RecommendationSeedObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationSeedObject.class);
  }

 /**
  * Convert an instance of RecommendationSeedObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

