/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ContextObject;
import com.konfigthis.client.model.DeviceObject;
import com.konfigthis.client.model.DisallowsObject;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CurrentlyPlayingContextObject
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CurrentlyPlayingContextObject {
  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private DeviceObject device;

  public static final String SERIALIZED_NAME_REPEAT_STATE = "repeat_state";
  @SerializedName(SERIALIZED_NAME_REPEAT_STATE)
  private String repeatState;

  public static final String SERIALIZED_NAME_SHUFFLE_STATE = "shuffle_state";
  @SerializedName(SERIALIZED_NAME_SHUFFLE_STATE)
  private Boolean shuffleState;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private ContextObject context;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;

  public static final String SERIALIZED_NAME_PROGRESS_MS = "progress_ms";
  @SerializedName(SERIALIZED_NAME_PROGRESS_MS)
  private Integer progressMs;

  public static final String SERIALIZED_NAME_IS_PLAYING = "is_playing";
  @SerializedName(SERIALIZED_NAME_IS_PLAYING)
  private Boolean isPlaying;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private Object item = null;

  public static final String SERIALIZED_NAME_CURRENTLY_PLAYING_TYPE = "currently_playing_type";
  @SerializedName(SERIALIZED_NAME_CURRENTLY_PLAYING_TYPE)
  private String currentlyPlayingType;

  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private DisallowsObject actions;

  public CurrentlyPlayingContextObject() {
  }

  public CurrentlyPlayingContextObject device(DeviceObject device) {
    
    
    
    
    this.device = device;
    return this;
  }

   /**
   * The device that is currently active. 
   * @return device
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The device that is currently active. ")

  public DeviceObject getDevice() {
    return device;
  }


  public void setDevice(DeviceObject device) {
    
    
    
    this.device = device;
  }


  public CurrentlyPlayingContextObject repeatState(String repeatState) {
    
    
    
    
    this.repeatState = repeatState;
    return this;
  }

   /**
   * off, track, context
   * @return repeatState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "off, track, context")

  public String getRepeatState() {
    return repeatState;
  }


  public void setRepeatState(String repeatState) {
    
    
    
    this.repeatState = repeatState;
  }


  public CurrentlyPlayingContextObject shuffleState(Boolean shuffleState) {
    
    
    
    
    this.shuffleState = shuffleState;
    return this;
  }

   /**
   * If shuffle is on or off.
   * @return shuffleState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If shuffle is on or off.")

  public Boolean getShuffleState() {
    return shuffleState;
  }


  public void setShuffleState(Boolean shuffleState) {
    
    
    
    this.shuffleState = shuffleState;
  }


  public CurrentlyPlayingContextObject context(ContextObject context) {
    
    
    
    
    this.context = context;
    return this;
  }

   /**
   * A Context Object. Can be &#x60;null&#x60;.
   * @return context
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A Context Object. Can be `null`.")

  public ContextObject getContext() {
    return context;
  }


  public void setContext(ContextObject context) {
    
    
    
    this.context = context;
  }


  public CurrentlyPlayingContextObject timestamp(Integer timestamp) {
    
    
    
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Unix Millisecond Timestamp when data was fetched.
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unix Millisecond Timestamp when data was fetched.")

  public Integer getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(Integer timestamp) {
    
    
    
    this.timestamp = timestamp;
  }


  public CurrentlyPlayingContextObject progressMs(Integer progressMs) {
    
    
    
    
    this.progressMs = progressMs;
    return this;
  }

   /**
   * Progress into the currently playing track or episode. Can be &#x60;null&#x60;.
   * @return progressMs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Progress into the currently playing track or episode. Can be `null`.")

  public Integer getProgressMs() {
    return progressMs;
  }


  public void setProgressMs(Integer progressMs) {
    
    
    
    this.progressMs = progressMs;
  }


  public CurrentlyPlayingContextObject isPlaying(Boolean isPlaying) {
    
    
    
    
    this.isPlaying = isPlaying;
    return this;
  }

   /**
   * If something is currently playing, return &#x60;true&#x60;.
   * @return isPlaying
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If something is currently playing, return `true`.")

  public Boolean getIsPlaying() {
    return isPlaying;
  }


  public void setIsPlaying(Boolean isPlaying) {
    
    
    
    this.isPlaying = isPlaying;
  }


  public CurrentlyPlayingContextObject item(Object item) {
    
    
    
    
    this.item = item;
    return this;
  }

   /**
   * Get item
   * @return item
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getItem() {
    return item;
  }


  public void setItem(Object item) {
    
    
    
    this.item = item;
  }


  public CurrentlyPlayingContextObject currentlyPlayingType(String currentlyPlayingType) {
    
    
    
    
    this.currentlyPlayingType = currentlyPlayingType;
    return this;
  }

   /**
   * The object type of the currently playing item. Can be one of &#x60;track&#x60;, &#x60;episode&#x60;, &#x60;ad&#x60; or &#x60;unknown&#x60;. 
   * @return currentlyPlayingType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`. ")

  public String getCurrentlyPlayingType() {
    return currentlyPlayingType;
  }


  public void setCurrentlyPlayingType(String currentlyPlayingType) {
    
    
    
    this.currentlyPlayingType = currentlyPlayingType;
  }


  public CurrentlyPlayingContextObject actions(DisallowsObject actions) {
    
    
    
    
    this.actions = actions;
    return this;
  }

   /**
   * Allows to update the user interface based on which playback actions are available within the current context. 
   * @return actions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allows to update the user interface based on which playback actions are available within the current context. ")

  public DisallowsObject getActions() {
    return actions;
  }


  public void setActions(DisallowsObject actions) {
    
    
    
    this.actions = actions;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CurrentlyPlayingContextObject instance itself
   */
  public CurrentlyPlayingContextObject putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentlyPlayingContextObject currentlyPlayingContextObject = (CurrentlyPlayingContextObject) o;
    return Objects.equals(this.device, currentlyPlayingContextObject.device) &&
        Objects.equals(this.repeatState, currentlyPlayingContextObject.repeatState) &&
        Objects.equals(this.shuffleState, currentlyPlayingContextObject.shuffleState) &&
        Objects.equals(this.context, currentlyPlayingContextObject.context) &&
        Objects.equals(this.timestamp, currentlyPlayingContextObject.timestamp) &&
        Objects.equals(this.progressMs, currentlyPlayingContextObject.progressMs) &&
        Objects.equals(this.isPlaying, currentlyPlayingContextObject.isPlaying) &&
        Objects.equals(this.item, currentlyPlayingContextObject.item) &&
        Objects.equals(this.currentlyPlayingType, currentlyPlayingContextObject.currentlyPlayingType) &&
        Objects.equals(this.actions, currentlyPlayingContextObject.actions)&&
        Objects.equals(this.additionalProperties, currentlyPlayingContextObject.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(device, repeatState, shuffleState, context, timestamp, progressMs, isPlaying, item, currentlyPlayingType, actions, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentlyPlayingContextObject {\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    repeatState: ").append(toIndentedString(repeatState)).append("\n");
    sb.append("    shuffleState: ").append(toIndentedString(shuffleState)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    progressMs: ").append(toIndentedString(progressMs)).append("\n");
    sb.append("    isPlaying: ").append(toIndentedString(isPlaying)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    currentlyPlayingType: ").append(toIndentedString(currentlyPlayingType)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("device");
    openapiFields.add("repeat_state");
    openapiFields.add("shuffle_state");
    openapiFields.add("context");
    openapiFields.add("timestamp");
    openapiFields.add("progress_ms");
    openapiFields.add("is_playing");
    openapiFields.add("item");
    openapiFields.add("currently_playing_type");
    openapiFields.add("actions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CurrentlyPlayingContextObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CurrentlyPlayingContextObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurrentlyPlayingContextObject is not found in the empty JSON string", CurrentlyPlayingContextObject.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `device`
      if (jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull()) {
        DeviceObject.validateJsonObject(jsonObj.getAsJsonObject("device"));
      }
      if ((jsonObj.get("repeat_state") != null && !jsonObj.get("repeat_state").isJsonNull()) && !jsonObj.get("repeat_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repeat_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repeat_state").toString()));
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        ContextObject.validateJsonObject(jsonObj.getAsJsonObject("context"));
      }
      if ((jsonObj.get("currently_playing_type") != null && !jsonObj.get("currently_playing_type").isJsonNull()) && !jsonObj.get("currently_playing_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currently_playing_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currently_playing_type").toString()));
      }
      // validate the optional field `actions`
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        DisallowsObject.validateJsonObject(jsonObj.getAsJsonObject("actions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurrentlyPlayingContextObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurrentlyPlayingContextObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurrentlyPlayingContextObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurrentlyPlayingContextObject.class));

       return (TypeAdapter<T>) new TypeAdapter<CurrentlyPlayingContextObject>() {
           @Override
           public void write(JsonWriter out, CurrentlyPlayingContextObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CurrentlyPlayingContextObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CurrentlyPlayingContextObject instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CurrentlyPlayingContextObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CurrentlyPlayingContextObject
  * @throws IOException if the JSON string is invalid with respect to CurrentlyPlayingContextObject
  */
  public static CurrentlyPlayingContextObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurrentlyPlayingContextObject.class);
  }

 /**
  * Convert an instance of CurrentlyPlayingContextObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

