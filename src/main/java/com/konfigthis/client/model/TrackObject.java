/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ArtistObject;
import com.konfigthis.client.model.ExternalIdObject;
import com.konfigthis.client.model.ExternalUrlObject;
import com.konfigthis.client.model.SimplifiedAlbumObject;
import com.konfigthis.client.model.TrackRestrictionObject;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TrackObject
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TrackObject {
  public static final String SERIALIZED_NAME_ALBUM = "album";
  @SerializedName(SERIALIZED_NAME_ALBUM)
  private SimplifiedAlbumObject album;

  public static final String SERIALIZED_NAME_ARTISTS = "artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  private List<ArtistObject> artists = null;

  public static final String SERIALIZED_NAME_AVAILABLE_MARKETS = "available_markets";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_MARKETS)
  private List<String> availableMarkets = null;

  public static final String SERIALIZED_NAME_DISC_NUMBER = "disc_number";
  @SerializedName(SERIALIZED_NAME_DISC_NUMBER)
  private Integer discNumber;

  public static final String SERIALIZED_NAME_DURATION_MS = "duration_ms";
  @SerializedName(SERIALIZED_NAME_DURATION_MS)
  private Integer durationMs;

  public static final String SERIALIZED_NAME_EXPLICIT = "explicit";
  @SerializedName(SERIALIZED_NAME_EXPLICIT)
  private Boolean explicit;

  public static final String SERIALIZED_NAME_EXTERNAL_IDS = "external_ids";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDS)
  private ExternalIdObject externalIds;

  public static final String SERIALIZED_NAME_EXTERNAL_URLS = "external_urls";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URLS)
  private ExternalUrlObject externalUrls;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_PLAYABLE = "is_playable";
  @SerializedName(SERIALIZED_NAME_IS_PLAYABLE)
  private Boolean isPlayable;

  public static final String SERIALIZED_NAME_LINKED_FROM = "linked_from";
  @SerializedName(SERIALIZED_NAME_LINKED_FROM)
  private Object linkedFrom;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private TrackRestrictionObject restrictions;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POPULARITY = "popularity";
  @SerializedName(SERIALIZED_NAME_POPULARITY)
  private Integer popularity;

  public static final String SERIALIZED_NAME_PREVIEW_URL = "preview_url";
  @SerializedName(SERIALIZED_NAME_PREVIEW_URL)
  private String previewUrl;

  public static final String SERIALIZED_NAME_TRACK_NUMBER = "track_number";
  @SerializedName(SERIALIZED_NAME_TRACK_NUMBER)
  private Integer trackNumber;

  /**
   * The object type: \&quot;track\&quot;. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    TRACK("track");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_IS_LOCAL = "is_local";
  @SerializedName(SERIALIZED_NAME_IS_LOCAL)
  private Boolean isLocal;

  public TrackObject() {
  }

  public TrackObject album(SimplifiedAlbumObject album) {
    
    
    
    
    this.album = album;
    return this;
  }

   /**
   * The album on which the track appears. The album object includes a link in &#x60;href&#x60; to full information about the album. 
   * @return album
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The album on which the track appears. The album object includes a link in `href` to full information about the album. ")

  public SimplifiedAlbumObject getAlbum() {
    return album;
  }


  public void setAlbum(SimplifiedAlbumObject album) {
    
    
    
    this.album = album;
  }


  public TrackObject artists(List<ArtistObject> artists) {
    
    
    
    
    this.artists = artists;
    return this;
  }

  public TrackObject addArtistsItem(ArtistObject artistsItem) {
    if (this.artists == null) {
      this.artists = new ArrayList<>();
    }
    this.artists.add(artistsItem);
    return this;
  }

   /**
   * The artists who performed the track. Each artist object includes a link in &#x60;href&#x60; to more detailed information about the artist. 
   * @return artists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist. ")

  public List<ArtistObject> getArtists() {
    return artists;
  }


  public void setArtists(List<ArtistObject> artists) {
    
    
    
    this.artists = artists;
  }


  public TrackObject availableMarkets(List<String> availableMarkets) {
    
    
    
    
    this.availableMarkets = availableMarkets;
    return this;
  }

  public TrackObject addAvailableMarketsItem(String availableMarketsItem) {
    if (this.availableMarkets == null) {
      this.availableMarkets = new ArrayList<>();
    }
    this.availableMarkets.add(availableMarketsItem);
    return this;
  }

   /**
   * A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
   * @return availableMarkets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. ")

  public List<String> getAvailableMarkets() {
    return availableMarkets;
  }


  public void setAvailableMarkets(List<String> availableMarkets) {
    
    
    
    this.availableMarkets = availableMarkets;
  }


  public TrackObject discNumber(Integer discNumber) {
    
    
    
    
    this.discNumber = discNumber;
    return this;
  }

   /**
   * The disc number (usually &#x60;1&#x60; unless the album consists of more than one disc). 
   * @return discNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The disc number (usually `1` unless the album consists of more than one disc). ")

  public Integer getDiscNumber() {
    return discNumber;
  }


  public void setDiscNumber(Integer discNumber) {
    
    
    
    this.discNumber = discNumber;
  }


  public TrackObject durationMs(Integer durationMs) {
    
    
    
    
    this.durationMs = durationMs;
    return this;
  }

   /**
   * The track length in milliseconds. 
   * @return durationMs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The track length in milliseconds. ")

  public Integer getDurationMs() {
    return durationMs;
  }


  public void setDurationMs(Integer durationMs) {
    
    
    
    this.durationMs = durationMs;
  }


  public TrackObject explicit(Boolean explicit) {
    
    
    
    
    this.explicit = explicit;
    return this;
  }

   /**
   * Whether or not the track has explicit lyrics ( &#x60;true&#x60; &#x3D; yes it does; &#x60;false&#x60; &#x3D; no it does not OR unknown). 
   * @return explicit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown). ")

  public Boolean getExplicit() {
    return explicit;
  }


  public void setExplicit(Boolean explicit) {
    
    
    
    this.explicit = explicit;
  }


  public TrackObject externalIds(ExternalIdObject externalIds) {
    
    
    
    
    this.externalIds = externalIds;
    return this;
  }

   /**
   * Known external IDs for the track. 
   * @return externalIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Known external IDs for the track. ")

  public ExternalIdObject getExternalIds() {
    return externalIds;
  }


  public void setExternalIds(ExternalIdObject externalIds) {
    
    
    
    this.externalIds = externalIds;
  }


  public TrackObject externalUrls(ExternalUrlObject externalUrls) {
    
    
    
    
    this.externalUrls = externalUrls;
    return this;
  }

   /**
   * Known external URLs for this track. 
   * @return externalUrls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Known external URLs for this track. ")

  public ExternalUrlObject getExternalUrls() {
    return externalUrls;
  }


  public void setExternalUrls(ExternalUrlObject externalUrls) {
    
    
    
    this.externalUrls = externalUrls;
  }


  public TrackObject href(String href) {
    
    
    
    
    this.href = href;
    return this;
  }

   /**
   * A link to the Web API endpoint providing full details of the track. 
   * @return href
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A link to the Web API endpoint providing full details of the track. ")

  public String getHref() {
    return href;
  }


  public void setHref(String href) {
    
    
    
    this.href = href;
  }


  public TrackObject id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. ")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public TrackObject isPlayable(Boolean isPlayable) {
    
    
    
    
    this.isPlayable = isPlayable;
    return this;
  }

   /**
   * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If &#x60;true&#x60;, the track is playable in the given market. Otherwise &#x60;false&#x60;. 
   * @return isPlayable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`. ")

  public Boolean getIsPlayable() {
    return isPlayable;
  }


  public void setIsPlayable(Boolean isPlayable) {
    
    
    
    this.isPlayable = isPlayable;
  }


  public TrackObject linkedFrom(Object linkedFrom) {
    
    
    
    
    this.linkedFrom = linkedFrom;
    return this;
  }

   /**
   * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the &#x60;linked_from&#x60; object contains information about the originally requested track. 
   * @return linkedFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track. ")

  public Object getLinkedFrom() {
    return linkedFrom;
  }


  public void setLinkedFrom(Object linkedFrom) {
    
    
    
    this.linkedFrom = linkedFrom;
  }


  public TrackObject restrictions(TrackRestrictionObject restrictions) {
    
    
    
    
    this.restrictions = restrictions;
    return this;
  }

   /**
   * Included in the response when a content restriction is applied. 
   * @return restrictions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Included in the response when a content restriction is applied. ")

  public TrackRestrictionObject getRestrictions() {
    return restrictions;
  }


  public void setRestrictions(TrackRestrictionObject restrictions) {
    
    
    
    this.restrictions = restrictions;
  }


  public TrackObject name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the track. 
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the track. ")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public TrackObject popularity(Integer popularity) {
    
    
    
    
    this.popularity = popularity;
    return this;
  }

   /**
   * The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.&lt;br/&gt;The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.&lt;br/&gt;Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._ 
   * @return popularity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._ ")

  public Integer getPopularity() {
    return popularity;
  }


  public void setPopularity(Integer popularity) {
    
    
    
    this.popularity = popularity;
  }


  public TrackObject previewUrl(String previewUrl) {
    
    
    
    
    this.previewUrl = previewUrl;
    return this;
  }

   /**
   * A link to a 30 second preview (MP3 format) of the track. Can be &#x60;null&#x60; 
   * @return previewUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A link to a 30 second preview (MP3 format) of the track. Can be `null` ")

  public String getPreviewUrl() {
    return previewUrl;
  }


  public void setPreviewUrl(String previewUrl) {
    
    
    
    this.previewUrl = previewUrl;
  }


  public TrackObject trackNumber(Integer trackNumber) {
    
    
    
    
    this.trackNumber = trackNumber;
    return this;
  }

   /**
   * The number of the track. If an album has several discs, the track number is the number on the specified disc. 
   * @return trackNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of the track. If an album has several discs, the track number is the number on the specified disc. ")

  public Integer getTrackNumber() {
    return trackNumber;
  }


  public void setTrackNumber(Integer trackNumber) {
    
    
    
    this.trackNumber = trackNumber;
  }


  public TrackObject type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The object type: \&quot;track\&quot;. 
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The object type: \"track\". ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public TrackObject uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
   * @return uri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. ")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }


  public TrackObject isLocal(Boolean isLocal) {
    
    
    
    
    this.isLocal = isLocal;
    return this;
  }

   /**
   * Whether or not the track is from a local file. 
   * @return isLocal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not the track is from a local file. ")

  public Boolean getIsLocal() {
    return isLocal;
  }


  public void setIsLocal(Boolean isLocal) {
    
    
    
    this.isLocal = isLocal;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TrackObject instance itself
   */
  public TrackObject putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackObject trackObject = (TrackObject) o;
    return Objects.equals(this.album, trackObject.album) &&
        Objects.equals(this.artists, trackObject.artists) &&
        Objects.equals(this.availableMarkets, trackObject.availableMarkets) &&
        Objects.equals(this.discNumber, trackObject.discNumber) &&
        Objects.equals(this.durationMs, trackObject.durationMs) &&
        Objects.equals(this.explicit, trackObject.explicit) &&
        Objects.equals(this.externalIds, trackObject.externalIds) &&
        Objects.equals(this.externalUrls, trackObject.externalUrls) &&
        Objects.equals(this.href, trackObject.href) &&
        Objects.equals(this.id, trackObject.id) &&
        Objects.equals(this.isPlayable, trackObject.isPlayable) &&
        Objects.equals(this.linkedFrom, trackObject.linkedFrom) &&
        Objects.equals(this.restrictions, trackObject.restrictions) &&
        Objects.equals(this.name, trackObject.name) &&
        Objects.equals(this.popularity, trackObject.popularity) &&
        Objects.equals(this.previewUrl, trackObject.previewUrl) &&
        Objects.equals(this.trackNumber, trackObject.trackNumber) &&
        Objects.equals(this.type, trackObject.type) &&
        Objects.equals(this.uri, trackObject.uri) &&
        Objects.equals(this.isLocal, trackObject.isLocal)&&
        Objects.equals(this.additionalProperties, trackObject.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(album, artists, availableMarkets, discNumber, durationMs, explicit, externalIds, externalUrls, href, id, isPlayable, linkedFrom, restrictions, name, popularity, previewUrl, trackNumber, type, uri, isLocal, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackObject {\n");
    sb.append("    album: ").append(toIndentedString(album)).append("\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    availableMarkets: ").append(toIndentedString(availableMarkets)).append("\n");
    sb.append("    discNumber: ").append(toIndentedString(discNumber)).append("\n");
    sb.append("    durationMs: ").append(toIndentedString(durationMs)).append("\n");
    sb.append("    explicit: ").append(toIndentedString(explicit)).append("\n");
    sb.append("    externalIds: ").append(toIndentedString(externalIds)).append("\n");
    sb.append("    externalUrls: ").append(toIndentedString(externalUrls)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPlayable: ").append(toIndentedString(isPlayable)).append("\n");
    sb.append("    linkedFrom: ").append(toIndentedString(linkedFrom)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    popularity: ").append(toIndentedString(popularity)).append("\n");
    sb.append("    previewUrl: ").append(toIndentedString(previewUrl)).append("\n");
    sb.append("    trackNumber: ").append(toIndentedString(trackNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    isLocal: ").append(toIndentedString(isLocal)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("album");
    openapiFields.add("artists");
    openapiFields.add("available_markets");
    openapiFields.add("disc_number");
    openapiFields.add("duration_ms");
    openapiFields.add("explicit");
    openapiFields.add("external_ids");
    openapiFields.add("external_urls");
    openapiFields.add("href");
    openapiFields.add("id");
    openapiFields.add("is_playable");
    openapiFields.add("linked_from");
    openapiFields.add("restrictions");
    openapiFields.add("name");
    openapiFields.add("popularity");
    openapiFields.add("preview_url");
    openapiFields.add("track_number");
    openapiFields.add("type");
    openapiFields.add("uri");
    openapiFields.add("is_local");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrackObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TrackObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackObject is not found in the empty JSON string", TrackObject.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `album`
      if (jsonObj.get("album") != null && !jsonObj.get("album").isJsonNull()) {
        SimplifiedAlbumObject.validateJsonObject(jsonObj.getAsJsonObject("album"));
      }
      if (jsonObj.get("artists") != null && !jsonObj.get("artists").isJsonNull()) {
        JsonArray jsonArrayartists = jsonObj.getAsJsonArray("artists");
        if (jsonArrayartists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artists` to be an array in the JSON string but got `%s`", jsonObj.get("artists").toString()));
          }

          // validate the optional field `artists` (array)
          for (int i = 0; i < jsonArrayartists.size(); i++) {
            ArtistObject.validateJsonObject(jsonArrayartists.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("available_markets") != null && !jsonObj.get("available_markets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_markets` to be an array in the JSON string but got `%s`", jsonObj.get("available_markets").toString()));
      }
      // validate the optional field `external_ids`
      if (jsonObj.get("external_ids") != null && !jsonObj.get("external_ids").isJsonNull()) {
        ExternalIdObject.validateJsonObject(jsonObj.getAsJsonObject("external_ids"));
      }
      // validate the optional field `external_urls`
      if (jsonObj.get("external_urls") != null && !jsonObj.get("external_urls").isJsonNull()) {
        ExternalUrlObject.validateJsonObject(jsonObj.getAsJsonObject("external_urls"));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `restrictions`
      if (jsonObj.get("restrictions") != null && !jsonObj.get("restrictions").isJsonNull()) {
        TrackRestrictionObject.validateJsonObject(jsonObj.getAsJsonObject("restrictions"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("preview_url").isJsonNull() && (jsonObj.get("preview_url") != null && !jsonObj.get("preview_url").isJsonNull()) && !jsonObj.get("preview_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preview_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preview_url").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackObject.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackObject>() {
           @Override
           public void write(JsonWriter out, TrackObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TrackObject instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrackObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrackObject
  * @throws IOException if the JSON string is invalid with respect to TrackObject
  */
  public static TrackObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackObject.class);
  }

 /**
  * Convert an instance of TrackObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

