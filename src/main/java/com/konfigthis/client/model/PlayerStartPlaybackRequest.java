/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PlayerStartPlaybackRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PlayerStartPlaybackRequest {
  public static final String SERIALIZED_NAME_CONTEXT_URI = "context_uri";
  @SerializedName(SERIALIZED_NAME_CONTEXT_URI)
  private Map<String, Object> contextUri = null;

  public static final String SERIALIZED_NAME_URIS = "uris";
  @SerializedName(SERIALIZED_NAME_URIS)
  private List<String> uris = null;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Map<String, Object> offset = null;

  public static final String SERIALIZED_NAME_POSITION_MS = "position_ms";
  @SerializedName(SERIALIZED_NAME_POSITION_MS)
  private Map<String, Object> positionMs = null;

  public PlayerStartPlaybackRequest() {
  }

  public PlayerStartPlaybackRequest contextUri(Map<String, Object> contextUri) {
    
    
    
    
    this.contextUri = contextUri;
    return this;
  }

  public PlayerStartPlaybackRequest putContextUriItem(String key, Object contextUriItem) {
    if (this.contextUri == null) {
      this.contextUri = new HashMap<>();
    }
    this.contextUri.put(key, contextUriItem);
    return this;
  }

   /**
   * Optional. Spotify URI of the context to play. Valid contexts are albums, artists &amp; playlists. &#x60;{context_uri:\&quot;spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\&quot;}&#x60; 
   * @return contextUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "spotify:album:5ht7ItJgpBH7W6vJ5BqpPr", value = "Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. `{context_uri:\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\"}` ")

  public Map<String, Object> getContextUri() {
    return contextUri;
  }


  public void setContextUri(Map<String, Object> contextUri) {
    
    
    
    this.contextUri = contextUri;
  }


  public PlayerStartPlaybackRequest uris(List<String> uris) {
    
    
    
    
    this.uris = uris;
    return this;
  }

  public PlayerStartPlaybackRequest addUrisItem(String urisItem) {
    if (this.uris == null) {
      this.uris = new ArrayList<>();
    }
    this.uris.add(urisItem);
    return this;
  }

   /**
   * Optional. A JSON array of the Spotify track URIs to play. For example: &#x60;{\&quot;uris\&quot;: [\&quot;spotify:track:4iV5W9uYEdYUVa79Axb7Rh\&quot;, \&quot;spotify:track:1301WleyT98MSxVHPZCA6M\&quot;]}&#x60; 
   * @return uris
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional. A JSON array of the Spotify track URIs to play. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"]}` ")

  public List<String> getUris() {
    return uris;
  }


  public void setUris(List<String> uris) {
    
    
    
    this.uris = uris;
  }


  public PlayerStartPlaybackRequest offset(Map<String, Object> offset) {
    
    
    
    
    this.offset = offset;
    return this;
  }

  public PlayerStartPlaybackRequest putOffsetItem(String key, Object offsetItem) {
    if (this.offset == null) {
      this.offset = new HashMap<>();
    }
    this.offset.put(key, offsetItem);
    return this;
  }

   /**
   * Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \&quot;position\&quot; is zero based and can’t be negative. Example: &#x60;\&quot;offset\&quot;: {\&quot;position\&quot;: 5}&#x60; \&quot;uri\&quot; is a string representing the uri of the item to start at. Example: &#x60;\&quot;offset\&quot;: {\&quot;uri\&quot;: \&quot;spotify:track:1301WleyT98MSxVHPZCA6M\&quot;}&#x60; 
   * @return offset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \"position\" is zero based and can’t be negative. Example: `\"offset\": {\"position\": 5}` \"uri\" is a string representing the uri of the item to start at. Example: `\"offset\": {\"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\"}` ")

  public Map<String, Object> getOffset() {
    return offset;
  }


  public void setOffset(Map<String, Object> offset) {
    
    
    
    this.offset = offset;
  }


  public PlayerStartPlaybackRequest positionMs(Map<String, Object> positionMs) {
    
    
    
    
    this.positionMs = positionMs;
    return this;
  }

  public PlayerStartPlaybackRequest putPositionMsItem(String key, Object positionMsItem) {
    if (this.positionMs == null) {
      this.positionMs = new HashMap<>();
    }
    this.positionMs.put(key, positionMsItem);
    return this;
  }

   /**
   * integer
   * @return positionMs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "integer")

  public Map<String, Object> getPositionMs() {
    return positionMs;
  }


  public void setPositionMs(Map<String, Object> positionMs) {
    
    
    
    this.positionMs = positionMs;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PlayerStartPlaybackRequest instance itself
   */
  public PlayerStartPlaybackRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerStartPlaybackRequest playerStartPlaybackRequest = (PlayerStartPlaybackRequest) o;
    return Objects.equals(this.contextUri, playerStartPlaybackRequest.contextUri) &&
        Objects.equals(this.uris, playerStartPlaybackRequest.uris) &&
        Objects.equals(this.offset, playerStartPlaybackRequest.offset) &&
        Objects.equals(this.positionMs, playerStartPlaybackRequest.positionMs)&&
        Objects.equals(this.additionalProperties, playerStartPlaybackRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contextUri, uris, offset, positionMs, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerStartPlaybackRequest {\n");
    sb.append("    contextUri: ").append(toIndentedString(contextUri)).append("\n");
    sb.append("    uris: ").append(toIndentedString(uris)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    positionMs: ").append(toIndentedString(positionMs)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("context_uri");
    openapiFields.add("uris");
    openapiFields.add("offset");
    openapiFields.add("position_ms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PlayerStartPlaybackRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PlayerStartPlaybackRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerStartPlaybackRequest is not found in the empty JSON string", PlayerStartPlaybackRequest.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("uris") != null && !jsonObj.get("uris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uris` to be an array in the JSON string but got `%s`", jsonObj.get("uris").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerStartPlaybackRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerStartPlaybackRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerStartPlaybackRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerStartPlaybackRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerStartPlaybackRequest>() {
           @Override
           public void write(JsonWriter out, PlayerStartPlaybackRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerStartPlaybackRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PlayerStartPlaybackRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PlayerStartPlaybackRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PlayerStartPlaybackRequest
  * @throws IOException if the JSON string is invalid with respect to PlayerStartPlaybackRequest
  */
  public static PlayerStartPlaybackRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerStartPlaybackRequest.class);
  }

 /**
  * Convert an instance of PlayerStartPlaybackRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

