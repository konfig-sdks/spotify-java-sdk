/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AudioAnalysisObjectMeta
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AudioAnalysisObjectMeta {
  public static final String SERIALIZED_NAME_ANALYZER_VERSION = "analyzer_version";
  @SerializedName(SERIALIZED_NAME_ANALYZER_VERSION)
  private String analyzerVersion;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_DETAILED_STATUS = "detailed_status";
  @SerializedName(SERIALIZED_NAME_DETAILED_STATUS)
  private String detailedStatus;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;

  public static final String SERIALIZED_NAME_ANALYSIS_TIME = "analysis_time";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_TIME)
  private Double analysisTime;

  public static final String SERIALIZED_NAME_INPUT_PROCESS = "input_process";
  @SerializedName(SERIALIZED_NAME_INPUT_PROCESS)
  private String inputProcess;

  public AudioAnalysisObjectMeta() {
  }

  public AudioAnalysisObjectMeta analyzerVersion(String analyzerVersion) {
    
    
    
    
    this.analyzerVersion = analyzerVersion;
    return this;
  }

   /**
   * The version of the Analyzer used to analyze this track.
   * @return analyzerVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4.0.0", value = "The version of the Analyzer used to analyze this track.")

  public String getAnalyzerVersion() {
    return analyzerVersion;
  }


  public void setAnalyzerVersion(String analyzerVersion) {
    
    
    
    this.analyzerVersion = analyzerVersion;
  }


  public AudioAnalysisObjectMeta platform(String platform) {
    
    
    
    
    this.platform = platform;
    return this;
  }

   /**
   * The platform used to read the track&#39;s audio data.
   * @return platform
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Linux", value = "The platform used to read the track's audio data.")

  public String getPlatform() {
    return platform;
  }


  public void setPlatform(String platform) {
    
    
    
    this.platform = platform;
  }


  public AudioAnalysisObjectMeta detailedStatus(String detailedStatus) {
    
    
    
    
    this.detailedStatus = detailedStatus;
    return this;
  }

   /**
   * A detailed status code for this track. If analysis data is missing, this code may explain why.
   * @return detailedStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OK", value = "A detailed status code for this track. If analysis data is missing, this code may explain why.")

  public String getDetailedStatus() {
    return detailedStatus;
  }


  public void setDetailedStatus(String detailedStatus) {
    
    
    
    this.detailedStatus = detailedStatus;
  }


  public AudioAnalysisObjectMeta statusCode(Integer statusCode) {
    
    
    
    
    this.statusCode = statusCode;
    return this;
  }

   /**
   * The return code of the analyzer process. 0 if successful, 1 if any errors occurred.
   * @return statusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "The return code of the analyzer process. 0 if successful, 1 if any errors occurred.")

  public Integer getStatusCode() {
    return statusCode;
  }


  public void setStatusCode(Integer statusCode) {
    
    
    
    this.statusCode = statusCode;
  }


  public AudioAnalysisObjectMeta timestamp(Integer timestamp) {
    
    
    
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The Unix timestamp (in seconds) at which this track was analyzed.
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1495193577", value = "The Unix timestamp (in seconds) at which this track was analyzed.")

  public Integer getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(Integer timestamp) {
    
    
    
    this.timestamp = timestamp;
  }


  public AudioAnalysisObjectMeta analysisTime(Double analysisTime) {
    
    
    
    
    this.analysisTime = analysisTime;
    return this;
  }

  public AudioAnalysisObjectMeta analysisTime(Integer analysisTime) {
    
    
    
    
    this.analysisTime = analysisTime.doubleValue();
    return this;
  }

   /**
   * The amount of time taken to analyze this track.
   * @return analysisTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6.93906", value = "The amount of time taken to analyze this track.")

  public Double getAnalysisTime() {
    return analysisTime;
  }


  public void setAnalysisTime(Double analysisTime) {
    
    
    
    this.analysisTime = analysisTime;
  }


  public AudioAnalysisObjectMeta inputProcess(String inputProcess) {
    
    
    
    
    this.inputProcess = inputProcess;
    return this;
  }

   /**
   * The method used to read the track&#39;s audio data.
   * @return inputProcess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "libvorbisfile L+R 44100->22050", value = "The method used to read the track's audio data.")

  public String getInputProcess() {
    return inputProcess;
  }


  public void setInputProcess(String inputProcess) {
    
    
    
    this.inputProcess = inputProcess;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AudioAnalysisObjectMeta instance itself
   */
  public AudioAnalysisObjectMeta putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioAnalysisObjectMeta audioAnalysisObjectMeta = (AudioAnalysisObjectMeta) o;
    return Objects.equals(this.analyzerVersion, audioAnalysisObjectMeta.analyzerVersion) &&
        Objects.equals(this.platform, audioAnalysisObjectMeta.platform) &&
        Objects.equals(this.detailedStatus, audioAnalysisObjectMeta.detailedStatus) &&
        Objects.equals(this.statusCode, audioAnalysisObjectMeta.statusCode) &&
        Objects.equals(this.timestamp, audioAnalysisObjectMeta.timestamp) &&
        Objects.equals(this.analysisTime, audioAnalysisObjectMeta.analysisTime) &&
        Objects.equals(this.inputProcess, audioAnalysisObjectMeta.inputProcess)&&
        Objects.equals(this.additionalProperties, audioAnalysisObjectMeta.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyzerVersion, platform, detailedStatus, statusCode, timestamp, analysisTime, inputProcess, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioAnalysisObjectMeta {\n");
    sb.append("    analyzerVersion: ").append(toIndentedString(analyzerVersion)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    detailedStatus: ").append(toIndentedString(detailedStatus)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    analysisTime: ").append(toIndentedString(analysisTime)).append("\n");
    sb.append("    inputProcess: ").append(toIndentedString(inputProcess)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analyzer_version");
    openapiFields.add("platform");
    openapiFields.add("detailed_status");
    openapiFields.add("status_code");
    openapiFields.add("timestamp");
    openapiFields.add("analysis_time");
    openapiFields.add("input_process");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AudioAnalysisObjectMeta
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AudioAnalysisObjectMeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioAnalysisObjectMeta is not found in the empty JSON string", AudioAnalysisObjectMeta.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("analyzer_version") != null && !jsonObj.get("analyzer_version").isJsonNull()) && !jsonObj.get("analyzer_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analyzer_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analyzer_version").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if ((jsonObj.get("detailed_status") != null && !jsonObj.get("detailed_status").isJsonNull()) && !jsonObj.get("detailed_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailed_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailed_status").toString()));
      }
      if ((jsonObj.get("input_process") != null && !jsonObj.get("input_process").isJsonNull()) && !jsonObj.get("input_process").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_process` to be a primitive type in the JSON string but got `%s`", jsonObj.get("input_process").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioAnalysisObjectMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioAnalysisObjectMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioAnalysisObjectMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioAnalysisObjectMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioAnalysisObjectMeta>() {
           @Override
           public void write(JsonWriter out, AudioAnalysisObjectMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioAnalysisObjectMeta read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AudioAnalysisObjectMeta instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AudioAnalysisObjectMeta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AudioAnalysisObjectMeta
  * @throws IOException if the JSON string is invalid with respect to AudioAnalysisObjectMeta
  */
  public static AudioAnalysisObjectMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioAnalysisObjectMeta.class);
  }

 /**
  * Convert an instance of AudioAnalysisObjectMeta to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

