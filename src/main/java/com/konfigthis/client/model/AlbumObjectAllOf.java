/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CopyrightObject;
import com.konfigthis.client.model.ExternalIdObject;
import com.konfigthis.client.model.PagingSimplifiedTrackObject;
import com.konfigthis.client.model.SimplifiedArtistObject;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AlbumObjectAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AlbumObjectAllOf {
  public static final String SERIALIZED_NAME_ARTISTS = "artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  private List<SimplifiedArtistObject> artists = null;

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private PagingSimplifiedTrackObject tracks;

  public static final String SERIALIZED_NAME_COPYRIGHTS = "copyrights";
  @SerializedName(SERIALIZED_NAME_COPYRIGHTS)
  private List<CopyrightObject> copyrights = null;

  public static final String SERIALIZED_NAME_EXTERNAL_IDS = "external_ids";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDS)
  private ExternalIdObject externalIds;

  public static final String SERIALIZED_NAME_GENRES = "genres";
  @SerializedName(SERIALIZED_NAME_GENRES)
  private List<String> genres = null;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_POPULARITY = "popularity";
  @SerializedName(SERIALIZED_NAME_POPULARITY)
  private Integer popularity;

  public AlbumObjectAllOf() {
  }

  public AlbumObjectAllOf artists(List<SimplifiedArtistObject> artists) {
    
    
    
    
    this.artists = artists;
    return this;
  }

  public AlbumObjectAllOf addArtistsItem(SimplifiedArtistObject artistsItem) {
    if (this.artists == null) {
      this.artists = new ArrayList<>();
    }
    this.artists.add(artistsItem);
    return this;
  }

   /**
   * The artists of the album. Each artist object includes a link in &#x60;href&#x60; to more detailed information about the artist. 
   * @return artists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. ")

  public List<SimplifiedArtistObject> getArtists() {
    return artists;
  }


  public void setArtists(List<SimplifiedArtistObject> artists) {
    
    
    
    this.artists = artists;
  }


  public AlbumObjectAllOf tracks(PagingSimplifiedTrackObject tracks) {
    
    
    
    
    this.tracks = tracks;
    return this;
  }

   /**
   * Get tracks
   * @return tracks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PagingSimplifiedTrackObject getTracks() {
    return tracks;
  }


  public void setTracks(PagingSimplifiedTrackObject tracks) {
    
    
    
    this.tracks = tracks;
  }


  public AlbumObjectAllOf copyrights(List<CopyrightObject> copyrights) {
    
    
    
    
    this.copyrights = copyrights;
    return this;
  }

  public AlbumObjectAllOf addCopyrightsItem(CopyrightObject copyrightsItem) {
    if (this.copyrights == null) {
      this.copyrights = new ArrayList<>();
    }
    this.copyrights.add(copyrightsItem);
    return this;
  }

   /**
   * The copyright statements of the album. 
   * @return copyrights
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The copyright statements of the album. ")

  public List<CopyrightObject> getCopyrights() {
    return copyrights;
  }


  public void setCopyrights(List<CopyrightObject> copyrights) {
    
    
    
    this.copyrights = copyrights;
  }


  public AlbumObjectAllOf externalIds(ExternalIdObject externalIds) {
    
    
    
    
    this.externalIds = externalIds;
    return this;
  }

   /**
   * Get externalIds
   * @return externalIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExternalIdObject getExternalIds() {
    return externalIds;
  }


  public void setExternalIds(ExternalIdObject externalIds) {
    
    
    
    this.externalIds = externalIds;
  }


  public AlbumObjectAllOf genres(List<String> genres) {
    
    
    
    
    this.genres = genres;
    return this;
  }

  public AlbumObjectAllOf addGenresItem(String genresItem) {
    if (this.genres == null) {
      this.genres = new ArrayList<>();
    }
    this.genres.add(genresItem);
    return this;
  }

   /**
   * A list of the genres the album is associated with. If not yet classified, the array is empty. 
   * @return genres
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"Egg punk\",\"Noise rock\"]", value = "A list of the genres the album is associated with. If not yet classified, the array is empty. ")

  public List<String> getGenres() {
    return genres;
  }


  public void setGenres(List<String> genres) {
    
    
    
    this.genres = genres;
  }


  public AlbumObjectAllOf label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * The label associated with the album. 
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The label associated with the album. ")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public AlbumObjectAllOf popularity(Integer popularity) {
    
    
    
    
    this.popularity = popularity;
    return this;
  }

   /**
   * The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. 
   * @return popularity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. ")

  public Integer getPopularity() {
    return popularity;
  }


  public void setPopularity(Integer popularity) {
    
    
    
    this.popularity = popularity;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AlbumObjectAllOf instance itself
   */
  public AlbumObjectAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlbumObjectAllOf albumObjectAllOf = (AlbumObjectAllOf) o;
    return Objects.equals(this.artists, albumObjectAllOf.artists) &&
        Objects.equals(this.tracks, albumObjectAllOf.tracks) &&
        Objects.equals(this.copyrights, albumObjectAllOf.copyrights) &&
        Objects.equals(this.externalIds, albumObjectAllOf.externalIds) &&
        Objects.equals(this.genres, albumObjectAllOf.genres) &&
        Objects.equals(this.label, albumObjectAllOf.label) &&
        Objects.equals(this.popularity, albumObjectAllOf.popularity)&&
        Objects.equals(this.additionalProperties, albumObjectAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artists, tracks, copyrights, externalIds, genres, label, popularity, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlbumObjectAllOf {\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("    copyrights: ").append(toIndentedString(copyrights)).append("\n");
    sb.append("    externalIds: ").append(toIndentedString(externalIds)).append("\n");
    sb.append("    genres: ").append(toIndentedString(genres)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    popularity: ").append(toIndentedString(popularity)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artists");
    openapiFields.add("tracks");
    openapiFields.add("copyrights");
    openapiFields.add("external_ids");
    openapiFields.add("genres");
    openapiFields.add("label");
    openapiFields.add("popularity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AlbumObjectAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AlbumObjectAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlbumObjectAllOf is not found in the empty JSON string", AlbumObjectAllOf.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("artists") != null && !jsonObj.get("artists").isJsonNull()) {
        JsonArray jsonArrayartists = jsonObj.getAsJsonArray("artists");
        if (jsonArrayartists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artists` to be an array in the JSON string but got `%s`", jsonObj.get("artists").toString()));
          }

          // validate the optional field `artists` (array)
          for (int i = 0; i < jsonArrayartists.size(); i++) {
            SimplifiedArtistObject.validateJsonObject(jsonArrayartists.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `tracks`
      if (jsonObj.get("tracks") != null && !jsonObj.get("tracks").isJsonNull()) {
        PagingSimplifiedTrackObject.validateJsonObject(jsonObj.getAsJsonObject("tracks"));
      }
      if (jsonObj.get("copyrights") != null && !jsonObj.get("copyrights").isJsonNull()) {
        JsonArray jsonArraycopyrights = jsonObj.getAsJsonArray("copyrights");
        if (jsonArraycopyrights != null) {
          // ensure the json data is an array
          if (!jsonObj.get("copyrights").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `copyrights` to be an array in the JSON string but got `%s`", jsonObj.get("copyrights").toString()));
          }

          // validate the optional field `copyrights` (array)
          for (int i = 0; i < jsonArraycopyrights.size(); i++) {
            CopyrightObject.validateJsonObject(jsonArraycopyrights.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `external_ids`
      if (jsonObj.get("external_ids") != null && !jsonObj.get("external_ids").isJsonNull()) {
        ExternalIdObject.validateJsonObject(jsonObj.getAsJsonObject("external_ids"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("genres") != null && !jsonObj.get("genres").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `genres` to be an array in the JSON string but got `%s`", jsonObj.get("genres").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlbumObjectAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlbumObjectAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlbumObjectAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlbumObjectAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<AlbumObjectAllOf>() {
           @Override
           public void write(JsonWriter out, AlbumObjectAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AlbumObjectAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AlbumObjectAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AlbumObjectAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AlbumObjectAllOf
  * @throws IOException if the JSON string is invalid with respect to AlbumObjectAllOf
  */
  public static AlbumObjectAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlbumObjectAllOf.class);
  }

 /**
  * Convert an instance of AlbumObjectAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

