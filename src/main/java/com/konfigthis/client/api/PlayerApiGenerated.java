/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CurrentlyPlayingContextObject;
import com.konfigthis.client.model.CursorPagingPlayHistoryObject;
import com.konfigthis.client.model.PlayerGetAvailableDevicesResponse;
import com.konfigthis.client.model.PlayerStartPlaybackRequest;
import com.konfigthis.client.model.PlayerTransferPlaybackToNewDeviceRequest;
import com.konfigthis.client.model.QueueObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PlayerApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlayerApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PlayerApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addItemToQueueCall(String uri, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/player/queue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uri", uri));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addItemToQueueValidateBeforeCall(String uri, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling addItemToQueue(Async)");
        }

        return addItemToQueueCall(uri, deviceId, _callback);

    }


    private ApiResponse<Void> addItemToQueueWithHttpInfo(String uri, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = addItemToQueueValidateBeforeCall(uri, deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addItemToQueueAsync(String uri, String deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addItemToQueueValidateBeforeCall(uri, deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddItemToQueueRequestBuilder {
        private final String uri;
        private String deviceId;

        private AddItemToQueueRequestBuilder(String uri) {
            this.uri = uri;
        }

        /**
         * Set deviceId
         * @param deviceId  (optional)
         * @return AddItemToQueueRequestBuilder
         */
        public AddItemToQueueRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Build call for addItemToQueue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command received </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addItemToQueueCall(uri, deviceId, _callback);
        }


        /**
         * Execute addItemToQueue request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command received </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addItemToQueueWithHttpInfo(uri, deviceId);
        }

        /**
         * Execute addItemToQueue request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command received </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addItemToQueueWithHttpInfo(uri, deviceId);
        }

        /**
         * Execute addItemToQueue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command received </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addItemToQueueAsync(uri, deviceId, _callback);
        }
    }

    /**
     * Add Item to Playback Queue 
     * Add an item to the end of the user&#39;s current playback queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @param uri  (required)
     * @return AddItemToQueueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Command received </td><td>  -  </td></tr>
     </table>
     */
    public AddItemToQueueRequestBuilder addItemToQueue(String uri) throws IllegalArgumentException {
        if (uri == null) throw new IllegalArgumentException("\"uri\" is required but got null");
            

        return new AddItemToQueueRequestBuilder(uri);
    }
    private okhttp3.Call getAvailableDevicesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/player/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableDevicesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAvailableDevicesCall(_callback);

    }


    private ApiResponse<PlayerGetAvailableDevicesResponse> getAvailableDevicesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAvailableDevicesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PlayerGetAvailableDevicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAvailableDevicesAsync(final ApiCallback<PlayerGetAvailableDevicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableDevicesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PlayerGetAvailableDevicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAvailableDevicesRequestBuilder {

        private GetAvailableDevicesRequestBuilder() {
        }

        /**
         * Build call for getAvailableDevices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of devices </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAvailableDevicesCall(_callback);
        }


        /**
         * Execute getAvailableDevices request
         * @return PlayerGetAvailableDevicesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of devices </td><td>  -  </td></tr>
         </table>
         */
        public PlayerGetAvailableDevicesResponse execute() throws ApiException {
            ApiResponse<PlayerGetAvailableDevicesResponse> localVarResp = getAvailableDevicesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAvailableDevices request with HTTP info returned
         * @return ApiResponse&lt;PlayerGetAvailableDevicesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of devices </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlayerGetAvailableDevicesResponse> executeWithHttpInfo() throws ApiException {
            return getAvailableDevicesWithHttpInfo();
        }

        /**
         * Execute getAvailableDevices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of devices </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlayerGetAvailableDevicesResponse> _callback) throws ApiException {
            return getAvailableDevicesAsync(_callback);
        }
    }

    /**
     * Get Available Devices 
     * Get information about a user’s available Spotify Connect devices. Some device models are not supported and will not be listed in the API response. 
     * @return GetAvailableDevicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of devices </td><td>  -  </td></tr>
     </table>
     */
    public GetAvailableDevicesRequestBuilder getAvailableDevices() throws IllegalArgumentException {
        return new GetAvailableDevicesRequestBuilder();
    }
    private okhttp3.Call getCurrentPlaybackStateCall(String market, String additionalTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/player";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (additionalTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("additional_types", additionalTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentPlaybackStateValidateBeforeCall(String market, String additionalTypes, final ApiCallback _callback) throws ApiException {
        return getCurrentPlaybackStateCall(market, additionalTypes, _callback);

    }


    private ApiResponse<CurrentlyPlayingContextObject> getCurrentPlaybackStateWithHttpInfo(String market, String additionalTypes) throws ApiException {
        okhttp3.Call localVarCall = getCurrentPlaybackStateValidateBeforeCall(market, additionalTypes, null);
        Type localVarReturnType = new TypeToken<CurrentlyPlayingContextObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentPlaybackStateAsync(String market, String additionalTypes, final ApiCallback<CurrentlyPlayingContextObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentPlaybackStateValidateBeforeCall(market, additionalTypes, _callback);
        Type localVarReturnType = new TypeToken<CurrentlyPlayingContextObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentPlaybackStateRequestBuilder {
        private String market;
        private String additionalTypes;

        private GetCurrentPlaybackStateRequestBuilder() {
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetCurrentPlaybackStateRequestBuilder
         */
        public GetCurrentPlaybackStateRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set additionalTypes
         * @param additionalTypes  (optional)
         * @return GetCurrentPlaybackStateRequestBuilder
         */
        public GetCurrentPlaybackStateRequestBuilder additionalTypes(String additionalTypes) {
            this.additionalTypes = additionalTypes;
            return this;
        }
        
        /**
         * Build call for getCurrentPlaybackState
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about playback </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Playback not available or active </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentPlaybackStateCall(market, additionalTypes, _callback);
        }


        /**
         * Execute getCurrentPlaybackState request
         * @return CurrentlyPlayingContextObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about playback </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Playback not available or active </td><td>  -  </td></tr>
         </table>
         */
        public CurrentlyPlayingContextObject execute() throws ApiException {
            ApiResponse<CurrentlyPlayingContextObject> localVarResp = getCurrentPlaybackStateWithHttpInfo(market, additionalTypes);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentPlaybackState request with HTTP info returned
         * @return ApiResponse&lt;CurrentlyPlayingContextObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about playback </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Playback not available or active </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CurrentlyPlayingContextObject> executeWithHttpInfo() throws ApiException {
            return getCurrentPlaybackStateWithHttpInfo(market, additionalTypes);
        }

        /**
         * Execute getCurrentPlaybackState request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about playback </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Playback not available or active </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CurrentlyPlayingContextObject> _callback) throws ApiException {
            return getCurrentPlaybackStateAsync(market, additionalTypes, _callback);
        }
    }

    /**
     * Get Playback State 
     * Get information about the user’s current playback state, including track or episode, progress, and active device. 
     * @return GetCurrentPlaybackStateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about playback </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Playback not available or active </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentPlaybackStateRequestBuilder getCurrentPlaybackState() throws IllegalArgumentException {
        return new GetCurrentPlaybackStateRequestBuilder();
    }
    private okhttp3.Call getCurrentlyPlayingTrackCall(String market, String additionalTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/player/currently-playing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (additionalTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("additional_types", additionalTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentlyPlayingTrackValidateBeforeCall(String market, String additionalTypes, final ApiCallback _callback) throws ApiException {
        return getCurrentlyPlayingTrackCall(market, additionalTypes, _callback);

    }


    private ApiResponse<CurrentlyPlayingContextObject> getCurrentlyPlayingTrackWithHttpInfo(String market, String additionalTypes) throws ApiException {
        okhttp3.Call localVarCall = getCurrentlyPlayingTrackValidateBeforeCall(market, additionalTypes, null);
        Type localVarReturnType = new TypeToken<CurrentlyPlayingContextObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentlyPlayingTrackAsync(String market, String additionalTypes, final ApiCallback<CurrentlyPlayingContextObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentlyPlayingTrackValidateBeforeCall(market, additionalTypes, _callback);
        Type localVarReturnType = new TypeToken<CurrentlyPlayingContextObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentlyPlayingTrackRequestBuilder {
        private String market;
        private String additionalTypes;

        private GetCurrentlyPlayingTrackRequestBuilder() {
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetCurrentlyPlayingTrackRequestBuilder
         */
        public GetCurrentlyPlayingTrackRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set additionalTypes
         * @param additionalTypes  (optional)
         * @return GetCurrentlyPlayingTrackRequestBuilder
         */
        public GetCurrentlyPlayingTrackRequestBuilder additionalTypes(String additionalTypes) {
            this.additionalTypes = additionalTypes;
            return this;
        }
        
        /**
         * Build call for getCurrentlyPlayingTrack
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the currently playing track </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentlyPlayingTrackCall(market, additionalTypes, _callback);
        }


        /**
         * Execute getCurrentlyPlayingTrack request
         * @return CurrentlyPlayingContextObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the currently playing track </td><td>  -  </td></tr>
         </table>
         */
        public CurrentlyPlayingContextObject execute() throws ApiException {
            ApiResponse<CurrentlyPlayingContextObject> localVarResp = getCurrentlyPlayingTrackWithHttpInfo(market, additionalTypes);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentlyPlayingTrack request with HTTP info returned
         * @return ApiResponse&lt;CurrentlyPlayingContextObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the currently playing track </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CurrentlyPlayingContextObject> executeWithHttpInfo() throws ApiException {
            return getCurrentlyPlayingTrackWithHttpInfo(market, additionalTypes);
        }

        /**
         * Execute getCurrentlyPlayingTrack request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the currently playing track </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CurrentlyPlayingContextObject> _callback) throws ApiException {
            return getCurrentlyPlayingTrackAsync(market, additionalTypes, _callback);
        }
    }

    /**
     * Get Currently Playing Track 
     * Get the object currently being played on the user&#39;s Spotify account. 
     * @return GetCurrentlyPlayingTrackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the currently playing track </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentlyPlayingTrackRequestBuilder getCurrentlyPlayingTrack() throws IllegalArgumentException {
        return new GetCurrentlyPlayingTrackRequestBuilder();
    }
    private okhttp3.Call getRecentlyPlayedTracksCall(Integer limit, Integer after, Integer before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/player/recently-played";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecentlyPlayedTracksValidateBeforeCall(Integer limit, Integer after, Integer before, final ApiCallback _callback) throws ApiException {
        return getRecentlyPlayedTracksCall(limit, after, before, _callback);

    }


    private ApiResponse<CursorPagingPlayHistoryObject> getRecentlyPlayedTracksWithHttpInfo(Integer limit, Integer after, Integer before) throws ApiException {
        okhttp3.Call localVarCall = getRecentlyPlayedTracksValidateBeforeCall(limit, after, before, null);
        Type localVarReturnType = new TypeToken<CursorPagingPlayHistoryObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecentlyPlayedTracksAsync(Integer limit, Integer after, Integer before, final ApiCallback<CursorPagingPlayHistoryObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecentlyPlayedTracksValidateBeforeCall(limit, after, before, _callback);
        Type localVarReturnType = new TypeToken<CursorPagingPlayHistoryObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecentlyPlayedTracksRequestBuilder {
        private Integer limit;
        private Integer after;
        private Integer before;

        private GetRecentlyPlayedTracksRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetRecentlyPlayedTracksRequestBuilder
         */
        public GetRecentlyPlayedTracksRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set after
         * @param after  (optional)
         * @return GetRecentlyPlayedTracksRequestBuilder
         */
        public GetRecentlyPlayedTracksRequestBuilder after(Integer after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set before
         * @param before  (optional)
         * @return GetRecentlyPlayedTracksRequestBuilder
         */
        public GetRecentlyPlayedTracksRequestBuilder before(Integer before) {
            this.before = before;
            return this;
        }
        
        /**
         * Build call for getRecentlyPlayedTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecentlyPlayedTracksCall(limit, after, before, _callback);
        }


        /**
         * Execute getRecentlyPlayedTracks request
         * @return CursorPagingPlayHistoryObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public CursorPagingPlayHistoryObject execute() throws ApiException {
            ApiResponse<CursorPagingPlayHistoryObject> localVarResp = getRecentlyPlayedTracksWithHttpInfo(limit, after, before);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecentlyPlayedTracks request with HTTP info returned
         * @return ApiResponse&lt;CursorPagingPlayHistoryObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CursorPagingPlayHistoryObject> executeWithHttpInfo() throws ApiException {
            return getRecentlyPlayedTracksWithHttpInfo(limit, after, before);
        }

        /**
         * Execute getRecentlyPlayedTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CursorPagingPlayHistoryObject> _callback) throws ApiException {
            return getRecentlyPlayedTracksAsync(limit, after, before, _callback);
        }
    }

    /**
     * Get Recently Played Tracks 
     * Get tracks from the current user&#39;s recently played tracks. _**Note**: Currently doesn&#39;t support podcast episodes._ 
     * @return GetRecentlyPlayedTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of tracks </td><td>  -  </td></tr>
     </table>
     */
    public GetRecentlyPlayedTracksRequestBuilder getRecentlyPlayedTracks() throws IllegalArgumentException {
        return new GetRecentlyPlayedTracksRequestBuilder();
    }
    private okhttp3.Call getUserQueueCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/player/queue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserQueueValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserQueueCall(_callback);

    }


    private ApiResponse<QueueObject> getUserQueueWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserQueueValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<QueueObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserQueueAsync(final ApiCallback<QueueObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserQueueValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<QueueObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserQueueRequestBuilder {

        private GetUserQueueRequestBuilder() {
        }

        /**
         * Build call for getUserQueue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the queue </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserQueueCall(_callback);
        }


        /**
         * Execute getUserQueue request
         * @return QueueObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the queue </td><td>  -  </td></tr>
         </table>
         */
        public QueueObject execute() throws ApiException {
            ApiResponse<QueueObject> localVarResp = getUserQueueWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserQueue request with HTTP info returned
         * @return ApiResponse&lt;QueueObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the queue </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QueueObject> executeWithHttpInfo() throws ApiException {
            return getUserQueueWithHttpInfo();
        }

        /**
         * Execute getUserQueue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Information about the queue </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QueueObject> _callback) throws ApiException {
            return getUserQueueAsync(_callback);
        }
    }

    /**
     * Get the User&#39;s Queue 
     * Get the list of objects that make up the user&#39;s queue. 
     * @return GetUserQueueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the queue </td><td>  -  </td></tr>
     </table>
     */
    public GetUserQueueRequestBuilder getUserQueue() throws IllegalArgumentException {
        return new GetUserQueueRequestBuilder();
    }
    private okhttp3.Call pausePlaybackCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/player/pause";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pausePlaybackValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        return pausePlaybackCall(deviceId, _callback);

    }


    private ApiResponse<Void> pausePlaybackWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = pausePlaybackValidateBeforeCall(deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call pausePlaybackAsync(String deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pausePlaybackValidateBeforeCall(deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PausePlaybackRequestBuilder {
        private String deviceId;

        private PausePlaybackRequestBuilder() {
        }

        /**
         * Set deviceId
         * @param deviceId  (optional)
         * @return PausePlaybackRequestBuilder
         */
        public PausePlaybackRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Build call for pausePlayback
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Playback paused </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pausePlaybackCall(deviceId, _callback);
        }


        /**
         * Execute pausePlayback request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Playback paused </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            pausePlaybackWithHttpInfo(deviceId);
        }

        /**
         * Execute pausePlayback request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Playback paused </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return pausePlaybackWithHttpInfo(deviceId);
        }

        /**
         * Execute pausePlayback request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Playback paused </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return pausePlaybackAsync(deviceId, _callback);
        }
    }

    /**
     * Pause Playback 
     * Pause playback on the user&#39;s account. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @return PausePlaybackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Playback paused </td><td>  -  </td></tr>
     </table>
     */
    public PausePlaybackRequestBuilder pausePlayback() throws IllegalArgumentException {
        return new PausePlaybackRequestBuilder();
    }
    private okhttp3.Call seekToPositionCall(Integer positionMs, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/player/seek";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (positionMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position_ms", positionMs));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seekToPositionValidateBeforeCall(Integer positionMs, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'positionMs' is set
        if (positionMs == null) {
            throw new ApiException("Missing the required parameter 'positionMs' when calling seekToPosition(Async)");
        }

        return seekToPositionCall(positionMs, deviceId, _callback);

    }


    private ApiResponse<Void> seekToPositionWithHttpInfo(Integer positionMs, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = seekToPositionValidateBeforeCall(positionMs, deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call seekToPositionAsync(Integer positionMs, String deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = seekToPositionValidateBeforeCall(positionMs, deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SeekToPositionRequestBuilder {
        private final Integer positionMs;
        private String deviceId;

        private SeekToPositionRequestBuilder(Integer positionMs) {
            this.positionMs = positionMs;
        }

        /**
         * Set deviceId
         * @param deviceId  (optional)
         * @return SeekToPositionRequestBuilder
         */
        public SeekToPositionRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Build call for seekToPosition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return seekToPositionCall(positionMs, deviceId, _callback);
        }


        /**
         * Execute seekToPosition request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            seekToPositionWithHttpInfo(positionMs, deviceId);
        }

        /**
         * Execute seekToPosition request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return seekToPositionWithHttpInfo(positionMs, deviceId);
        }

        /**
         * Execute seekToPosition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return seekToPositionAsync(positionMs, deviceId, _callback);
        }
    }

    /**
     * Seek To Position 
     * Seeks to the given position in the user’s currently playing track. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @param positionMs  (required)
     * @return SeekToPositionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
     </table>
     */
    public SeekToPositionRequestBuilder seekToPosition(Integer positionMs) throws IllegalArgumentException {
        if (positionMs == null) throw new IllegalArgumentException("\"positionMs\" is required but got null");
        return new SeekToPositionRequestBuilder(positionMs);
    }
    private okhttp3.Call setPlaybackVolumeCall(Integer volumePercent, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/player/volume";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (volumePercent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("volume_percent", volumePercent));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPlaybackVolumeValidateBeforeCall(Integer volumePercent, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'volumePercent' is set
        if (volumePercent == null) {
            throw new ApiException("Missing the required parameter 'volumePercent' when calling setPlaybackVolume(Async)");
        }

        return setPlaybackVolumeCall(volumePercent, deviceId, _callback);

    }


    private ApiResponse<Void> setPlaybackVolumeWithHttpInfo(Integer volumePercent, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = setPlaybackVolumeValidateBeforeCall(volumePercent, deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call setPlaybackVolumeAsync(Integer volumePercent, String deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPlaybackVolumeValidateBeforeCall(volumePercent, deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SetPlaybackVolumeRequestBuilder {
        private final Integer volumePercent;
        private String deviceId;

        private SetPlaybackVolumeRequestBuilder(Integer volumePercent) {
            this.volumePercent = volumePercent;
        }

        /**
         * Set deviceId
         * @param deviceId  (optional)
         * @return SetPlaybackVolumeRequestBuilder
         */
        public SetPlaybackVolumeRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Build call for setPlaybackVolume
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setPlaybackVolumeCall(volumePercent, deviceId, _callback);
        }


        /**
         * Execute setPlaybackVolume request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            setPlaybackVolumeWithHttpInfo(volumePercent, deviceId);
        }

        /**
         * Execute setPlaybackVolume request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return setPlaybackVolumeWithHttpInfo(volumePercent, deviceId);
        }

        /**
         * Execute setPlaybackVolume request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return setPlaybackVolumeAsync(volumePercent, deviceId, _callback);
        }
    }

    /**
     * Set Playback Volume 
     * Set the volume for the user’s current playback device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @param volumePercent  (required)
     * @return SetPlaybackVolumeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
     </table>
     */
    public SetPlaybackVolumeRequestBuilder setPlaybackVolume(Integer volumePercent) throws IllegalArgumentException {
        if (volumePercent == null) throw new IllegalArgumentException("\"volumePercent\" is required but got null");
        return new SetPlaybackVolumeRequestBuilder(volumePercent);
    }
    private okhttp3.Call setRepeatModeCall(String state, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/player/repeat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRepeatModeValidateBeforeCall(String state, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling setRepeatMode(Async)");
        }

        return setRepeatModeCall(state, deviceId, _callback);

    }


    private ApiResponse<Void> setRepeatModeWithHttpInfo(String state, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = setRepeatModeValidateBeforeCall(state, deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call setRepeatModeAsync(String state, String deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRepeatModeValidateBeforeCall(state, deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SetRepeatModeRequestBuilder {
        private final String state;
        private String deviceId;

        private SetRepeatModeRequestBuilder(String state) {
            this.state = state;
        }

        /**
         * Set deviceId
         * @param deviceId  (optional)
         * @return SetRepeatModeRequestBuilder
         */
        public SetRepeatModeRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Build call for setRepeatMode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setRepeatModeCall(state, deviceId, _callback);
        }


        /**
         * Execute setRepeatMode request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            setRepeatModeWithHttpInfo(state, deviceId);
        }

        /**
         * Execute setRepeatMode request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return setRepeatModeWithHttpInfo(state, deviceId);
        }

        /**
         * Execute setRepeatMode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return setRepeatModeAsync(state, deviceId, _callback);
        }
    }

    /**
     * Set Repeat Mode 
     * Set the repeat mode for the user&#39;s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @param state  (required)
     * @return SetRepeatModeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
     </table>
     */
    public SetRepeatModeRequestBuilder setRepeatMode(String state) throws IllegalArgumentException {
        if (state == null) throw new IllegalArgumentException("\"state\" is required but got null");
            

        return new SetRepeatModeRequestBuilder(state);
    }
    private okhttp3.Call skipToNextTrackCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/player/next";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skipToNextTrackValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        return skipToNextTrackCall(deviceId, _callback);

    }


    private ApiResponse<Void> skipToNextTrackWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = skipToNextTrackValidateBeforeCall(deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call skipToNextTrackAsync(String deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = skipToNextTrackValidateBeforeCall(deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SkipToNextTrackRequestBuilder {
        private String deviceId;

        private SkipToNextTrackRequestBuilder() {
        }

        /**
         * Set deviceId
         * @param deviceId  (optional)
         * @return SkipToNextTrackRequestBuilder
         */
        public SkipToNextTrackRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Build call for skipToNextTrack
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return skipToNextTrackCall(deviceId, _callback);
        }


        /**
         * Execute skipToNextTrack request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            skipToNextTrackWithHttpInfo(deviceId);
        }

        /**
         * Execute skipToNextTrack request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return skipToNextTrackWithHttpInfo(deviceId);
        }

        /**
         * Execute skipToNextTrack request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return skipToNextTrackAsync(deviceId, _callback);
        }
    }

    /**
     * Skip To Next 
     * Skips to next track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @return SkipToNextTrackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
     </table>
     */
    public SkipToNextTrackRequestBuilder skipToNextTrack() throws IllegalArgumentException {
        return new SkipToNextTrackRequestBuilder();
    }
    private okhttp3.Call skipToPreviousTrackCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/player/previous";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skipToPreviousTrackValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        return skipToPreviousTrackCall(deviceId, _callback);

    }


    private ApiResponse<Void> skipToPreviousTrackWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = skipToPreviousTrackValidateBeforeCall(deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call skipToPreviousTrackAsync(String deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = skipToPreviousTrackValidateBeforeCall(deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SkipToPreviousTrackRequestBuilder {
        private String deviceId;

        private SkipToPreviousTrackRequestBuilder() {
        }

        /**
         * Set deviceId
         * @param deviceId  (optional)
         * @return SkipToPreviousTrackRequestBuilder
         */
        public SkipToPreviousTrackRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Build call for skipToPreviousTrack
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return skipToPreviousTrackCall(deviceId, _callback);
        }


        /**
         * Execute skipToPreviousTrack request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            skipToPreviousTrackWithHttpInfo(deviceId);
        }

        /**
         * Execute skipToPreviousTrack request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return skipToPreviousTrackWithHttpInfo(deviceId);
        }

        /**
         * Execute skipToPreviousTrack request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return skipToPreviousTrackAsync(deviceId, _callback);
        }
    }

    /**
     * Skip To Previous 
     * Skips to previous track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @return SkipToPreviousTrackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
     </table>
     */
    public SkipToPreviousTrackRequestBuilder skipToPreviousTrack() throws IllegalArgumentException {
        return new SkipToPreviousTrackRequestBuilder();
    }
    private okhttp3.Call startPlaybackCall(String deviceId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/player/play";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startPlaybackValidateBeforeCall(String deviceId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        return startPlaybackCall(deviceId, requestBody, _callback);

    }


    private ApiResponse<Void> startPlaybackWithHttpInfo(String deviceId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = startPlaybackValidateBeforeCall(deviceId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call startPlaybackAsync(String deviceId, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = startPlaybackValidateBeforeCall(deviceId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StartPlaybackRequestBuilder {
        private Map<String, Object> contextUri;
        private List<String> uris;
        private Map<String, Object> offset;
        private Map<String, Object> positionMs;
        private String deviceId;

        private StartPlaybackRequestBuilder() {
        }

        /**
         * Set contextUri
         * @param contextUri Optional. Spotify URI of the context to play. Valid contexts are albums, artists &amp; playlists. &#x60;{context_uri:\\\&quot;spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\\&quot;}&#x60;  (optional)
         * @return StartPlaybackRequestBuilder
         */
        public StartPlaybackRequestBuilder contextUri(Map<String, Object> contextUri) {
            this.contextUri = contextUri;
            return this;
        }
        
        /**
         * Set uris
         * @param uris Optional. A JSON array of the Spotify track URIs to play. For example: &#x60;{\\\&quot;uris\\\&quot;: [\\\&quot;spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\&quot;, \\\&quot;spotify:track:1301WleyT98MSxVHPZCA6M\\\&quot;]}&#x60;  (optional)
         * @return StartPlaybackRequestBuilder
         */
        public StartPlaybackRequestBuilder uris(List<String> uris) {
            this.uris = uris;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \\\&quot;position\\\&quot; is zero based and can’t be negative. Example: &#x60;\\\&quot;offset\\\&quot;: {\\\&quot;position\\\&quot;: 5}&#x60; \\\&quot;uri\\\&quot; is a string representing the uri of the item to start at. Example: &#x60;\\\&quot;offset\\\&quot;: {\\\&quot;uri\\\&quot;: \\\&quot;spotify:track:1301WleyT98MSxVHPZCA6M\\\&quot;}&#x60;  (optional)
         * @return StartPlaybackRequestBuilder
         */
        public StartPlaybackRequestBuilder offset(Map<String, Object> offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set positionMs
         * @param positionMs integer (optional)
         * @return StartPlaybackRequestBuilder
         */
        public StartPlaybackRequestBuilder positionMs(Map<String, Object> positionMs) {
            this.positionMs = positionMs;
            return this;
        }
        
        /**
         * Set deviceId
         * @param deviceId  (optional)
         * @return StartPlaybackRequestBuilder
         */
        public StartPlaybackRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Build call for startPlayback
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Playback started </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return startPlaybackCall(deviceId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("contextUri", this.contextUri);
            requestBody.put("uris", this.uris);
            requestBody.put("offset", this.offset);
            requestBody.put("positionMs", this.positionMs);
            return requestBody;
        }

        /**
         * Execute startPlayback request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Playback started </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            startPlaybackWithHttpInfo(deviceId, requestBody);
        }

        /**
         * Execute startPlayback request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Playback started </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return startPlaybackWithHttpInfo(deviceId, requestBody);
        }

        /**
         * Execute startPlayback request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Playback started </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return startPlaybackAsync(deviceId, requestBody, _callback);
        }
    }

    /**
     * Start/Resume Playback 
     * Start a new context or resume current playback on the user&#39;s active device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @return StartPlaybackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Playback started </td><td>  -  </td></tr>
     </table>
     */
    public StartPlaybackRequestBuilder startPlayback() throws IllegalArgumentException {
        return new StartPlaybackRequestBuilder();
    }
    private okhttp3.Call togglePlaybackShuffleCall(Boolean state, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/player/shuffle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call togglePlaybackShuffleValidateBeforeCall(Boolean state, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling togglePlaybackShuffle(Async)");
        }

        return togglePlaybackShuffleCall(state, deviceId, _callback);

    }


    private ApiResponse<Void> togglePlaybackShuffleWithHttpInfo(Boolean state, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = togglePlaybackShuffleValidateBeforeCall(state, deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call togglePlaybackShuffleAsync(Boolean state, String deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = togglePlaybackShuffleValidateBeforeCall(state, deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class TogglePlaybackShuffleRequestBuilder {
        private final Boolean state;
        private String deviceId;

        private TogglePlaybackShuffleRequestBuilder(Boolean state) {
            this.state = state;
        }

        /**
         * Set deviceId
         * @param deviceId  (optional)
         * @return TogglePlaybackShuffleRequestBuilder
         */
        public TogglePlaybackShuffleRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Build call for togglePlaybackShuffle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return togglePlaybackShuffleCall(state, deviceId, _callback);
        }


        /**
         * Execute togglePlaybackShuffle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            togglePlaybackShuffleWithHttpInfo(state, deviceId);
        }

        /**
         * Execute togglePlaybackShuffle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return togglePlaybackShuffleWithHttpInfo(state, deviceId);
        }

        /**
         * Execute togglePlaybackShuffle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return togglePlaybackShuffleAsync(state, deviceId, _callback);
        }
    }

    /**
     * Toggle Playback Shuffle 
     * Toggle shuffle on or off for user’s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @param state  (required)
     * @return TogglePlaybackShuffleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Command sent </td><td>  -  </td></tr>
     </table>
     */
    public TogglePlaybackShuffleRequestBuilder togglePlaybackShuffle(Boolean state) throws IllegalArgumentException {
        if (state == null) throw new IllegalArgumentException("\"state\" is required but got null");
        return new TogglePlaybackShuffleRequestBuilder(state);
    }
    private okhttp3.Call transferPlaybackToNewDeviceCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/player";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferPlaybackToNewDeviceValidateBeforeCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        return transferPlaybackToNewDeviceCall(requestBody, _callback);

    }


    private ApiResponse<Void> transferPlaybackToNewDeviceWithHttpInfo(Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = transferPlaybackToNewDeviceValidateBeforeCall(requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call transferPlaybackToNewDeviceAsync(Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferPlaybackToNewDeviceValidateBeforeCall(requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class TransferPlaybackToNewDeviceRequestBuilder {
        private final List<String> deviceIds;
        private Map<String, Object> play;

        private TransferPlaybackToNewDeviceRequestBuilder(List<String> deviceIds) {
            this.deviceIds = deviceIds;
        }

        /**
         * Set play
         * @param play **true**: ensure playback happens on new device.&lt;br/&gt;**false** or not provided: keep the current playback state.  (optional)
         * @return TransferPlaybackToNewDeviceRequestBuilder
         */
        public TransferPlaybackToNewDeviceRequestBuilder play(Map<String, Object> play) {
            this.play = play;
            return this;
        }
        
        /**
         * Build call for transferPlaybackToNewDevice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Playback transferred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return transferPlaybackToNewDeviceCall(requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("deviceIds", this.deviceIds);
            requestBody.put("play", this.play);
            return requestBody;
        }

        /**
         * Execute transferPlaybackToNewDevice request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Playback transferred </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            transferPlaybackToNewDeviceWithHttpInfo(requestBody);
        }

        /**
         * Execute transferPlaybackToNewDevice request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Playback transferred </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return transferPlaybackToNewDeviceWithHttpInfo(requestBody);
        }

        /**
         * Execute transferPlaybackToNewDevice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Playback transferred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return transferPlaybackToNewDeviceAsync(requestBody, _callback);
        }
    }

    /**
     * Transfer Playback 
     * Transfer playback to a new device and optionally begin playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @return TransferPlaybackToNewDeviceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Playback transferred </td><td>  -  </td></tr>
     </table>
     */
    public TransferPlaybackToNewDeviceRequestBuilder transferPlaybackToNewDevice(List<String> deviceIds) throws IllegalArgumentException {
        if (deviceIds == null) throw new IllegalArgumentException("\"deviceIds\" is required but got null");
        return new TransferPlaybackToNewDeviceRequestBuilder(deviceIds);
    }
}
