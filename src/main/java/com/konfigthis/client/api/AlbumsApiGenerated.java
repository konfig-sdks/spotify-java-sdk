/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AlbumObject;
import com.konfigthis.client.model.AlbumsGetNewReleasesResponse;
import com.konfigthis.client.model.AlbumsListSeveralResponse;
import com.konfigthis.client.model.AlbumsRemoveSavedRequest;
import com.konfigthis.client.model.AlbumsSaveCurrentUserLibraryRequest;
import com.konfigthis.client.model.PagingArtistDiscographyAlbumObject;
import com.konfigthis.client.model.PagingSavedAlbumObject;
import com.konfigthis.client.model.PagingSimplifiedTrackObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AlbumsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AlbumsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AlbumsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkSavedCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkSavedValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkSaved(Async)");
        }

        return checkSavedCall(ids, _callback);

    }


    private ApiResponse<List<Boolean>> checkSavedWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = checkSavedValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkSavedAsync(String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkSavedValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckSavedRequestBuilder {
        private final String ids;

        private CheckSavedRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Build call for checkSaved
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkSavedCall(ids, _callback);
        }


        /**
         * Execute checkSaved request
         * @return List&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public List<Boolean> execute() throws ApiException {
            ApiResponse<List<Boolean>> localVarResp = checkSavedWithHttpInfo(ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkSaved request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Boolean>> executeWithHttpInfo() throws ApiException {
            return checkSavedWithHttpInfo(ids);
        }

        /**
         * Execute checkSaved request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Boolean>> _callback) throws ApiException {
            return checkSavedAsync(ids, _callback);
        }
    }

    /**
     * Check User&#39;s Saved Albums 
     * Check if one or more albums is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return CheckSavedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
     </table>
     */
    public CheckSavedRequestBuilder checkSaved(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new CheckSavedRequestBuilder(ids);
    }
    private okhttp3.Call getAlbumsByIdCall(String id, String includeGroups, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artists/{id}/albums"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_groups", includeGroups));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumsByIdValidateBeforeCall(String id, String includeGroups, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAlbumsById(Async)");
        }

        return getAlbumsByIdCall(id, includeGroups, market, limit, offset, _callback);

    }


    private ApiResponse<PagingArtistDiscographyAlbumObject> getAlbumsByIdWithHttpInfo(String id, String includeGroups, String market, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAlbumsByIdValidateBeforeCall(id, includeGroups, market, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingArtistDiscographyAlbumObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAlbumsByIdAsync(String id, String includeGroups, String market, Integer limit, Integer offset, final ApiCallback<PagingArtistDiscographyAlbumObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumsByIdValidateBeforeCall(id, includeGroups, market, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingArtistDiscographyAlbumObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAlbumsByIdRequestBuilder {
        private final String id;
        private String includeGroups;
        private String market;
        private Integer limit;
        private Integer offset;

        private GetAlbumsByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set includeGroups
         * @param includeGroups  (optional)
         * @return GetAlbumsByIdRequestBuilder
         */
        public GetAlbumsByIdRequestBuilder includeGroups(String includeGroups) {
            this.includeGroups = includeGroups;
            return this;
        }
        
        /**
         * Set market
         * @param market  (optional)
         * @return GetAlbumsByIdRequestBuilder
         */
        public GetAlbumsByIdRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetAlbumsByIdRequestBuilder
         */
        public GetAlbumsByIdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetAlbumsByIdRequestBuilder
         */
        public GetAlbumsByIdRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getAlbumsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAlbumsByIdCall(id, includeGroups, market, limit, offset, _callback);
        }


        /**
         * Execute getAlbumsById request
         * @return PagingArtistDiscographyAlbumObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public PagingArtistDiscographyAlbumObject execute() throws ApiException {
            ApiResponse<PagingArtistDiscographyAlbumObject> localVarResp = getAlbumsByIdWithHttpInfo(id, includeGroups, market, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAlbumsById request with HTTP info returned
         * @return ApiResponse&lt;PagingArtistDiscographyAlbumObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingArtistDiscographyAlbumObject> executeWithHttpInfo() throws ApiException {
            return getAlbumsByIdWithHttpInfo(id, includeGroups, market, limit, offset);
        }

        /**
         * Execute getAlbumsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingArtistDiscographyAlbumObject> _callback) throws ApiException {
            return getAlbumsByIdAsync(id, includeGroups, market, limit, offset, _callback);
        }
    }

    /**
     * Get Artist&#39;s Albums 
     * Get Spotify catalog information about an artist&#39;s albums. 
     * @param id  (required)
     * @return GetAlbumsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
     </table>
     */
    public GetAlbumsByIdRequestBuilder getAlbumsById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetAlbumsByIdRequestBuilder(id);
    }
    private okhttp3.Call getInformationCall(String id, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/albums/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInformationValidateBeforeCall(String id, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInformation(Async)");
        }

        return getInformationCall(id, market, _callback);

    }


    private ApiResponse<AlbumObject> getInformationWithHttpInfo(String id, String market) throws ApiException {
        okhttp3.Call localVarCall = getInformationValidateBeforeCall(id, market, null);
        Type localVarReturnType = new TypeToken<AlbumObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInformationAsync(String id, String market, final ApiCallback<AlbumObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInformationValidateBeforeCall(id, market, _callback);
        Type localVarReturnType = new TypeToken<AlbumObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInformationRequestBuilder {
        private final String id;
        private String market;

        private GetInformationRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetInformationRequestBuilder
         */
        public GetInformationRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Build call for getInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An album </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInformationCall(id, market, _callback);
        }


        /**
         * Execute getInformation request
         * @return AlbumObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An album </td><td>  -  </td></tr>
         </table>
         */
        public AlbumObject execute() throws ApiException {
            ApiResponse<AlbumObject> localVarResp = getInformationWithHttpInfo(id, market);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInformation request with HTTP info returned
         * @return ApiResponse&lt;AlbumObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An album </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AlbumObject> executeWithHttpInfo() throws ApiException {
            return getInformationWithHttpInfo(id, market);
        }

        /**
         * Execute getInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An album </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AlbumObject> _callback) throws ApiException {
            return getInformationAsync(id, market, _callback);
        }
    }

    /**
     * Get Album 
     * Get Spotify catalog information for a single album. 
     * @param id  (required)
     * @return GetInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An album </td><td>  -  </td></tr>
     </table>
     */
    public GetInformationRequestBuilder getInformation(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetInformationRequestBuilder(id);
    }
    private okhttp3.Call getNewReleasesCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browse/new-releases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNewReleasesValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getNewReleasesCall(limit, offset, _callback);

    }


    private ApiResponse<AlbumsGetNewReleasesResponse> getNewReleasesWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getNewReleasesValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<AlbumsGetNewReleasesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNewReleasesAsync(Integer limit, Integer offset, final ApiCallback<AlbumsGetNewReleasesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNewReleasesValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AlbumsGetNewReleasesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNewReleasesRequestBuilder {
        private Integer limit;
        private Integer offset;

        private GetNewReleasesRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetNewReleasesRequestBuilder
         */
        public GetNewReleasesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetNewReleasesRequestBuilder
         */
        public GetNewReleasesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getNewReleases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of albums </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNewReleasesCall(limit, offset, _callback);
        }


        /**
         * Execute getNewReleases request
         * @return AlbumsGetNewReleasesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of albums </td><td>  -  </td></tr>
         </table>
         */
        public AlbumsGetNewReleasesResponse execute() throws ApiException {
            ApiResponse<AlbumsGetNewReleasesResponse> localVarResp = getNewReleasesWithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNewReleases request with HTTP info returned
         * @return ApiResponse&lt;AlbumsGetNewReleasesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of albums </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AlbumsGetNewReleasesResponse> executeWithHttpInfo() throws ApiException {
            return getNewReleasesWithHttpInfo(limit, offset);
        }

        /**
         * Execute getNewReleases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of albums </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AlbumsGetNewReleasesResponse> _callback) throws ApiException {
            return getNewReleasesAsync(limit, offset, _callback);
        }
    }

    /**
     * Get New Releases 
     * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab). 
     * @return GetNewReleasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of albums </td><td>  -  </td></tr>
     </table>
     */
    public GetNewReleasesRequestBuilder getNewReleases() throws IllegalArgumentException {
        return new GetNewReleasesRequestBuilder();
    }
    private okhttp3.Call getSavedCall(Integer limit, Integer offset, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSavedValidateBeforeCall(Integer limit, Integer offset, String market, final ApiCallback _callback) throws ApiException {
        return getSavedCall(limit, offset, market, _callback);

    }


    private ApiResponse<PagingSavedAlbumObject> getSavedWithHttpInfo(Integer limit, Integer offset, String market) throws ApiException {
        okhttp3.Call localVarCall = getSavedValidateBeforeCall(limit, offset, market, null);
        Type localVarReturnType = new TypeToken<PagingSavedAlbumObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSavedAsync(Integer limit, Integer offset, String market, final ApiCallback<PagingSavedAlbumObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSavedValidateBeforeCall(limit, offset, market, _callback);
        Type localVarReturnType = new TypeToken<PagingSavedAlbumObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSavedRequestBuilder {
        private Integer limit;
        private Integer offset;
        private String market;

        private GetSavedRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetSavedRequestBuilder
         */
        public GetSavedRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetSavedRequestBuilder
         */
        public GetSavedRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set market
         * @param market  (optional)
         * @return GetSavedRequestBuilder
         */
        public GetSavedRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Build call for getSaved
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSavedCall(limit, offset, market, _callback);
        }


        /**
         * Execute getSaved request
         * @return PagingSavedAlbumObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public PagingSavedAlbumObject execute() throws ApiException {
            ApiResponse<PagingSavedAlbumObject> localVarResp = getSavedWithHttpInfo(limit, offset, market);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSaved request with HTTP info returned
         * @return ApiResponse&lt;PagingSavedAlbumObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingSavedAlbumObject> executeWithHttpInfo() throws ApiException {
            return getSavedWithHttpInfo(limit, offset, market);
        }

        /**
         * Execute getSaved request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingSavedAlbumObject> _callback) throws ApiException {
            return getSavedAsync(limit, offset, market, _callback);
        }
    }

    /**
     * Get User&#39;s Saved Albums 
     * Get a list of the albums saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @return GetSavedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
     </table>
     */
    public GetSavedRequestBuilder getSaved() throws IllegalArgumentException {
        return new GetSavedRequestBuilder();
    }
    private okhttp3.Call getTracksByIdCall(String id, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/albums/{id}/tracks"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTracksByIdValidateBeforeCall(String id, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTracksById(Async)");
        }

        return getTracksByIdCall(id, market, limit, offset, _callback);

    }


    private ApiResponse<PagingSimplifiedTrackObject> getTracksByIdWithHttpInfo(String id, String market, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getTracksByIdValidateBeforeCall(id, market, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSimplifiedTrackObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTracksByIdAsync(String id, String market, Integer limit, Integer offset, final ApiCallback<PagingSimplifiedTrackObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTracksByIdValidateBeforeCall(id, market, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSimplifiedTrackObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTracksByIdRequestBuilder {
        private final String id;
        private String market;
        private Integer limit;
        private Integer offset;

        private GetTracksByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetTracksByIdRequestBuilder
         */
        public GetTracksByIdRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetTracksByIdRequestBuilder
         */
        public GetTracksByIdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetTracksByIdRequestBuilder
         */
        public GetTracksByIdRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getTracksById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTracksByIdCall(id, market, limit, offset, _callback);
        }


        /**
         * Execute getTracksById request
         * @return PagingSimplifiedTrackObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public PagingSimplifiedTrackObject execute() throws ApiException {
            ApiResponse<PagingSimplifiedTrackObject> localVarResp = getTracksByIdWithHttpInfo(id, market, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTracksById request with HTTP info returned
         * @return ApiResponse&lt;PagingSimplifiedTrackObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingSimplifiedTrackObject> executeWithHttpInfo() throws ApiException {
            return getTracksByIdWithHttpInfo(id, market, limit, offset);
        }

        /**
         * Execute getTracksById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingSimplifiedTrackObject> _callback) throws ApiException {
            return getTracksByIdAsync(id, market, limit, offset, _callback);
        }
    }

    /**
     * Get Album Tracks 
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @param id  (required)
     * @return GetTracksByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
     </table>
     */
    public GetTracksByIdRequestBuilder getTracksById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetTracksByIdRequestBuilder(id);
    }
    private okhttp3.Call listSeveralCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSeveralValidateBeforeCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling listSeveral(Async)");
        }

        return listSeveralCall(ids, market, _callback);

    }


    private ApiResponse<AlbumsListSeveralResponse> listSeveralWithHttpInfo(String ids, String market) throws ApiException {
        okhttp3.Call localVarCall = listSeveralValidateBeforeCall(ids, market, null);
        Type localVarReturnType = new TypeToken<AlbumsListSeveralResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSeveralAsync(String ids, String market, final ApiCallback<AlbumsListSeveralResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSeveralValidateBeforeCall(ids, market, _callback);
        Type localVarReturnType = new TypeToken<AlbumsListSeveralResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSeveralRequestBuilder {
        private final String ids;
        private String market;

        private ListSeveralRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return ListSeveralRequestBuilder
         */
        public ListSeveralRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Build call for listSeveral
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of albums </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSeveralCall(ids, market, _callback);
        }


        /**
         * Execute listSeveral request
         * @return AlbumsListSeveralResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of albums </td><td>  -  </td></tr>
         </table>
         */
        public AlbumsListSeveralResponse execute() throws ApiException {
            ApiResponse<AlbumsListSeveralResponse> localVarResp = listSeveralWithHttpInfo(ids, market);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSeveral request with HTTP info returned
         * @return ApiResponse&lt;AlbumsListSeveralResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of albums </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AlbumsListSeveralResponse> executeWithHttpInfo() throws ApiException {
            return listSeveralWithHttpInfo(ids, market);
        }

        /**
         * Execute listSeveral request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of albums </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AlbumsListSeveralResponse> _callback) throws ApiException {
            return listSeveralAsync(ids, market, _callback);
        }
    }

    /**
     * Get Several Albums 
     * Get Spotify catalog information for multiple albums identified by their Spotify IDs. 
     * @param ids  (required)
     * @return ListSeveralRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of albums </td><td>  -  </td></tr>
     </table>
     */
    public ListSeveralRequestBuilder listSeveral(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new ListSeveralRequestBuilder(ids);
    }
    private okhttp3.Call removeSavedCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSavedValidateBeforeCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling removeSaved(Async)");
        }

        return removeSavedCall(ids, requestBody, _callback);

    }


    private ApiResponse<Void> removeSavedWithHttpInfo(String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = removeSavedValidateBeforeCall(ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeSavedAsync(String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSavedValidateBeforeCall(ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveSavedRequestBuilder {
        private final String ids;
        private List<String> ids;

        private RemoveSavedRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set ids
         * @param ids A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: &#x60;[\\\&quot;4iV5W9uYEdYUVa79Axb7Rh\\\&quot;, \\\&quot;1301WleyT98MSxVHPZCA6M\\\&quot;]&#x60;&lt;br/&gt;A maximum of 50 items can be specified in one request. _**Note**: if the &#x60;ids&#x60; parameter is present in the query string, any IDs listed here in the body will be ignored._  (optional)
         * @return RemoveSavedRequestBuilder
         */
        public RemoveSavedRequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for removeSaved
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Album(s) have been removed from the library </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeSavedCall(ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute removeSaved request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Album(s) have been removed from the library </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            removeSavedWithHttpInfo(ids, requestBody);
        }

        /**
         * Execute removeSaved request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Album(s) have been removed from the library </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeSavedWithHttpInfo(ids, requestBody);
        }

        /**
         * Execute removeSaved request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Album(s) have been removed from the library </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeSavedAsync(ids, requestBody, _callback);
        }
    }

    /**
     * Remove Users&#39; Saved Albums 
     * Remove one or more albums from the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return RemoveSavedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Album(s) have been removed from the library </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSavedRequestBuilder removeSaved(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new RemoveSavedRequestBuilder(ids);
    }
    private okhttp3.Call saveCurrentUserLibraryCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCurrentUserLibraryValidateBeforeCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling saveCurrentUserLibrary(Async)");
        }

        return saveCurrentUserLibraryCall(ids, requestBody, _callback);

    }


    private ApiResponse<Void> saveCurrentUserLibraryWithHttpInfo(String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = saveCurrentUserLibraryValidateBeforeCall(ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call saveCurrentUserLibraryAsync(String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCurrentUserLibraryValidateBeforeCall(ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SaveCurrentUserLibraryRequestBuilder {
        private final String ids;
        private List<String> ids;

        private SaveCurrentUserLibraryRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set ids
         * @param ids A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: &#x60;[\\\&quot;4iV5W9uYEdYUVa79Axb7Rh\\\&quot;, \\\&quot;1301WleyT98MSxVHPZCA6M\\\&quot;]&#x60;&lt;br/&gt;A maximum of 50 items can be specified in one request. _**Note**: if the &#x60;ids&#x60; parameter is present in the query string, any IDs listed here in the body will be ignored._  (optional)
         * @return SaveCurrentUserLibraryRequestBuilder
         */
        public SaveCurrentUserLibraryRequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for saveCurrentUserLibrary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The album is saved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveCurrentUserLibraryCall(ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute saveCurrentUserLibrary request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The album is saved </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            saveCurrentUserLibraryWithHttpInfo(ids, requestBody);
        }

        /**
         * Execute saveCurrentUserLibrary request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The album is saved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveCurrentUserLibraryWithHttpInfo(ids, requestBody);
        }

        /**
         * Execute saveCurrentUserLibrary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The album is saved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveCurrentUserLibraryAsync(ids, requestBody, _callback);
        }
    }

    /**
     * Save Albums for Current User 
     * Save one or more albums to the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return SaveCurrentUserLibraryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album is saved </td><td>  -  </td></tr>
     </table>
     */
    public SaveCurrentUserLibraryRequestBuilder saveCurrentUserLibrary(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new SaveCurrentUserLibraryRequestBuilder(ids);
    }
}
