/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ArtistsGetTopTracksResponse;
import com.konfigthis.client.model.AudioAnalysisObject;
import com.konfigthis.client.model.AudioFeaturesObject;
import com.konfigthis.client.model.PagingPlaylistTrackObject;
import com.konfigthis.client.model.PagingSavedTrackObject;
import com.konfigthis.client.model.PagingSimplifiedTrackObject;
import com.konfigthis.client.model.PlaylistsAddItemsRequest;
import com.konfigthis.client.model.PlaylistsRemoveItemsRequest;
import com.konfigthis.client.model.PlaylistsRemoveItemsRequestTracksInner;
import com.konfigthis.client.model.PlaylistsRemoveItemsResponse;
import com.konfigthis.client.model.PlaylistsUpdatePlaylistItemsRequest;
import com.konfigthis.client.model.RecommendationsObject;
import com.konfigthis.client.model.TrackObject;
import com.konfigthis.client.model.TracksGetMultipleAudioFeaturesResponse;
import com.konfigthis.client.model.TracksRemoveFromLibraryRequest;
import com.konfigthis.client.model.TracksSaveForCurrentUserRequest;
import com.konfigthis.client.model.UsersGetTopItemsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TracksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TracksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TracksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addItemsCall(String playlistId, Integer position, String uris, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addItemsValidateBeforeCall(String playlistId, Integer position, String uris, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling addItems(Async)");
        }

        return addItemsCall(playlistId, position, uris, requestBody, _callback);

    }


    private ApiResponse<PlaylistsRemoveItemsResponse> addItemsWithHttpInfo(String playlistId, Integer position, String uris, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = addItemsValidateBeforeCall(playlistId, position, uris, requestBody, null);
        Type localVarReturnType = new TypeToken<PlaylistsRemoveItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addItemsAsync(String playlistId, Integer position, String uris, Map<String, Object> requestBody, final ApiCallback<PlaylistsRemoveItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addItemsValidateBeforeCall(playlistId, position, uris, requestBody, _callback);
        Type localVarReturnType = new TypeToken<PlaylistsRemoveItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddItemsRequestBuilder {
        private final String playlistId;
        private List<String> uris;
        private Integer position;
        private Integer position;
        private String uris;

        private AddItemsRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set uris
         * @param uris A JSON array of the [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to add. For example: &#x60;{\\\&quot;uris\\\&quot;: [\\\&quot;spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\&quot;,\\\&quot;spotify:track:1301WleyT98MSxVHPZCA6M\\\&quot;, \\\&quot;spotify:episode:512ojhOuo1ktJprKbVcKyQ\\\&quot;]}&#x60;&lt;br/&gt;A maximum of 100 items can be added in one request. _**Note**: if the &#x60;uris&#x60; parameter is present in the query string, any URIs listed here in the body will be ignored._  (optional)
         * @return AddItemsRequestBuilder
         */
        public AddItemsRequestBuilder uris(List<String> uris) {
            this.uris = uris;
            return this;
        }
        
        /**
         * Set position
         * @param position The position to insert the items, a zero-based index. For example, to insert the items in the first position: &#x60;position&#x3D;0&#x60; ; to insert the items in the third position: &#x60;position&#x3D;2&#x60;. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: &#x60;{\\\&quot;uris\\\&quot;: [\\\&quot;spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\&quot;,\\\&quot;spotify:track:1301WleyT98MSxVHPZCA6M\\\&quot;], \\\&quot;position\\\&quot;: 3}&#x60;  (optional)
         * @return AddItemsRequestBuilder
         */
        public AddItemsRequestBuilder position(Integer position) {
            this.position = position;
            return this;
        }
        
        /**
         * Set position
         * @param position  (optional)
         * @return AddItemsRequestBuilder
         */
        public AddItemsRequestBuilder position(Integer position) {
            this.position = position;
            return this;
        }
        
        /**
         * Set uris
         * @param uris  (optional)
         * @return AddItemsRequestBuilder
         */
        public AddItemsRequestBuilder uris(String uris) {
            this.uris = uris;
            return this;
        }
        
        /**
         * Build call for addItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addItemsCall(playlistId, position, uris, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("uris", this.uris);
            requestBody.put("position", this.position);
            return requestBody;
        }

        /**
         * Execute addItems request
         * @return PlaylistsRemoveItemsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public PlaylistsRemoveItemsResponse execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<PlaylistsRemoveItemsResponse> localVarResp = addItemsWithHttpInfo(playlistId, position, uris, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addItems request with HTTP info returned
         * @return ApiResponse&lt;PlaylistsRemoveItemsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlaylistsRemoveItemsResponse> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addItemsWithHttpInfo(playlistId, position, uris, requestBody);
        }

        /**
         * Execute addItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlaylistsRemoveItemsResponse> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addItemsAsync(playlistId, position, uris, requestBody, _callback);
        }
    }

    /**
     * Add Items to Playlist 
     * Add one or more items to a user&#39;s playlist. 
     * @param playlistId  (required)
     * @return AddItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
     </table>
     */
    public AddItemsRequestBuilder addItems(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new AddItemsRequestBuilder(playlistId);
    }
    private okhttp3.Call checkSavedCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/tracks/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkSavedValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkSaved(Async)");
        }

        return checkSavedCall(ids, _callback);

    }


    private ApiResponse<List<Boolean>> checkSavedWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = checkSavedValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkSavedAsync(String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkSavedValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckSavedRequestBuilder {
        private final String ids;

        private CheckSavedRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Build call for checkSaved
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkSavedCall(ids, _callback);
        }


        /**
         * Execute checkSaved request
         * @return List&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public List<Boolean> execute() throws ApiException {
            ApiResponse<List<Boolean>> localVarResp = checkSavedWithHttpInfo(ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkSaved request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Boolean>> executeWithHttpInfo() throws ApiException {
            return checkSavedWithHttpInfo(ids);
        }

        /**
         * Execute checkSaved request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Boolean>> _callback) throws ApiException {
            return checkSavedAsync(ids, _callback);
        }
    }

    /**
     * Check User&#39;s Saved Tracks 
     * Check if one or more tracks is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return CheckSavedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
     </table>
     */
    public CheckSavedRequestBuilder checkSaved(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new CheckSavedRequestBuilder(ids);
    }
    private okhttp3.Call getAudioAnalysisCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audio-analysis/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudioAnalysisValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAudioAnalysis(Async)");
        }

        return getAudioAnalysisCall(id, _callback);

    }


    private ApiResponse<AudioAnalysisObject> getAudioAnalysisWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getAudioAnalysisValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AudioAnalysisObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAudioAnalysisAsync(String id, final ApiCallback<AudioAnalysisObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAudioAnalysisValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AudioAnalysisObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAudioAnalysisRequestBuilder {
        private final String id;

        private GetAudioAnalysisRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getAudioAnalysis
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audio analysis for one track </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAudioAnalysisCall(id, _callback);
        }


        /**
         * Execute getAudioAnalysis request
         * @return AudioAnalysisObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audio analysis for one track </td><td>  -  </td></tr>
         </table>
         */
        public AudioAnalysisObject execute() throws ApiException {
            ApiResponse<AudioAnalysisObject> localVarResp = getAudioAnalysisWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAudioAnalysis request with HTTP info returned
         * @return ApiResponse&lt;AudioAnalysisObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audio analysis for one track </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AudioAnalysisObject> executeWithHttpInfo() throws ApiException {
            return getAudioAnalysisWithHttpInfo(id);
        }

        /**
         * Execute getAudioAnalysis request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audio analysis for one track </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AudioAnalysisObject> _callback) throws ApiException {
            return getAudioAnalysisAsync(id, _callback);
        }
    }

    /**
     * Get Track&#39;s Audio Analysis 
     * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
     * @param id  (required)
     * @return GetAudioAnalysisRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audio analysis for one track </td><td>  -  </td></tr>
     </table>
     */
    public GetAudioAnalysisRequestBuilder getAudioAnalysis(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetAudioAnalysisRequestBuilder(id);
    }
    private okhttp3.Call getAudioFeaturesByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audio-features/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudioFeaturesByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAudioFeaturesById(Async)");
        }

        return getAudioFeaturesByIdCall(id, _callback);

    }


    private ApiResponse<AudioFeaturesObject> getAudioFeaturesByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getAudioFeaturesByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AudioFeaturesObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAudioFeaturesByIdAsync(String id, final ApiCallback<AudioFeaturesObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAudioFeaturesByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AudioFeaturesObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAudioFeaturesByIdRequestBuilder {
        private final String id;

        private GetAudioFeaturesByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getAudioFeaturesById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audio features for one track </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAudioFeaturesByIdCall(id, _callback);
        }


        /**
         * Execute getAudioFeaturesById request
         * @return AudioFeaturesObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audio features for one track </td><td>  -  </td></tr>
         </table>
         */
        public AudioFeaturesObject execute() throws ApiException {
            ApiResponse<AudioFeaturesObject> localVarResp = getAudioFeaturesByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAudioFeaturesById request with HTTP info returned
         * @return ApiResponse&lt;AudioFeaturesObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audio features for one track </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AudioFeaturesObject> executeWithHttpInfo() throws ApiException {
            return getAudioFeaturesByIdWithHttpInfo(id);
        }

        /**
         * Execute getAudioFeaturesById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audio features for one track </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AudioFeaturesObject> _callback) throws ApiException {
            return getAudioFeaturesByIdAsync(id, _callback);
        }
    }

    /**
     * Get Track&#39;s Audio Features 
     * Get audio feature information for a single track identified by its unique Spotify ID. 
     * @param id  (required)
     * @return GetAudioFeaturesByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audio features for one track </td><td>  -  </td></tr>
     </table>
     */
    public GetAudioFeaturesByIdRequestBuilder getAudioFeaturesById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetAudioFeaturesByIdRequestBuilder(id);
    }
    private okhttp3.Call getBySpotifyIdCall(String id, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tracks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBySpotifyIdValidateBeforeCall(String id, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBySpotifyId(Async)");
        }

        return getBySpotifyIdCall(id, market, _callback);

    }


    private ApiResponse<TrackObject> getBySpotifyIdWithHttpInfo(String id, String market) throws ApiException {
        okhttp3.Call localVarCall = getBySpotifyIdValidateBeforeCall(id, market, null);
        Type localVarReturnType = new TypeToken<TrackObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBySpotifyIdAsync(String id, String market, final ApiCallback<TrackObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBySpotifyIdValidateBeforeCall(id, market, _callback);
        Type localVarReturnType = new TypeToken<TrackObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBySpotifyIdRequestBuilder {
        private final String id;
        private String market;

        private GetBySpotifyIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetBySpotifyIdRequestBuilder
         */
        public GetBySpotifyIdRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Build call for getBySpotifyId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A track </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBySpotifyIdCall(id, market, _callback);
        }


        /**
         * Execute getBySpotifyId request
         * @return TrackObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A track </td><td>  -  </td></tr>
         </table>
         */
        public TrackObject execute() throws ApiException {
            ApiResponse<TrackObject> localVarResp = getBySpotifyIdWithHttpInfo(id, market);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBySpotifyId request with HTTP info returned
         * @return ApiResponse&lt;TrackObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A track </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrackObject> executeWithHttpInfo() throws ApiException {
            return getBySpotifyIdWithHttpInfo(id, market);
        }

        /**
         * Execute getBySpotifyId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A track </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrackObject> _callback) throws ApiException {
            return getBySpotifyIdAsync(id, market, _callback);
        }
    }

    /**
     * Get Track 
     * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
     * @param id  (required)
     * @return GetBySpotifyIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A track </td><td>  -  </td></tr>
     </table>
     */
    public GetBySpotifyIdRequestBuilder getBySpotifyId(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetBySpotifyIdRequestBuilder(id);
    }
    private okhttp3.Call getMultipleAudioFeaturesCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audio-features";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultipleAudioFeaturesValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getMultipleAudioFeatures(Async)");
        }

        return getMultipleAudioFeaturesCall(ids, _callback);

    }


    private ApiResponse<TracksGetMultipleAudioFeaturesResponse> getMultipleAudioFeaturesWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = getMultipleAudioFeaturesValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<TracksGetMultipleAudioFeaturesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMultipleAudioFeaturesAsync(String ids, final ApiCallback<TracksGetMultipleAudioFeaturesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultipleAudioFeaturesValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<TracksGetMultipleAudioFeaturesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMultipleAudioFeaturesRequestBuilder {
        private final String ids;

        private GetMultipleAudioFeaturesRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Build call for getMultipleAudioFeatures
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of audio features </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMultipleAudioFeaturesCall(ids, _callback);
        }


        /**
         * Execute getMultipleAudioFeatures request
         * @return TracksGetMultipleAudioFeaturesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of audio features </td><td>  -  </td></tr>
         </table>
         */
        public TracksGetMultipleAudioFeaturesResponse execute() throws ApiException {
            ApiResponse<TracksGetMultipleAudioFeaturesResponse> localVarResp = getMultipleAudioFeaturesWithHttpInfo(ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMultipleAudioFeatures request with HTTP info returned
         * @return ApiResponse&lt;TracksGetMultipleAudioFeaturesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of audio features </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TracksGetMultipleAudioFeaturesResponse> executeWithHttpInfo() throws ApiException {
            return getMultipleAudioFeaturesWithHttpInfo(ids);
        }

        /**
         * Execute getMultipleAudioFeatures request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of audio features </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TracksGetMultipleAudioFeaturesResponse> _callback) throws ApiException {
            return getMultipleAudioFeaturesAsync(ids, _callback);
        }
    }

    /**
     * Get Several Tracks&#39; Audio Features 
     * Get audio features for multiple tracks based on their Spotify IDs. 
     * @param ids  (required)
     * @return GetMultipleAudioFeaturesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of audio features </td><td>  -  </td></tr>
     </table>
     */
    public GetMultipleAudioFeaturesRequestBuilder getMultipleAudioFeatures(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new GetMultipleAudioFeaturesRequestBuilder(ids);
    }
    private okhttp3.Call getMultipleByIdsCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultipleByIdsValidateBeforeCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getMultipleByIds(Async)");
        }

        return getMultipleByIdsCall(ids, market, _callback);

    }


    private ApiResponse<ArtistsGetTopTracksResponse> getMultipleByIdsWithHttpInfo(String ids, String market) throws ApiException {
        okhttp3.Call localVarCall = getMultipleByIdsValidateBeforeCall(ids, market, null);
        Type localVarReturnType = new TypeToken<ArtistsGetTopTracksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMultipleByIdsAsync(String ids, String market, final ApiCallback<ArtistsGetTopTracksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultipleByIdsValidateBeforeCall(ids, market, _callback);
        Type localVarReturnType = new TypeToken<ArtistsGetTopTracksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMultipleByIdsRequestBuilder {
        private final String ids;
        private String market;

        private GetMultipleByIdsRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetMultipleByIdsRequestBuilder
         */
        public GetMultipleByIdsRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Build call for getMultipleByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMultipleByIdsCall(ids, market, _callback);
        }


        /**
         * Execute getMultipleByIds request
         * @return ArtistsGetTopTracksResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public ArtistsGetTopTracksResponse execute() throws ApiException {
            ApiResponse<ArtistsGetTopTracksResponse> localVarResp = getMultipleByIdsWithHttpInfo(ids, market);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMultipleByIds request with HTTP info returned
         * @return ApiResponse&lt;ArtistsGetTopTracksResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ArtistsGetTopTracksResponse> executeWithHttpInfo() throws ApiException {
            return getMultipleByIdsWithHttpInfo(ids, market);
        }

        /**
         * Execute getMultipleByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ArtistsGetTopTracksResponse> _callback) throws ApiException {
            return getMultipleByIdsAsync(ids, market, _callback);
        }
    }

    /**
     * Get Several Tracks 
     * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
     * @param ids  (required)
     * @return GetMultipleByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
     </table>
     */
    public GetMultipleByIdsRequestBuilder getMultipleByIds(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new GetMultipleByIdsRequestBuilder(ids);
    }
    private okhttp3.Call getPlaylistItemsCall(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (additionalTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("additional_types", additionalTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaylistItemsValidateBeforeCall(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getPlaylistItems(Async)");
        }

        return getPlaylistItemsCall(playlistId, market, fields, limit, offset, additionalTypes, _callback);

    }


    private ApiResponse<PagingPlaylistTrackObject> getPlaylistItemsWithHttpInfo(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes) throws ApiException {
        okhttp3.Call localVarCall = getPlaylistItemsValidateBeforeCall(playlistId, market, fields, limit, offset, additionalTypes, null);
        Type localVarReturnType = new TypeToken<PagingPlaylistTrackObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPlaylistItemsAsync(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ApiCallback<PagingPlaylistTrackObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaylistItemsValidateBeforeCall(playlistId, market, fields, limit, offset, additionalTypes, _callback);
        Type localVarReturnType = new TypeToken<PagingPlaylistTrackObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPlaylistItemsRequestBuilder {
        private final String playlistId;
        private String market;
        private String fields;
        private Integer limit;
        private Integer offset;
        private String additionalTypes;

        private GetPlaylistItemsRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetPlaylistItemsRequestBuilder
         */
        public GetPlaylistItemsRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set fields
         * @param fields  (optional)
         * @return GetPlaylistItemsRequestBuilder
         */
        public GetPlaylistItemsRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetPlaylistItemsRequestBuilder
         */
        public GetPlaylistItemsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetPlaylistItemsRequestBuilder
         */
        public GetPlaylistItemsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set additionalTypes
         * @param additionalTypes  (optional)
         * @return GetPlaylistItemsRequestBuilder
         */
        public GetPlaylistItemsRequestBuilder additionalTypes(String additionalTypes) {
            this.additionalTypes = additionalTypes;
            return this;
        }
        
        /**
         * Build call for getPlaylistItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPlaylistItemsCall(playlistId, market, fields, limit, offset, additionalTypes, _callback);
        }


        /**
         * Execute getPlaylistItems request
         * @return PagingPlaylistTrackObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public PagingPlaylistTrackObject execute() throws ApiException {
            ApiResponse<PagingPlaylistTrackObject> localVarResp = getPlaylistItemsWithHttpInfo(playlistId, market, fields, limit, offset, additionalTypes);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPlaylistItems request with HTTP info returned
         * @return ApiResponse&lt;PagingPlaylistTrackObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingPlaylistTrackObject> executeWithHttpInfo() throws ApiException {
            return getPlaylistItemsWithHttpInfo(playlistId, market, fields, limit, offset, additionalTypes);
        }

        /**
         * Execute getPlaylistItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingPlaylistTrackObject> _callback) throws ApiException {
            return getPlaylistItemsAsync(playlistId, market, fields, limit, offset, additionalTypes, _callback);
        }
    }

    /**
     * Get Playlist Items 
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @return GetPlaylistItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
     </table>
     */
    public GetPlaylistItemsRequestBuilder getPlaylistItems(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new GetPlaylistItemsRequestBuilder(playlistId);
    }
    private okhttp3.Call getRecommendationsCall(String seedArtists, String seedGenres, String seedTracks, Integer limit, String market, Double minAcousticness, Double maxAcousticness, Double targetAcousticness, Double minDanceability, Double maxDanceability, Double targetDanceability, Integer minDurationMs, Integer maxDurationMs, Integer targetDurationMs, Double minEnergy, Double maxEnergy, Double targetEnergy, Double minInstrumentalness, Double maxInstrumentalness, Double targetInstrumentalness, Integer minKey, Integer maxKey, Integer targetKey, Double minLiveness, Double maxLiveness, Double targetLiveness, Double minLoudness, Double maxLoudness, Double targetLoudness, Integer minMode, Integer maxMode, Integer targetMode, Integer minPopularity, Integer maxPopularity, Integer targetPopularity, Double minSpeechiness, Double maxSpeechiness, Double targetSpeechiness, Double minTempo, Double maxTempo, Double targetTempo, Integer minTimeSignature, Integer maxTimeSignature, Integer targetTimeSignature, Double minValence, Double maxValence, Double targetValence, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recommendations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (seedArtists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seed_artists", seedArtists));
        }

        if (seedGenres != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seed_genres", seedGenres));
        }

        if (seedTracks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seed_tracks", seedTracks));
        }

        if (minAcousticness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_acousticness", minAcousticness));
        }

        if (maxAcousticness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_acousticness", maxAcousticness));
        }

        if (targetAcousticness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_acousticness", targetAcousticness));
        }

        if (minDanceability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_danceability", minDanceability));
        }

        if (maxDanceability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_danceability", maxDanceability));
        }

        if (targetDanceability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_danceability", targetDanceability));
        }

        if (minDurationMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_duration_ms", minDurationMs));
        }

        if (maxDurationMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_duration_ms", maxDurationMs));
        }

        if (targetDurationMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_duration_ms", targetDurationMs));
        }

        if (minEnergy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_energy", minEnergy));
        }

        if (maxEnergy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_energy", maxEnergy));
        }

        if (targetEnergy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_energy", targetEnergy));
        }

        if (minInstrumentalness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_instrumentalness", minInstrumentalness));
        }

        if (maxInstrumentalness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_instrumentalness", maxInstrumentalness));
        }

        if (targetInstrumentalness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_instrumentalness", targetInstrumentalness));
        }

        if (minKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_key", minKey));
        }

        if (maxKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_key", maxKey));
        }

        if (targetKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_key", targetKey));
        }

        if (minLiveness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_liveness", minLiveness));
        }

        if (maxLiveness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_liveness", maxLiveness));
        }

        if (targetLiveness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_liveness", targetLiveness));
        }

        if (minLoudness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_loudness", minLoudness));
        }

        if (maxLoudness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_loudness", maxLoudness));
        }

        if (targetLoudness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_loudness", targetLoudness));
        }

        if (minMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_mode", minMode));
        }

        if (maxMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_mode", maxMode));
        }

        if (targetMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_mode", targetMode));
        }

        if (minPopularity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_popularity", minPopularity));
        }

        if (maxPopularity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_popularity", maxPopularity));
        }

        if (targetPopularity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_popularity", targetPopularity));
        }

        if (minSpeechiness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_speechiness", minSpeechiness));
        }

        if (maxSpeechiness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_speechiness", maxSpeechiness));
        }

        if (targetSpeechiness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_speechiness", targetSpeechiness));
        }

        if (minTempo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_tempo", minTempo));
        }

        if (maxTempo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_tempo", maxTempo));
        }

        if (targetTempo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_tempo", targetTempo));
        }

        if (minTimeSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_time_signature", minTimeSignature));
        }

        if (maxTimeSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_time_signature", maxTimeSignature));
        }

        if (targetTimeSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_time_signature", targetTimeSignature));
        }

        if (minValence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_valence", minValence));
        }

        if (maxValence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_valence", maxValence));
        }

        if (targetValence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_valence", targetValence));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecommendationsValidateBeforeCall(String seedArtists, String seedGenres, String seedTracks, Integer limit, String market, Double minAcousticness, Double maxAcousticness, Double targetAcousticness, Double minDanceability, Double maxDanceability, Double targetDanceability, Integer minDurationMs, Integer maxDurationMs, Integer targetDurationMs, Double minEnergy, Double maxEnergy, Double targetEnergy, Double minInstrumentalness, Double maxInstrumentalness, Double targetInstrumentalness, Integer minKey, Integer maxKey, Integer targetKey, Double minLiveness, Double maxLiveness, Double targetLiveness, Double minLoudness, Double maxLoudness, Double targetLoudness, Integer minMode, Integer maxMode, Integer targetMode, Integer minPopularity, Integer maxPopularity, Integer targetPopularity, Double minSpeechiness, Double maxSpeechiness, Double targetSpeechiness, Double minTempo, Double maxTempo, Double targetTempo, Integer minTimeSignature, Integer maxTimeSignature, Integer targetTimeSignature, Double minValence, Double maxValence, Double targetValence, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seedArtists' is set
        if (seedArtists == null) {
            throw new ApiException("Missing the required parameter 'seedArtists' when calling getRecommendations(Async)");
        }

        // verify the required parameter 'seedGenres' is set
        if (seedGenres == null) {
            throw new ApiException("Missing the required parameter 'seedGenres' when calling getRecommendations(Async)");
        }

        // verify the required parameter 'seedTracks' is set
        if (seedTracks == null) {
            throw new ApiException("Missing the required parameter 'seedTracks' when calling getRecommendations(Async)");
        }

        return getRecommendationsCall(seedArtists, seedGenres, seedTracks, limit, market, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, _callback);

    }


    private ApiResponse<RecommendationsObject> getRecommendationsWithHttpInfo(String seedArtists, String seedGenres, String seedTracks, Integer limit, String market, Double minAcousticness, Double maxAcousticness, Double targetAcousticness, Double minDanceability, Double maxDanceability, Double targetDanceability, Integer minDurationMs, Integer maxDurationMs, Integer targetDurationMs, Double minEnergy, Double maxEnergy, Double targetEnergy, Double minInstrumentalness, Double maxInstrumentalness, Double targetInstrumentalness, Integer minKey, Integer maxKey, Integer targetKey, Double minLiveness, Double maxLiveness, Double targetLiveness, Double minLoudness, Double maxLoudness, Double targetLoudness, Integer minMode, Integer maxMode, Integer targetMode, Integer minPopularity, Integer maxPopularity, Integer targetPopularity, Double minSpeechiness, Double maxSpeechiness, Double targetSpeechiness, Double minTempo, Double maxTempo, Double targetTempo, Integer minTimeSignature, Integer maxTimeSignature, Integer targetTimeSignature, Double minValence, Double maxValence, Double targetValence) throws ApiException {
        okhttp3.Call localVarCall = getRecommendationsValidateBeforeCall(seedArtists, seedGenres, seedTracks, limit, market, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, null);
        Type localVarReturnType = new TypeToken<RecommendationsObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecommendationsAsync(String seedArtists, String seedGenres, String seedTracks, Integer limit, String market, Double minAcousticness, Double maxAcousticness, Double targetAcousticness, Double minDanceability, Double maxDanceability, Double targetDanceability, Integer minDurationMs, Integer maxDurationMs, Integer targetDurationMs, Double minEnergy, Double maxEnergy, Double targetEnergy, Double minInstrumentalness, Double maxInstrumentalness, Double targetInstrumentalness, Integer minKey, Integer maxKey, Integer targetKey, Double minLiveness, Double maxLiveness, Double targetLiveness, Double minLoudness, Double maxLoudness, Double targetLoudness, Integer minMode, Integer maxMode, Integer targetMode, Integer minPopularity, Integer maxPopularity, Integer targetPopularity, Double minSpeechiness, Double maxSpeechiness, Double targetSpeechiness, Double minTempo, Double maxTempo, Double targetTempo, Integer minTimeSignature, Integer maxTimeSignature, Integer targetTimeSignature, Double minValence, Double maxValence, Double targetValence, final ApiCallback<RecommendationsObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecommendationsValidateBeforeCall(seedArtists, seedGenres, seedTracks, limit, market, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, _callback);
        Type localVarReturnType = new TypeToken<RecommendationsObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecommendationsRequestBuilder {
        private final String seedArtists;
        private final String seedGenres;
        private final String seedTracks;
        private Integer limit;
        private String market;
        private Double minAcousticness;
        private Double maxAcousticness;
        private Double targetAcousticness;
        private Double minDanceability;
        private Double maxDanceability;
        private Double targetDanceability;
        private Integer minDurationMs;
        private Integer maxDurationMs;
        private Integer targetDurationMs;
        private Double minEnergy;
        private Double maxEnergy;
        private Double targetEnergy;
        private Double minInstrumentalness;
        private Double maxInstrumentalness;
        private Double targetInstrumentalness;
        private Integer minKey;
        private Integer maxKey;
        private Integer targetKey;
        private Double minLiveness;
        private Double maxLiveness;
        private Double targetLiveness;
        private Double minLoudness;
        private Double maxLoudness;
        private Double targetLoudness;
        private Integer minMode;
        private Integer maxMode;
        private Integer targetMode;
        private Integer minPopularity;
        private Integer maxPopularity;
        private Integer targetPopularity;
        private Double minSpeechiness;
        private Double maxSpeechiness;
        private Double targetSpeechiness;
        private Double minTempo;
        private Double maxTempo;
        private Double targetTempo;
        private Integer minTimeSignature;
        private Integer maxTimeSignature;
        private Integer targetTimeSignature;
        private Double minValence;
        private Double maxValence;
        private Double targetValence;

        private GetRecommendationsRequestBuilder(String seedArtists, String seedGenres, String seedTracks) {
            this.seedArtists = seedArtists;
            this.seedGenres = seedGenres;
            this.seedTracks = seedTracks;
        }

        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set market
         * @param market  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set minAcousticness
         * @param minAcousticness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder minAcousticness(Double minAcousticness) {
            this.minAcousticness = minAcousticness;
            return this;
        }
        
        /**
         * Set maxAcousticness
         * @param maxAcousticness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder maxAcousticness(Double maxAcousticness) {
            this.maxAcousticness = maxAcousticness;
            return this;
        }
        
        /**
         * Set targetAcousticness
         * @param targetAcousticness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder targetAcousticness(Double targetAcousticness) {
            this.targetAcousticness = targetAcousticness;
            return this;
        }
        
        /**
         * Set minDanceability
         * @param minDanceability  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder minDanceability(Double minDanceability) {
            this.minDanceability = minDanceability;
            return this;
        }
        
        /**
         * Set maxDanceability
         * @param maxDanceability  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder maxDanceability(Double maxDanceability) {
            this.maxDanceability = maxDanceability;
            return this;
        }
        
        /**
         * Set targetDanceability
         * @param targetDanceability  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder targetDanceability(Double targetDanceability) {
            this.targetDanceability = targetDanceability;
            return this;
        }
        
        /**
         * Set minDurationMs
         * @param minDurationMs  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder minDurationMs(Integer minDurationMs) {
            this.minDurationMs = minDurationMs;
            return this;
        }
        
        /**
         * Set maxDurationMs
         * @param maxDurationMs  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder maxDurationMs(Integer maxDurationMs) {
            this.maxDurationMs = maxDurationMs;
            return this;
        }
        
        /**
         * Set targetDurationMs
         * @param targetDurationMs  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder targetDurationMs(Integer targetDurationMs) {
            this.targetDurationMs = targetDurationMs;
            return this;
        }
        
        /**
         * Set minEnergy
         * @param minEnergy  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder minEnergy(Double minEnergy) {
            this.minEnergy = minEnergy;
            return this;
        }
        
        /**
         * Set maxEnergy
         * @param maxEnergy  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder maxEnergy(Double maxEnergy) {
            this.maxEnergy = maxEnergy;
            return this;
        }
        
        /**
         * Set targetEnergy
         * @param targetEnergy  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder targetEnergy(Double targetEnergy) {
            this.targetEnergy = targetEnergy;
            return this;
        }
        
        /**
         * Set minInstrumentalness
         * @param minInstrumentalness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder minInstrumentalness(Double minInstrumentalness) {
            this.minInstrumentalness = minInstrumentalness;
            return this;
        }
        
        /**
         * Set maxInstrumentalness
         * @param maxInstrumentalness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder maxInstrumentalness(Double maxInstrumentalness) {
            this.maxInstrumentalness = maxInstrumentalness;
            return this;
        }
        
        /**
         * Set targetInstrumentalness
         * @param targetInstrumentalness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder targetInstrumentalness(Double targetInstrumentalness) {
            this.targetInstrumentalness = targetInstrumentalness;
            return this;
        }
        
        /**
         * Set minKey
         * @param minKey  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder minKey(Integer minKey) {
            this.minKey = minKey;
            return this;
        }
        
        /**
         * Set maxKey
         * @param maxKey  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder maxKey(Integer maxKey) {
            this.maxKey = maxKey;
            return this;
        }
        
        /**
         * Set targetKey
         * @param targetKey  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder targetKey(Integer targetKey) {
            this.targetKey = targetKey;
            return this;
        }
        
        /**
         * Set minLiveness
         * @param minLiveness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder minLiveness(Double minLiveness) {
            this.minLiveness = minLiveness;
            return this;
        }
        
        /**
         * Set maxLiveness
         * @param maxLiveness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder maxLiveness(Double maxLiveness) {
            this.maxLiveness = maxLiveness;
            return this;
        }
        
        /**
         * Set targetLiveness
         * @param targetLiveness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder targetLiveness(Double targetLiveness) {
            this.targetLiveness = targetLiveness;
            return this;
        }
        
        /**
         * Set minLoudness
         * @param minLoudness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder minLoudness(Double minLoudness) {
            this.minLoudness = minLoudness;
            return this;
        }
        
        /**
         * Set maxLoudness
         * @param maxLoudness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder maxLoudness(Double maxLoudness) {
            this.maxLoudness = maxLoudness;
            return this;
        }
        
        /**
         * Set targetLoudness
         * @param targetLoudness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder targetLoudness(Double targetLoudness) {
            this.targetLoudness = targetLoudness;
            return this;
        }
        
        /**
         * Set minMode
         * @param minMode  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder minMode(Integer minMode) {
            this.minMode = minMode;
            return this;
        }
        
        /**
         * Set maxMode
         * @param maxMode  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder maxMode(Integer maxMode) {
            this.maxMode = maxMode;
            return this;
        }
        
        /**
         * Set targetMode
         * @param targetMode  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder targetMode(Integer targetMode) {
            this.targetMode = targetMode;
            return this;
        }
        
        /**
         * Set minPopularity
         * @param minPopularity  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder minPopularity(Integer minPopularity) {
            this.minPopularity = minPopularity;
            return this;
        }
        
        /**
         * Set maxPopularity
         * @param maxPopularity  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder maxPopularity(Integer maxPopularity) {
            this.maxPopularity = maxPopularity;
            return this;
        }
        
        /**
         * Set targetPopularity
         * @param targetPopularity  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder targetPopularity(Integer targetPopularity) {
            this.targetPopularity = targetPopularity;
            return this;
        }
        
        /**
         * Set minSpeechiness
         * @param minSpeechiness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder minSpeechiness(Double minSpeechiness) {
            this.minSpeechiness = minSpeechiness;
            return this;
        }
        
        /**
         * Set maxSpeechiness
         * @param maxSpeechiness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder maxSpeechiness(Double maxSpeechiness) {
            this.maxSpeechiness = maxSpeechiness;
            return this;
        }
        
        /**
         * Set targetSpeechiness
         * @param targetSpeechiness  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder targetSpeechiness(Double targetSpeechiness) {
            this.targetSpeechiness = targetSpeechiness;
            return this;
        }
        
        /**
         * Set minTempo
         * @param minTempo  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder minTempo(Double minTempo) {
            this.minTempo = minTempo;
            return this;
        }
        
        /**
         * Set maxTempo
         * @param maxTempo  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder maxTempo(Double maxTempo) {
            this.maxTempo = maxTempo;
            return this;
        }
        
        /**
         * Set targetTempo
         * @param targetTempo  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder targetTempo(Double targetTempo) {
            this.targetTempo = targetTempo;
            return this;
        }
        
        /**
         * Set minTimeSignature
         * @param minTimeSignature  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder minTimeSignature(Integer minTimeSignature) {
            this.minTimeSignature = minTimeSignature;
            return this;
        }
        
        /**
         * Set maxTimeSignature
         * @param maxTimeSignature  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder maxTimeSignature(Integer maxTimeSignature) {
            this.maxTimeSignature = maxTimeSignature;
            return this;
        }
        
        /**
         * Set targetTimeSignature
         * @param targetTimeSignature  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder targetTimeSignature(Integer targetTimeSignature) {
            this.targetTimeSignature = targetTimeSignature;
            return this;
        }
        
        /**
         * Set minValence
         * @param minValence  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder minValence(Double minValence) {
            this.minValence = minValence;
            return this;
        }
        
        /**
         * Set maxValence
         * @param maxValence  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder maxValence(Double maxValence) {
            this.maxValence = maxValence;
            return this;
        }
        
        /**
         * Set targetValence
         * @param targetValence  (optional)
         * @return GetRecommendationsRequestBuilder
         */
        public GetRecommendationsRequestBuilder targetValence(Double targetValence) {
            this.targetValence = targetValence;
            return this;
        }
        
        /**
         * Build call for getRecommendations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of recommendations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecommendationsCall(seedArtists, seedGenres, seedTracks, limit, market, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, _callback);
        }


        /**
         * Execute getRecommendations request
         * @return RecommendationsObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of recommendations </td><td>  -  </td></tr>
         </table>
         */
        public RecommendationsObject execute() throws ApiException {
            ApiResponse<RecommendationsObject> localVarResp = getRecommendationsWithHttpInfo(seedArtists, seedGenres, seedTracks, limit, market, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecommendations request with HTTP info returned
         * @return ApiResponse&lt;RecommendationsObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of recommendations </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecommendationsObject> executeWithHttpInfo() throws ApiException {
            return getRecommendationsWithHttpInfo(seedArtists, seedGenres, seedTracks, limit, market, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence);
        }

        /**
         * Execute getRecommendations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of recommendations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecommendationsObject> _callback) throws ApiException {
            return getRecommendationsAsync(seedArtists, seedGenres, seedTracks, limit, market, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, _callback);
        }
    }

    /**
     * Get Recommendations 
     * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
     * @param seedArtists  (required)
     * @param seedGenres  (required)
     * @param seedTracks  (required)
     * @return GetRecommendationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of recommendations </td><td>  -  </td></tr>
     </table>
     */
    public GetRecommendationsRequestBuilder getRecommendations(String seedArtists, String seedGenres, String seedTracks) throws IllegalArgumentException {
        if (seedArtists == null) throw new IllegalArgumentException("\"seedArtists\" is required but got null");
            

        if (seedGenres == null) throw new IllegalArgumentException("\"seedGenres\" is required but got null");
            

        if (seedTracks == null) throw new IllegalArgumentException("\"seedTracks\" is required but got null");
            

        return new GetRecommendationsRequestBuilder(seedArtists, seedGenres, seedTracks);
    }
    private okhttp3.Call getTopItemsCall(String type, String timeRange, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/top/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_range", timeRange));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopItemsValidateBeforeCall(String type, String timeRange, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getTopItems(Async)");
        }

        return getTopItemsCall(type, timeRange, limit, offset, _callback);

    }


    private ApiResponse<UsersGetTopItemsResponse> getTopItemsWithHttpInfo(String type, String timeRange, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getTopItemsValidateBeforeCall(type, timeRange, limit, offset, null);
        Type localVarReturnType = new TypeToken<UsersGetTopItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTopItemsAsync(String type, String timeRange, Integer limit, Integer offset, final ApiCallback<UsersGetTopItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopItemsValidateBeforeCall(type, timeRange, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<UsersGetTopItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTopItemsRequestBuilder {
        private final String type;
        private String timeRange;
        private Integer limit;
        private Integer offset;

        private GetTopItemsRequestBuilder(String type) {
            this.type = type;
        }

        /**
         * Set timeRange
         * @param timeRange  (optional, default to medium_term)
         * @return GetTopItemsRequestBuilder
         */
        public GetTopItemsRequestBuilder timeRange(String timeRange) {
            this.timeRange = timeRange;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetTopItemsRequestBuilder
         */
        public GetTopItemsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetTopItemsRequestBuilder
         */
        public GetTopItemsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getTopItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTopItemsCall(type, timeRange, limit, offset, _callback);
        }


        /**
         * Execute getTopItems request
         * @return UsersGetTopItemsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetTopItemsResponse execute() throws ApiException {
            ApiResponse<UsersGetTopItemsResponse> localVarResp = getTopItemsWithHttpInfo(type, timeRange, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTopItems request with HTTP info returned
         * @return ApiResponse&lt;UsersGetTopItemsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetTopItemsResponse> executeWithHttpInfo() throws ApiException {
            return getTopItemsWithHttpInfo(type, timeRange, limit, offset);
        }

        /**
         * Execute getTopItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetTopItemsResponse> _callback) throws ApiException {
            return getTopItemsAsync(type, timeRange, limit, offset, _callback);
        }
    }

    /**
     * Get User&#39;s Top Items 
     * Get the current user&#39;s top artists or tracks based on calculated affinity. 
     * @param type  (required)
     * @return GetTopItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
     </table>
     */
    public GetTopItemsRequestBuilder getTopItems(String type) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new GetTopItemsRequestBuilder(type);
    }
    private okhttp3.Call getTopTracksCall(String id, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artists/{id}/top-tracks"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopTracksValidateBeforeCall(String id, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTopTracks(Async)");
        }

        return getTopTracksCall(id, market, _callback);

    }


    private ApiResponse<ArtistsGetTopTracksResponse> getTopTracksWithHttpInfo(String id, String market) throws ApiException {
        okhttp3.Call localVarCall = getTopTracksValidateBeforeCall(id, market, null);
        Type localVarReturnType = new TypeToken<ArtistsGetTopTracksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTopTracksAsync(String id, String market, final ApiCallback<ArtistsGetTopTracksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopTracksValidateBeforeCall(id, market, _callback);
        Type localVarReturnType = new TypeToken<ArtistsGetTopTracksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTopTracksRequestBuilder {
        private final String id;
        private String market;

        private GetTopTracksRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetTopTracksRequestBuilder
         */
        public GetTopTracksRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Build call for getTopTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTopTracksCall(id, market, _callback);
        }


        /**
         * Execute getTopTracks request
         * @return ArtistsGetTopTracksResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public ArtistsGetTopTracksResponse execute() throws ApiException {
            ApiResponse<ArtistsGetTopTracksResponse> localVarResp = getTopTracksWithHttpInfo(id, market);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTopTracks request with HTTP info returned
         * @return ApiResponse&lt;ArtistsGetTopTracksResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ArtistsGetTopTracksResponse> executeWithHttpInfo() throws ApiException {
            return getTopTracksWithHttpInfo(id, market);
        }

        /**
         * Execute getTopTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ArtistsGetTopTracksResponse> _callback) throws ApiException {
            return getTopTracksAsync(id, market, _callback);
        }
    }

    /**
     * Get Artist&#39;s Top Tracks 
     * Get Spotify catalog information about an artist&#39;s top tracks by country. 
     * @param id  (required)
     * @return GetTopTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
     </table>
     */
    public GetTopTracksRequestBuilder getTopTracks(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetTopTracksRequestBuilder(id);
    }
    private okhttp3.Call getTracksByIdCall(String id, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/albums/{id}/tracks"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTracksByIdValidateBeforeCall(String id, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTracksById(Async)");
        }

        return getTracksByIdCall(id, market, limit, offset, _callback);

    }


    private ApiResponse<PagingSimplifiedTrackObject> getTracksByIdWithHttpInfo(String id, String market, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getTracksByIdValidateBeforeCall(id, market, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSimplifiedTrackObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTracksByIdAsync(String id, String market, Integer limit, Integer offset, final ApiCallback<PagingSimplifiedTrackObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTracksByIdValidateBeforeCall(id, market, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSimplifiedTrackObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTracksByIdRequestBuilder {
        private final String id;
        private String market;
        private Integer limit;
        private Integer offset;

        private GetTracksByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetTracksByIdRequestBuilder
         */
        public GetTracksByIdRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetTracksByIdRequestBuilder
         */
        public GetTracksByIdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetTracksByIdRequestBuilder
         */
        public GetTracksByIdRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getTracksById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTracksByIdCall(id, market, limit, offset, _callback);
        }


        /**
         * Execute getTracksById request
         * @return PagingSimplifiedTrackObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public PagingSimplifiedTrackObject execute() throws ApiException {
            ApiResponse<PagingSimplifiedTrackObject> localVarResp = getTracksByIdWithHttpInfo(id, market, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTracksById request with HTTP info returned
         * @return ApiResponse&lt;PagingSimplifiedTrackObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingSimplifiedTrackObject> executeWithHttpInfo() throws ApiException {
            return getTracksByIdWithHttpInfo(id, market, limit, offset);
        }

        /**
         * Execute getTracksById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingSimplifiedTrackObject> _callback) throws ApiException {
            return getTracksByIdAsync(id, market, limit, offset, _callback);
        }
    }

    /**
     * Get Album Tracks 
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @param id  (required)
     * @return GetTracksByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
     </table>
     */
    public GetTracksByIdRequestBuilder getTracksById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetTracksByIdRequestBuilder(id);
    }
    private okhttp3.Call getUserSavedCall(String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserSavedValidateBeforeCall(String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getUserSavedCall(market, limit, offset, _callback);

    }


    private ApiResponse<PagingSavedTrackObject> getUserSavedWithHttpInfo(String market, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getUserSavedValidateBeforeCall(market, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSavedTrackObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserSavedAsync(String market, Integer limit, Integer offset, final ApiCallback<PagingSavedTrackObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserSavedValidateBeforeCall(market, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSavedTrackObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserSavedRequestBuilder {
        private String market;
        private Integer limit;
        private Integer offset;

        private GetUserSavedRequestBuilder() {
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetUserSavedRequestBuilder
         */
        public GetUserSavedRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetUserSavedRequestBuilder
         */
        public GetUserSavedRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetUserSavedRequestBuilder
         */
        public GetUserSavedRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getUserSaved
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserSavedCall(market, limit, offset, _callback);
        }


        /**
         * Execute getUserSaved request
         * @return PagingSavedTrackObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public PagingSavedTrackObject execute() throws ApiException {
            ApiResponse<PagingSavedTrackObject> localVarResp = getUserSavedWithHttpInfo(market, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserSaved request with HTTP info returned
         * @return ApiResponse&lt;PagingSavedTrackObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingSavedTrackObject> executeWithHttpInfo() throws ApiException {
            return getUserSavedWithHttpInfo(market, limit, offset);
        }

        /**
         * Execute getUserSaved request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingSavedTrackObject> _callback) throws ApiException {
            return getUserSavedAsync(market, limit, offset, _callback);
        }
    }

    /**
     * Get User&#39;s Saved Tracks 
     * Get a list of the songs saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @return GetUserSavedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
     </table>
     */
    public GetUserSavedRequestBuilder getUserSaved() throws IllegalArgumentException {
        return new GetUserSavedRequestBuilder();
    }
    private okhttp3.Call removeFromLibraryCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromLibraryValidateBeforeCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling removeFromLibrary(Async)");
        }

        return removeFromLibraryCall(ids, requestBody, _callback);

    }


    private ApiResponse<Void> removeFromLibraryWithHttpInfo(String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = removeFromLibraryValidateBeforeCall(ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromLibraryAsync(String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromLibraryValidateBeforeCall(ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromLibraryRequestBuilder {
        private final String ids;
        private List<String> ids;

        private RemoveFromLibraryRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set ids
         * @param ids A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: &#x60;[\\\&quot;4iV5W9uYEdYUVa79Axb7Rh\\\&quot;, \\\&quot;1301WleyT98MSxVHPZCA6M\\\&quot;]&#x60;&lt;br/&gt;A maximum of 50 items can be specified in one request. _**Note**: if the &#x60;ids&#x60; parameter is present in the query string, any IDs listed here in the body will be ignored._  (optional)
         * @return RemoveFromLibraryRequestBuilder
         */
        public RemoveFromLibraryRequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for removeFromLibrary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track removed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeFromLibraryCall(ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute removeFromLibrary request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track removed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            removeFromLibraryWithHttpInfo(ids, requestBody);
        }

        /**
         * Execute removeFromLibrary request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track removed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeFromLibraryWithHttpInfo(ids, requestBody);
        }

        /**
         * Execute removeFromLibrary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track removed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeFromLibraryAsync(ids, requestBody, _callback);
        }
    }

    /**
     * Remove User&#39;s Saved Tracks 
     * Remove one or more tracks from the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return RemoveFromLibraryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track removed </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromLibraryRequestBuilder removeFromLibrary(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new RemoveFromLibraryRequestBuilder(ids);
    }
    private okhttp3.Call removeItemsCall(String playlistId, PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = playlistsRemoveItemsRequest;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeItemsValidateBeforeCall(String playlistId, PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling removeItems(Async)");
        }

        return removeItemsCall(playlistId, playlistsRemoveItemsRequest, _callback);

    }


    private ApiResponse<PlaylistsRemoveItemsResponse> removeItemsWithHttpInfo(String playlistId, PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest) throws ApiException {
        okhttp3.Call localVarCall = removeItemsValidateBeforeCall(playlistId, playlistsRemoveItemsRequest, null);
        Type localVarReturnType = new TypeToken<PlaylistsRemoveItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeItemsAsync(String playlistId, PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest, final ApiCallback<PlaylistsRemoveItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeItemsValidateBeforeCall(playlistId, playlistsRemoveItemsRequest, _callback);
        Type localVarReturnType = new TypeToken<PlaylistsRemoveItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveItemsRequestBuilder {
        private final List<PlaylistsRemoveItemsRequestTracksInner> tracks;
        private final String playlistId;
        private String snapshotId;

        private RemoveItemsRequestBuilder(List<PlaylistsRemoveItemsRequestTracksInner> tracks, String playlistId) {
            this.tracks = tracks;
            this.playlistId = playlistId;
        }

        /**
         * Set snapshotId
         * @param snapshotId The playlist&#39;s snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.  (optional)
         * @return RemoveItemsRequestBuilder
         */
        public RemoveItemsRequestBuilder snapshotId(String snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }
        
        /**
         * Build call for removeItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest = buildBodyParams();
            return removeItemsCall(playlistId, playlistsRemoveItemsRequest, _callback);
        }

        private PlaylistsRemoveItemsRequest buildBodyParams() {
            PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest = new PlaylistsRemoveItemsRequest();
            playlistsRemoveItemsRequest.tracks(this.tracks);
            playlistsRemoveItemsRequest.snapshotId(this.snapshotId);
            return playlistsRemoveItemsRequest;
        }

        /**
         * Execute removeItems request
         * @return PlaylistsRemoveItemsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public PlaylistsRemoveItemsResponse execute() throws ApiException {
            PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest = buildBodyParams();
            ApiResponse<PlaylistsRemoveItemsResponse> localVarResp = removeItemsWithHttpInfo(playlistId, playlistsRemoveItemsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeItems request with HTTP info returned
         * @return ApiResponse&lt;PlaylistsRemoveItemsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlaylistsRemoveItemsResponse> executeWithHttpInfo() throws ApiException {
            PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest = buildBodyParams();
            return removeItemsWithHttpInfo(playlistId, playlistsRemoveItemsRequest);
        }

        /**
         * Execute removeItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlaylistsRemoveItemsResponse> _callback) throws ApiException {
            PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest = buildBodyParams();
            return removeItemsAsync(playlistId, playlistsRemoveItemsRequest, _callback);
        }
    }

    /**
     * Remove Playlist Items 
     * Remove one or more items from a user&#39;s playlist. 
     * @param playlistId  (required)
     * @return RemoveItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
     </table>
     */
    public RemoveItemsRequestBuilder removeItems(List<PlaylistsRemoveItemsRequestTracksInner> tracks, String playlistId) throws IllegalArgumentException {
        if (tracks == null) throw new IllegalArgumentException("\"tracks\" is required but got null");
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new RemoveItemsRequestBuilder(tracks, playlistId);
    }
    private okhttp3.Call saveForCurrentUserCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveForCurrentUserValidateBeforeCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling saveForCurrentUser(Async)");
        }

        return saveForCurrentUserCall(ids, requestBody, _callback);

    }


    private ApiResponse<Void> saveForCurrentUserWithHttpInfo(String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = saveForCurrentUserValidateBeforeCall(ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call saveForCurrentUserAsync(String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveForCurrentUserValidateBeforeCall(ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SaveForCurrentUserRequestBuilder {
        private final String ids;
        private List<String> ids;

        private SaveForCurrentUserRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set ids
         * @param ids A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: &#x60;[\\\&quot;4iV5W9uYEdYUVa79Axb7Rh\\\&quot;, \\\&quot;1301WleyT98MSxVHPZCA6M\\\&quot;]&#x60;&lt;br/&gt;A maximum of 50 items can be specified in one request. _**Note**: if the &#x60;ids&#x60; parameter is present in the query string, any IDs listed here in the body will be ignored._  (optional)
         * @return SaveForCurrentUserRequestBuilder
         */
        public SaveForCurrentUserRequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for saveForCurrentUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track saved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveForCurrentUserCall(ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute saveForCurrentUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track saved </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            saveForCurrentUserWithHttpInfo(ids, requestBody);
        }

        /**
         * Execute saveForCurrentUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track saved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveForCurrentUserWithHttpInfo(ids, requestBody);
        }

        /**
         * Execute saveForCurrentUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track saved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveForCurrentUserAsync(ids, requestBody, _callback);
        }
    }

    /**
     * Save Tracks for Current User 
     * Save one or more tracks to the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return SaveForCurrentUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track saved </td><td>  -  </td></tr>
     </table>
     */
    public SaveForCurrentUserRequestBuilder saveForCurrentUser(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new SaveForCurrentUserRequestBuilder(ids);
    }
    private okhttp3.Call updatePlaylistItemsCall(String playlistId, String uris, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlaylistItemsValidateBeforeCall(String playlistId, String uris, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling updatePlaylistItems(Async)");
        }

        return updatePlaylistItemsCall(playlistId, uris, requestBody, _callback);

    }


    private ApiResponse<PlaylistsRemoveItemsResponse> updatePlaylistItemsWithHttpInfo(String playlistId, String uris, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updatePlaylistItemsValidateBeforeCall(playlistId, uris, requestBody, null);
        Type localVarReturnType = new TypeToken<PlaylistsRemoveItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePlaylistItemsAsync(String playlistId, String uris, Map<String, Object> requestBody, final ApiCallback<PlaylistsRemoveItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlaylistItemsValidateBeforeCall(playlistId, uris, requestBody, _callback);
        Type localVarReturnType = new TypeToken<PlaylistsRemoveItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePlaylistItemsRequestBuilder {
        private final String playlistId;
        private List<String> uris;
        private Integer rangeStart;
        private Integer insertBefore;
        private Integer rangeLength;
        private String snapshotId;
        private String uris;

        private UpdatePlaylistItemsRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set uris
         * @param uris  (optional)
         * @return UpdatePlaylistItemsRequestBuilder
         */
        public UpdatePlaylistItemsRequestBuilder uris(List<String> uris) {
            this.uris = uris;
            return this;
        }
        
        /**
         * Set rangeStart
         * @param rangeStart The position of the first item to be reordered.  (optional)
         * @return UpdatePlaylistItemsRequestBuilder
         */
        public UpdatePlaylistItemsRequestBuilder rangeStart(Integer rangeStart) {
            this.rangeStart = rangeStart;
            return this;
        }
        
        /**
         * Set insertBefore
         * @param insertBefore The position where the items should be inserted.&lt;br/&gt;To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.&lt;br/&gt;Examples:&lt;br/&gt;To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.&lt;br/&gt;To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0.  (optional)
         * @return UpdatePlaylistItemsRequestBuilder
         */
        public UpdatePlaylistItemsRequestBuilder insertBefore(Integer insertBefore) {
            this.insertBefore = insertBefore;
            return this;
        }
        
        /**
         * Set rangeLength
         * @param rangeLength The amount of items to be reordered. Defaults to 1 if not set.&lt;br/&gt;The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.&lt;br/&gt;Example:&lt;br/&gt;To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2.  (optional)
         * @return UpdatePlaylistItemsRequestBuilder
         */
        public UpdatePlaylistItemsRequestBuilder rangeLength(Integer rangeLength) {
            this.rangeLength = rangeLength;
            return this;
        }
        
        /**
         * Set snapshotId
         * @param snapshotId The playlist&#39;s snapshot ID against which you want to make the changes.  (optional)
         * @return UpdatePlaylistItemsRequestBuilder
         */
        public UpdatePlaylistItemsRequestBuilder snapshotId(String snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }
        
        /**
         * Set uris
         * @param uris  (optional)
         * @return UpdatePlaylistItemsRequestBuilder
         */
        public UpdatePlaylistItemsRequestBuilder uris(String uris) {
            this.uris = uris;
            return this;
        }
        
        /**
         * Build call for updatePlaylistItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updatePlaylistItemsCall(playlistId, uris, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("uris", this.uris);
            requestBody.put("rangeStart", this.rangeStart);
            requestBody.put("insertBefore", this.insertBefore);
            requestBody.put("rangeLength", this.rangeLength);
            requestBody.put("snapshotId", this.snapshotId);
            return requestBody;
        }

        /**
         * Execute updatePlaylistItems request
         * @return PlaylistsRemoveItemsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public PlaylistsRemoveItemsResponse execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<PlaylistsRemoveItemsResponse> localVarResp = updatePlaylistItemsWithHttpInfo(playlistId, uris, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePlaylistItems request with HTTP info returned
         * @return ApiResponse&lt;PlaylistsRemoveItemsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlaylistsRemoveItemsResponse> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updatePlaylistItemsWithHttpInfo(playlistId, uris, requestBody);
        }

        /**
         * Execute updatePlaylistItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlaylistsRemoveItemsResponse> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updatePlaylistItemsAsync(playlistId, uris, requestBody, _callback);
        }
    }

    /**
     * Update Playlist Items 
     * Either reorder or replace items in a playlist depending on the request&#39;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#39;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#39;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#39;t be applied together in a single request. 
     * @param playlistId  (required)
     * @return UpdatePlaylistItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePlaylistItemsRequestBuilder updatePlaylistItems(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new UpdatePlaylistItemsRequestBuilder(playlistId);
    }
}
