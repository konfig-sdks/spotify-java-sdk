/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AlbumsRemoveSavedRequest;
import com.konfigthis.client.model.AlbumsSaveCurrentUserLibraryRequest;
import com.konfigthis.client.model.EpisodesRemoveFromLibraryRequest;
import com.konfigthis.client.model.EpisodesSaveCurrentUserLibraryRequest;
import com.konfigthis.client.model.PagingPlaylistObject;
import com.konfigthis.client.model.PagingSavedAlbumObject;
import com.konfigthis.client.model.PagingSavedEpisodeObject;
import com.konfigthis.client.model.PagingSavedShowObject;
import com.konfigthis.client.model.PagingSavedTrackObject;
import com.konfigthis.client.model.PagingSimplifiedAudiobookObject;
import com.konfigthis.client.model.PlaylistObject;
import com.konfigthis.client.model.PlaylistsCreatePlaylistRequest;
import com.konfigthis.client.model.PlaylistsUpdateDetailsRequest;
import com.konfigthis.client.model.TracksRemoveFromLibraryRequest;
import com.konfigthis.client.model.TracksSaveForCurrentUserRequest;
import com.konfigthis.client.model.UsersFollowArtistsOrUsersRequest;
import com.konfigthis.client.model.UsersGetFollowedArtistsResponse;
import com.konfigthis.client.model.UsersGetTopItemsResponse;
import com.konfigthis.client.model.UsersUnfollowArtistsUsersRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LibraryApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LibraryApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LibraryApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkFollowingArtistsUsersCall(String type, String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/following/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkFollowingArtistsUsersValidateBeforeCall(String type, String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling checkFollowingArtistsUsers(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkFollowingArtistsUsers(Async)");
        }

        return checkFollowingArtistsUsersCall(type, ids, _callback);

    }


    private ApiResponse<List<Boolean>> checkFollowingArtistsUsersWithHttpInfo(String type, String ids) throws ApiException {
        okhttp3.Call localVarCall = checkFollowingArtistsUsersValidateBeforeCall(type, ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkFollowingArtistsUsersAsync(String type, String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkFollowingArtistsUsersValidateBeforeCall(type, ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckFollowingArtistsUsersRequestBuilder {
        private final String type;
        private final String ids;

        private CheckFollowingArtistsUsersRequestBuilder(String type, String ids) {
            this.type = type;
            this.ids = ids;
        }

        /**
         * Build call for checkFollowingArtistsUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkFollowingArtistsUsersCall(type, ids, _callback);
        }


        /**
         * Execute checkFollowingArtistsUsers request
         * @return List&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public List<Boolean> execute() throws ApiException {
            ApiResponse<List<Boolean>> localVarResp = checkFollowingArtistsUsersWithHttpInfo(type, ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkFollowingArtistsUsers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Boolean>> executeWithHttpInfo() throws ApiException {
            return checkFollowingArtistsUsersWithHttpInfo(type, ids);
        }

        /**
         * Execute checkFollowingArtistsUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Boolean>> _callback) throws ApiException {
            return checkFollowingArtistsUsersAsync(type, ids, _callback);
        }
    }

    /**
     * Check If User Follows Artists or Users 
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @param type  (required)
     * @param ids  (required)
     * @return CheckFollowingArtistsUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
     </table>
     */
    public CheckFollowingArtistsUsersRequestBuilder checkFollowingArtistsUsers(String type, String ids) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new CheckFollowingArtistsUsersRequestBuilder(type, ids);
    }
    private okhttp3.Call checkSavedCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkSavedValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkSaved(Async)");
        }

        return checkSavedCall(ids, _callback);

    }


    private ApiResponse<List<Boolean>> checkSavedWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = checkSavedValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkSavedAsync(String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkSavedValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckSavedRequestBuilder {
        private final String ids;

        private CheckSavedRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Build call for checkSaved
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkSavedCall(ids, _callback);
        }


        /**
         * Execute checkSaved request
         * @return List&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public List<Boolean> execute() throws ApiException {
            ApiResponse<List<Boolean>> localVarResp = checkSavedWithHttpInfo(ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkSaved request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Boolean>> executeWithHttpInfo() throws ApiException {
            return checkSavedWithHttpInfo(ids);
        }

        /**
         * Execute checkSaved request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Boolean>> _callback) throws ApiException {
            return checkSavedAsync(ids, _callback);
        }
    }

    /**
     * Check User&#39;s Saved Albums 
     * Check if one or more albums is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return CheckSavedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
     </table>
     */
    public CheckSavedRequestBuilder checkSaved(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new CheckSavedRequestBuilder(ids);
    }
    private okhttp3.Call checkSavedEpisodesCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/episodes/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkSavedEpisodesValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkSavedEpisodes(Async)");
        }

        return checkSavedEpisodesCall(ids, _callback);

    }


    private ApiResponse<List<Boolean>> checkSavedEpisodesWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = checkSavedEpisodesValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkSavedEpisodesAsync(String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkSavedEpisodesValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckSavedEpisodesRequestBuilder {
        private final String ids;

        private CheckSavedEpisodesRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Build call for checkSavedEpisodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkSavedEpisodesCall(ids, _callback);
        }


        /**
         * Execute checkSavedEpisodes request
         * @return List&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public List<Boolean> execute() throws ApiException {
            ApiResponse<List<Boolean>> localVarResp = checkSavedEpisodesWithHttpInfo(ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkSavedEpisodes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Boolean>> executeWithHttpInfo() throws ApiException {
            return checkSavedEpisodesWithHttpInfo(ids);
        }

        /**
         * Execute checkSavedEpisodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Boolean>> _callback) throws ApiException {
            return checkSavedEpisodesAsync(ids, _callback);
        }
    }

    /**
     * Check User&#39;s Saved Episodes 
     * Check if one or more episodes is already saved in the current Spotify user&#39;s &#39;Your Episodes&#39; library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
     * @param ids  (required)
     * @return CheckSavedEpisodesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
     </table>
     */
    public CheckSavedEpisodesRequestBuilder checkSavedEpisodes(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new CheckSavedEpisodesRequestBuilder(ids);
    }
    private okhttp3.Call checkSavedShowsCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/shows/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkSavedShowsValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkSavedShows(Async)");
        }

        return checkSavedShowsCall(ids, _callback);

    }


    private ApiResponse<List<Boolean>> checkSavedShowsWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = checkSavedShowsValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkSavedShowsAsync(String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkSavedShowsValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckSavedShowsRequestBuilder {
        private final String ids;

        private CheckSavedShowsRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Build call for checkSavedShows
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkSavedShowsCall(ids, _callback);
        }


        /**
         * Execute checkSavedShows request
         * @return List&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public List<Boolean> execute() throws ApiException {
            ApiResponse<List<Boolean>> localVarResp = checkSavedShowsWithHttpInfo(ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkSavedShows request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Boolean>> executeWithHttpInfo() throws ApiException {
            return checkSavedShowsWithHttpInfo(ids);
        }

        /**
         * Execute checkSavedShows request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Boolean>> _callback) throws ApiException {
            return checkSavedShowsAsync(ids, _callback);
        }
    }

    /**
     * Check User&#39;s Saved Shows 
     * Check if one or more shows is already saved in the current Spotify user&#39;s library. 
     * @param ids  (required)
     * @return CheckSavedShowsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
     </table>
     */
    public CheckSavedShowsRequestBuilder checkSavedShows(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new CheckSavedShowsRequestBuilder(ids);
    }
    private okhttp3.Call checkSaved_0Call(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/tracks/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkSaved_0ValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkSaved_0(Async)");
        }

        return checkSaved_0Call(ids, _callback);

    }


    private ApiResponse<List<Boolean>> checkSaved_0WithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = checkSaved_0ValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkSaved_0Async(String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkSaved_0ValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckSaved0RequestBuilder {
        private final String ids;

        private CheckSaved0RequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Build call for checkSaved_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkSaved_0Call(ids, _callback);
        }


        /**
         * Execute checkSaved_0 request
         * @return List&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public List<Boolean> execute() throws ApiException {
            ApiResponse<List<Boolean>> localVarResp = checkSaved_0WithHttpInfo(ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkSaved_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Boolean>> executeWithHttpInfo() throws ApiException {
            return checkSaved_0WithHttpInfo(ids);
        }

        /**
         * Execute checkSaved_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Boolean>> _callback) throws ApiException {
            return checkSaved_0Async(ids, _callback);
        }
    }

    /**
     * Check User&#39;s Saved Tracks 
     * Check if one or more tracks is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return CheckSaved0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
     </table>
     */
    public CheckSaved0RequestBuilder checkSaved_0(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new CheckSaved0RequestBuilder(ids);
    }
    private okhttp3.Call checkUserSavedCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/audiobooks/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkUserSavedValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkUserSaved(Async)");
        }

        return checkUserSavedCall(ids, _callback);

    }


    private ApiResponse<List<Boolean>> checkUserSavedWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = checkUserSavedValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkUserSavedAsync(String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkUserSavedValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckUserSavedRequestBuilder {
        private final String ids;

        private CheckUserSavedRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Build call for checkUserSaved
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkUserSavedCall(ids, _callback);
        }


        /**
         * Execute checkUserSaved request
         * @return List&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public List<Boolean> execute() throws ApiException {
            ApiResponse<List<Boolean>> localVarResp = checkUserSavedWithHttpInfo(ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkUserSaved request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Boolean>> executeWithHttpInfo() throws ApiException {
            return checkUserSavedWithHttpInfo(ids);
        }

        /**
         * Execute checkUserSaved request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Boolean>> _callback) throws ApiException {
            return checkUserSavedAsync(ids, _callback);
        }
    }

    /**
     * Check User&#39;s Saved Audiobooks 
     * Check if one or more audiobooks are already saved in the current Spotify user&#39;s library. 
     * @param ids  (required)
     * @return CheckUserSavedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
     </table>
     */
    public CheckUserSavedRequestBuilder checkUserSaved(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new CheckUserSavedRequestBuilder(ids);
    }
    private okhttp3.Call createPlaylistCall(String userId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/users/{user_id}/playlists"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPlaylistValidateBeforeCall(String userId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createPlaylist(Async)");
        }

        return createPlaylistCall(userId, requestBody, _callback);

    }


    private ApiResponse<PlaylistObject> createPlaylistWithHttpInfo(String userId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createPlaylistValidateBeforeCall(userId, requestBody, null);
        Type localVarReturnType = new TypeToken<PlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPlaylistAsync(String userId, Map<String, Object> requestBody, final ApiCallback<PlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPlaylistValidateBeforeCall(userId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<PlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePlaylistRequestBuilder {
        private final String name;
        private final String userId;
        private String description;
        private Boolean _public;
        private Boolean collaborative;

        private CreatePlaylistRequestBuilder(String name, String userId) {
            this.name = name;
            this.userId = userId;
        }

        /**
         * Set description
         * @param description value for playlist description as displayed in Spotify Clients and in the Web API.  (optional)
         * @return CreatePlaylistRequestBuilder
         */
        public CreatePlaylistRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set _public
         * @param _public Defaults to &#x60;true&#x60;. If &#x60;true&#x60; the playlist will be public, if &#x60;false&#x60; it will be private. To be able to create private playlists, the user must have granted the &#x60;playlist-modify-private&#x60; [scope](/documentation/web-api/concepts/scopes/#list-of-scopes)  (optional)
         * @return CreatePlaylistRequestBuilder
         */
        public CreatePlaylistRequestBuilder _public(Boolean _public) {
            this._public = _public;
            return this;
        }
        
        /**
         * Set collaborative
         * @param collaborative Defaults to &#x60;false&#x60;. If &#x60;true&#x60; the playlist will be collaborative. _**Note**: to create a collaborative playlist you must also set &#x60;public&#x60; to &#x60;false&#x60;. To create collaborative playlists you must have granted &#x60;playlist-modify-private&#x60; and &#x60;playlist-modify-public&#x60; [scopes](/documentation/web-api/concepts/scopes/#list-of-scopes)._  (optional)
         * @return CreatePlaylistRequestBuilder
         */
        public CreatePlaylistRequestBuilder collaborative(Boolean collaborative) {
            this.collaborative = collaborative;
            return this;
        }
        
        /**
         * Build call for createPlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createPlaylistCall(userId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("description", this.description);
            requestBody.put("name", this.name);
            requestBody.put("_public", this._public);
            requestBody.put("collaborative", this.collaborative);
            return requestBody;
        }

        /**
         * Execute createPlaylist request
         * @return PlaylistObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A playlist </td><td>  -  </td></tr>
         </table>
         */
        public PlaylistObject execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<PlaylistObject> localVarResp = createPlaylistWithHttpInfo(userId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPlaylist request with HTTP info returned
         * @return ApiResponse&lt;PlaylistObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A playlist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlaylistObject> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createPlaylistWithHttpInfo(userId, requestBody);
        }

        /**
         * Execute createPlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlaylistObject> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createPlaylistAsync(userId, requestBody, _callback);
        }
    }

    /**
     * Create Playlist 
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
     * @param userId  (required)
     * @return CreatePlaylistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A playlist </td><td>  -  </td></tr>
     </table>
     */
    public CreatePlaylistRequestBuilder createPlaylist(String name, String userId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new CreatePlaylistRequestBuilder(name, userId);
    }
    private okhttp3.Call followArtistsOrUsersCall(String type, String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followArtistsOrUsersValidateBeforeCall(String type, String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling followArtistsOrUsers(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling followArtistsOrUsers(Async)");
        }

        return followArtistsOrUsersCall(type, ids, requestBody, _callback);

    }


    private ApiResponse<Void> followArtistsOrUsersWithHttpInfo(String type, String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = followArtistsOrUsersValidateBeforeCall(type, ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call followArtistsOrUsersAsync(String type, String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followArtistsOrUsersValidateBeforeCall(type, ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class FollowArtistsOrUsersRequestBuilder {
        private final List<String> ids;
        private final String type;
        private final String ids;

        private FollowArtistsOrUsersRequestBuilder(List<String> ids, String type, String ids) {
            this.ids = ids;
            this.type = type;
            this.ids = ids;
        }

        /**
         * Build call for followArtistsOrUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followArtistsOrUsersCall(type, ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute followArtistsOrUsers request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            followArtistsOrUsersWithHttpInfo(type, ids, requestBody);
        }

        /**
         * Execute followArtistsOrUsers request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followArtistsOrUsersWithHttpInfo(type, ids, requestBody);
        }

        /**
         * Execute followArtistsOrUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followArtistsOrUsersAsync(type, ids, requestBody, _callback);
        }
    }

    /**
     * Follow Artists or Users 
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @param type  (required)
     * @param ids  (required)
     * @return FollowArtistsOrUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
     </table>
     */
    public FollowArtistsOrUsersRequestBuilder followArtistsOrUsers(List<String> ids, String type, String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new FollowArtistsOrUsersRequestBuilder(ids, type, ids);
    }
    private okhttp3.Call getFollowedArtistsCall(String type, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowedArtistsValidateBeforeCall(String type, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getFollowedArtists(Async)");
        }

        return getFollowedArtistsCall(type, after, limit, _callback);

    }


    private ApiResponse<UsersGetFollowedArtistsResponse> getFollowedArtistsWithHttpInfo(String type, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getFollowedArtistsValidateBeforeCall(type, after, limit, null);
        Type localVarReturnType = new TypeToken<UsersGetFollowedArtistsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFollowedArtistsAsync(String type, String after, Integer limit, final ApiCallback<UsersGetFollowedArtistsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowedArtistsValidateBeforeCall(type, after, limit, _callback);
        Type localVarReturnType = new TypeToken<UsersGetFollowedArtistsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFollowedArtistsRequestBuilder {
        private final String type;
        private String after;
        private Integer limit;

        private GetFollowedArtistsRequestBuilder(String type) {
            this.type = type;
        }

        /**
         * Set after
         * @param after  (optional)
         * @return GetFollowedArtistsRequestBuilder
         */
        public GetFollowedArtistsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetFollowedArtistsRequestBuilder
         */
        public GetFollowedArtistsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getFollowedArtists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFollowedArtistsCall(type, after, limit, _callback);
        }


        /**
         * Execute getFollowedArtists request
         * @return UsersGetFollowedArtistsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetFollowedArtistsResponse execute() throws ApiException {
            ApiResponse<UsersGetFollowedArtistsResponse> localVarResp = getFollowedArtistsWithHttpInfo(type, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFollowedArtists request with HTTP info returned
         * @return ApiResponse&lt;UsersGetFollowedArtistsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetFollowedArtistsResponse> executeWithHttpInfo() throws ApiException {
            return getFollowedArtistsWithHttpInfo(type, after, limit);
        }

        /**
         * Execute getFollowedArtists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetFollowedArtistsResponse> _callback) throws ApiException {
            return getFollowedArtistsAsync(type, after, limit, _callback);
        }
    }

    /**
     * Get Followed Artists 
     * Get the current user&#39;s followed artists. 
     * @param type  (required)
     * @return GetFollowedArtistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
     </table>
     */
    public GetFollowedArtistsRequestBuilder getFollowedArtists(String type) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new GetFollowedArtistsRequestBuilder(type);
    }
    private okhttp3.Call getSavedCall(Integer limit, Integer offset, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSavedValidateBeforeCall(Integer limit, Integer offset, String market, final ApiCallback _callback) throws ApiException {
        return getSavedCall(limit, offset, market, _callback);

    }


    private ApiResponse<PagingSavedAlbumObject> getSavedWithHttpInfo(Integer limit, Integer offset, String market) throws ApiException {
        okhttp3.Call localVarCall = getSavedValidateBeforeCall(limit, offset, market, null);
        Type localVarReturnType = new TypeToken<PagingSavedAlbumObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSavedAsync(Integer limit, Integer offset, String market, final ApiCallback<PagingSavedAlbumObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSavedValidateBeforeCall(limit, offset, market, _callback);
        Type localVarReturnType = new TypeToken<PagingSavedAlbumObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSavedRequestBuilder {
        private Integer limit;
        private Integer offset;
        private String market;

        private GetSavedRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetSavedRequestBuilder
         */
        public GetSavedRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetSavedRequestBuilder
         */
        public GetSavedRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set market
         * @param market  (optional)
         * @return GetSavedRequestBuilder
         */
        public GetSavedRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Build call for getSaved
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSavedCall(limit, offset, market, _callback);
        }


        /**
         * Execute getSaved request
         * @return PagingSavedAlbumObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public PagingSavedAlbumObject execute() throws ApiException {
            ApiResponse<PagingSavedAlbumObject> localVarResp = getSavedWithHttpInfo(limit, offset, market);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSaved request with HTTP info returned
         * @return ApiResponse&lt;PagingSavedAlbumObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingSavedAlbumObject> executeWithHttpInfo() throws ApiException {
            return getSavedWithHttpInfo(limit, offset, market);
        }

        /**
         * Execute getSaved request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingSavedAlbumObject> _callback) throws ApiException {
            return getSavedAsync(limit, offset, market, _callback);
        }
    }

    /**
     * Get User&#39;s Saved Albums 
     * Get a list of the albums saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @return GetSavedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
     </table>
     */
    public GetSavedRequestBuilder getSaved() throws IllegalArgumentException {
        return new GetSavedRequestBuilder();
    }
    private okhttp3.Call getTopItemsCall(String type, String timeRange, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/top/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_range", timeRange));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopItemsValidateBeforeCall(String type, String timeRange, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getTopItems(Async)");
        }

        return getTopItemsCall(type, timeRange, limit, offset, _callback);

    }


    private ApiResponse<UsersGetTopItemsResponse> getTopItemsWithHttpInfo(String type, String timeRange, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getTopItemsValidateBeforeCall(type, timeRange, limit, offset, null);
        Type localVarReturnType = new TypeToken<UsersGetTopItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTopItemsAsync(String type, String timeRange, Integer limit, Integer offset, final ApiCallback<UsersGetTopItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopItemsValidateBeforeCall(type, timeRange, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<UsersGetTopItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTopItemsRequestBuilder {
        private final String type;
        private String timeRange;
        private Integer limit;
        private Integer offset;

        private GetTopItemsRequestBuilder(String type) {
            this.type = type;
        }

        /**
         * Set timeRange
         * @param timeRange  (optional, default to medium_term)
         * @return GetTopItemsRequestBuilder
         */
        public GetTopItemsRequestBuilder timeRange(String timeRange) {
            this.timeRange = timeRange;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetTopItemsRequestBuilder
         */
        public GetTopItemsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetTopItemsRequestBuilder
         */
        public GetTopItemsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getTopItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTopItemsCall(type, timeRange, limit, offset, _callback);
        }


        /**
         * Execute getTopItems request
         * @return UsersGetTopItemsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetTopItemsResponse execute() throws ApiException {
            ApiResponse<UsersGetTopItemsResponse> localVarResp = getTopItemsWithHttpInfo(type, timeRange, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTopItems request with HTTP info returned
         * @return ApiResponse&lt;UsersGetTopItemsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetTopItemsResponse> executeWithHttpInfo() throws ApiException {
            return getTopItemsWithHttpInfo(type, timeRange, limit, offset);
        }

        /**
         * Execute getTopItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetTopItemsResponse> _callback) throws ApiException {
            return getTopItemsAsync(type, timeRange, limit, offset, _callback);
        }
    }

    /**
     * Get User&#39;s Top Items 
     * Get the current user&#39;s top artists or tracks based on calculated affinity. 
     * @param type  (required)
     * @return GetTopItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
     </table>
     */
    public GetTopItemsRequestBuilder getTopItems(String type) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new GetTopItemsRequestBuilder(type);
    }
    private okhttp3.Call getUserPlaylistsCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPlaylistsValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getUserPlaylistsCall(limit, offset, _callback);

    }


    private ApiResponse<PagingPlaylistObject> getUserPlaylistsWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getUserPlaylistsValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserPlaylistsAsync(Integer limit, Integer offset, final ApiCallback<PagingPlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPlaylistsValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserPlaylistsRequestBuilder {
        private Integer limit;
        private Integer offset;

        private GetUserPlaylistsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetUserPlaylistsRequestBuilder
         */
        public GetUserPlaylistsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetUserPlaylistsRequestBuilder
         */
        public GetUserPlaylistsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getUserPlaylists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserPlaylistsCall(limit, offset, _callback);
        }


        /**
         * Execute getUserPlaylists request
         * @return PagingPlaylistObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public PagingPlaylistObject execute() throws ApiException {
            ApiResponse<PagingPlaylistObject> localVarResp = getUserPlaylistsWithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserPlaylists request with HTTP info returned
         * @return ApiResponse&lt;PagingPlaylistObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingPlaylistObject> executeWithHttpInfo() throws ApiException {
            return getUserPlaylistsWithHttpInfo(limit, offset);
        }

        /**
         * Execute getUserPlaylists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingPlaylistObject> _callback) throws ApiException {
            return getUserPlaylistsAsync(limit, offset, _callback);
        }
    }

    /**
     * Get Current User&#39;s Playlists 
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @return GetUserPlaylistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
     </table>
     */
    public GetUserPlaylistsRequestBuilder getUserPlaylists() throws IllegalArgumentException {
        return new GetUserPlaylistsRequestBuilder();
    }
    private okhttp3.Call getUserSavedCall(String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserSavedValidateBeforeCall(String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getUserSavedCall(market, limit, offset, _callback);

    }


    private ApiResponse<PagingSavedTrackObject> getUserSavedWithHttpInfo(String market, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getUserSavedValidateBeforeCall(market, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSavedTrackObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserSavedAsync(String market, Integer limit, Integer offset, final ApiCallback<PagingSavedTrackObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserSavedValidateBeforeCall(market, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSavedTrackObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserSavedRequestBuilder {
        private String market;
        private Integer limit;
        private Integer offset;

        private GetUserSavedRequestBuilder() {
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetUserSavedRequestBuilder
         */
        public GetUserSavedRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetUserSavedRequestBuilder
         */
        public GetUserSavedRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetUserSavedRequestBuilder
         */
        public GetUserSavedRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getUserSaved
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserSavedCall(market, limit, offset, _callback);
        }


        /**
         * Execute getUserSaved request
         * @return PagingSavedTrackObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public PagingSavedTrackObject execute() throws ApiException {
            ApiResponse<PagingSavedTrackObject> localVarResp = getUserSavedWithHttpInfo(market, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserSaved request with HTTP info returned
         * @return ApiResponse&lt;PagingSavedTrackObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingSavedTrackObject> executeWithHttpInfo() throws ApiException {
            return getUserSavedWithHttpInfo(market, limit, offset);
        }

        /**
         * Execute getUserSaved request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingSavedTrackObject> _callback) throws ApiException {
            return getUserSavedAsync(market, limit, offset, _callback);
        }
    }

    /**
     * Get User&#39;s Saved Tracks 
     * Get a list of the songs saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @return GetUserSavedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
     </table>
     */
    public GetUserSavedRequestBuilder getUserSaved() throws IllegalArgumentException {
        return new GetUserSavedRequestBuilder();
    }
    private okhttp3.Call getUserSavedEpisodesCall(String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/episodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserSavedEpisodesValidateBeforeCall(String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getUserSavedEpisodesCall(market, limit, offset, _callback);

    }


    private ApiResponse<PagingSavedEpisodeObject> getUserSavedEpisodesWithHttpInfo(String market, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getUserSavedEpisodesValidateBeforeCall(market, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSavedEpisodeObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserSavedEpisodesAsync(String market, Integer limit, Integer offset, final ApiCallback<PagingSavedEpisodeObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserSavedEpisodesValidateBeforeCall(market, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSavedEpisodeObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserSavedEpisodesRequestBuilder {
        private String market;
        private Integer limit;
        private Integer offset;

        private GetUserSavedEpisodesRequestBuilder() {
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetUserSavedEpisodesRequestBuilder
         */
        public GetUserSavedEpisodesRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetUserSavedEpisodesRequestBuilder
         */
        public GetUserSavedEpisodesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetUserSavedEpisodesRequestBuilder
         */
        public GetUserSavedEpisodesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getUserSavedEpisodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserSavedEpisodesCall(market, limit, offset, _callback);
        }


        /**
         * Execute getUserSavedEpisodes request
         * @return PagingSavedEpisodeObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
         </table>
         */
        public PagingSavedEpisodeObject execute() throws ApiException {
            ApiResponse<PagingSavedEpisodeObject> localVarResp = getUserSavedEpisodesWithHttpInfo(market, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserSavedEpisodes request with HTTP info returned
         * @return ApiResponse&lt;PagingSavedEpisodeObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingSavedEpisodeObject> executeWithHttpInfo() throws ApiException {
            return getUserSavedEpisodesWithHttpInfo(market, limit, offset);
        }

        /**
         * Execute getUserSavedEpisodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingSavedEpisodeObject> _callback) throws ApiException {
            return getUserSavedEpisodesAsync(market, limit, offset, _callback);
        }
    }

    /**
     * Get User&#39;s Saved Episodes 
     * Get a list of the episodes saved in the current Spotify user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @return GetUserSavedEpisodesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
     </table>
     */
    public GetUserSavedEpisodesRequestBuilder getUserSavedEpisodes() throws IllegalArgumentException {
        return new GetUserSavedEpisodesRequestBuilder();
    }
    private okhttp3.Call getUserSavedShowsCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/shows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserSavedShowsValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getUserSavedShowsCall(limit, offset, _callback);

    }


    private ApiResponse<PagingSavedShowObject> getUserSavedShowsWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getUserSavedShowsValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSavedShowObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserSavedShowsAsync(Integer limit, Integer offset, final ApiCallback<PagingSavedShowObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserSavedShowsValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSavedShowObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserSavedShowsRequestBuilder {
        private Integer limit;
        private Integer offset;

        private GetUserSavedShowsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetUserSavedShowsRequestBuilder
         */
        public GetUserSavedShowsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetUserSavedShowsRequestBuilder
         */
        public GetUserSavedShowsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getUserSavedShows
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of shows </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserSavedShowsCall(limit, offset, _callback);
        }


        /**
         * Execute getUserSavedShows request
         * @return PagingSavedShowObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of shows </td><td>  -  </td></tr>
         </table>
         */
        public PagingSavedShowObject execute() throws ApiException {
            ApiResponse<PagingSavedShowObject> localVarResp = getUserSavedShowsWithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserSavedShows request with HTTP info returned
         * @return ApiResponse&lt;PagingSavedShowObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of shows </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingSavedShowObject> executeWithHttpInfo() throws ApiException {
            return getUserSavedShowsWithHttpInfo(limit, offset);
        }

        /**
         * Execute getUserSavedShows request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of shows </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingSavedShowObject> _callback) throws ApiException {
            return getUserSavedShowsAsync(limit, offset, _callback);
        }
    }

    /**
     * Get User&#39;s Saved Shows 
     * Get a list of shows saved in the current Spotify user&#39;s library. Optional parameters can be used to limit the number of shows returned. 
     * @return GetUserSavedShowsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of shows </td><td>  -  </td></tr>
     </table>
     */
    public GetUserSavedShowsRequestBuilder getUserSavedShows() throws IllegalArgumentException {
        return new GetUserSavedShowsRequestBuilder();
    }
    private okhttp3.Call listSavedCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/audiobooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSavedValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return listSavedCall(limit, offset, _callback);

    }


    private ApiResponse<PagingSimplifiedAudiobookObject> listSavedWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listSavedValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSimplifiedAudiobookObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSavedAsync(Integer limit, Integer offset, final ApiCallback<PagingSimplifiedAudiobookObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSavedValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSimplifiedAudiobookObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSavedRequestBuilder {
        private Integer limit;
        private Integer offset;

        private ListSavedRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return ListSavedRequestBuilder
         */
        public ListSavedRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return ListSavedRequestBuilder
         */
        public ListSavedRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listSaved
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of audiobooks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSavedCall(limit, offset, _callback);
        }


        /**
         * Execute listSaved request
         * @return PagingSimplifiedAudiobookObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of audiobooks </td><td>  -  </td></tr>
         </table>
         */
        public PagingSimplifiedAudiobookObject execute() throws ApiException {
            ApiResponse<PagingSimplifiedAudiobookObject> localVarResp = listSavedWithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSaved request with HTTP info returned
         * @return ApiResponse&lt;PagingSimplifiedAudiobookObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of audiobooks </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingSimplifiedAudiobookObject> executeWithHttpInfo() throws ApiException {
            return listSavedWithHttpInfo(limit, offset);
        }

        /**
         * Execute listSaved request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of audiobooks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingSimplifiedAudiobookObject> _callback) throws ApiException {
            return listSavedAsync(limit, offset, _callback);
        }
    }

    /**
     * Get User&#39;s Saved Audiobooks 
     * Get a list of the audiobooks saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @return ListSavedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of audiobooks </td><td>  -  </td></tr>
     </table>
     */
    public ListSavedRequestBuilder listSaved() throws IllegalArgumentException {
        return new ListSavedRequestBuilder();
    }
    private okhttp3.Call removeFromLibraryCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/audiobooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromLibraryValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling removeFromLibrary(Async)");
        }

        return removeFromLibraryCall(ids, _callback);

    }


    private ApiResponse<Void> removeFromLibraryWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = removeFromLibraryValidateBeforeCall(ids, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromLibraryAsync(String ids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromLibraryValidateBeforeCall(ids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromLibraryRequestBuilder {
        private final String ids;

        private RemoveFromLibraryRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Build call for removeFromLibrary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audiobook(s) have been removed from the library </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromLibraryCall(ids, _callback);
        }


        /**
         * Execute removeFromLibrary request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audiobook(s) have been removed from the library </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFromLibraryWithHttpInfo(ids);
        }

        /**
         * Execute removeFromLibrary request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audiobook(s) have been removed from the library </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFromLibraryWithHttpInfo(ids);
        }

        /**
         * Execute removeFromLibrary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audiobook(s) have been removed from the library </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFromLibraryAsync(ids, _callback);
        }
    }

    /**
     * Remove User&#39;s Saved Audiobooks 
     * Remove one or more audiobooks from the Spotify user&#39;s library. 
     * @param ids  (required)
     * @return RemoveFromLibraryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audiobook(s) have been removed from the library </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromLibraryRequestBuilder removeFromLibrary(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new RemoveFromLibraryRequestBuilder(ids);
    }
    private okhttp3.Call removeFromLibrary_0Call(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromLibrary_0ValidateBeforeCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling removeFromLibrary_0(Async)");
        }

        return removeFromLibrary_0Call(ids, requestBody, _callback);

    }


    private ApiResponse<Void> removeFromLibrary_0WithHttpInfo(String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = removeFromLibrary_0ValidateBeforeCall(ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromLibrary_0Async(String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromLibrary_0ValidateBeforeCall(ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromLibrary0RequestBuilder {
        private final String ids;
        private List<String> ids;

        private RemoveFromLibrary0RequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set ids
         * @param ids A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: &#x60;[\\\&quot;4iV5W9uYEdYUVa79Axb7Rh\\\&quot;, \\\&quot;1301WleyT98MSxVHPZCA6M\\\&quot;]&#x60;&lt;br/&gt;A maximum of 50 items can be specified in one request. _**Note**: if the &#x60;ids&#x60; parameter is present in the query string, any IDs listed here in the body will be ignored._  (optional)
         * @return RemoveFromLibrary0RequestBuilder
         */
        public RemoveFromLibrary0RequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for removeFromLibrary_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track removed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeFromLibrary_0Call(ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute removeFromLibrary_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track removed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            removeFromLibrary_0WithHttpInfo(ids, requestBody);
        }

        /**
         * Execute removeFromLibrary_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track removed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeFromLibrary_0WithHttpInfo(ids, requestBody);
        }

        /**
         * Execute removeFromLibrary_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track removed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeFromLibrary_0Async(ids, requestBody, _callback);
        }
    }

    /**
     * Remove User&#39;s Saved Tracks 
     * Remove one or more tracks from the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return RemoveFromLibrary0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track removed </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromLibrary0RequestBuilder removeFromLibrary_0(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new RemoveFromLibrary0RequestBuilder(ids);
    }
    private okhttp3.Call removeFromLibrary_1Call(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/episodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromLibrary_1ValidateBeforeCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling removeFromLibrary_1(Async)");
        }

        return removeFromLibrary_1Call(ids, requestBody, _callback);

    }


    private ApiResponse<Void> removeFromLibrary_1WithHttpInfo(String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = removeFromLibrary_1ValidateBeforeCall(ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromLibrary_1Async(String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromLibrary_1ValidateBeforeCall(ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromLibrary1RequestBuilder {
        private final String ids;
        private List<String> ids;

        private RemoveFromLibrary1RequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set ids
         * @param ids A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). &lt;br/&gt;A maximum of 50 items can be specified in one request. _**Note**: if the &#x60;ids&#x60; parameter is present in the query string, any IDs listed here in the body will be ignored._  (optional)
         * @return RemoveFromLibrary1RequestBuilder
         */
        public RemoveFromLibrary1RequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for removeFromLibrary_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Episode removed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeFromLibrary_1Call(ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute removeFromLibrary_1 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Episode removed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            removeFromLibrary_1WithHttpInfo(ids, requestBody);
        }

        /**
         * Execute removeFromLibrary_1 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Episode removed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeFromLibrary_1WithHttpInfo(ids, requestBody);
        }

        /**
         * Execute removeFromLibrary_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Episode removed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeFromLibrary_1Async(ids, requestBody, _callback);
        }
    }

    /**
     * Remove User&#39;s Saved Episodes 
     * Remove one or more episodes from the current user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @param ids  (required)
     * @return RemoveFromLibrary1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Episode removed </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromLibrary1RequestBuilder removeFromLibrary_1(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new RemoveFromLibrary1RequestBuilder(ids);
    }
    private okhttp3.Call removeSavedCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSavedValidateBeforeCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling removeSaved(Async)");
        }

        return removeSavedCall(ids, requestBody, _callback);

    }


    private ApiResponse<Void> removeSavedWithHttpInfo(String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = removeSavedValidateBeforeCall(ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeSavedAsync(String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSavedValidateBeforeCall(ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveSavedRequestBuilder {
        private final String ids;
        private List<String> ids;

        private RemoveSavedRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set ids
         * @param ids A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: &#x60;[\\\&quot;4iV5W9uYEdYUVa79Axb7Rh\\\&quot;, \\\&quot;1301WleyT98MSxVHPZCA6M\\\&quot;]&#x60;&lt;br/&gt;A maximum of 50 items can be specified in one request. _**Note**: if the &#x60;ids&#x60; parameter is present in the query string, any IDs listed here in the body will be ignored._  (optional)
         * @return RemoveSavedRequestBuilder
         */
        public RemoveSavedRequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for removeSaved
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Album(s) have been removed from the library </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeSavedCall(ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute removeSaved request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Album(s) have been removed from the library </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            removeSavedWithHttpInfo(ids, requestBody);
        }

        /**
         * Execute removeSaved request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Album(s) have been removed from the library </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeSavedWithHttpInfo(ids, requestBody);
        }

        /**
         * Execute removeSaved request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Album(s) have been removed from the library </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return removeSavedAsync(ids, requestBody, _callback);
        }
    }

    /**
     * Remove Users&#39; Saved Albums 
     * Remove one or more albums from the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return RemoveSavedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Album(s) have been removed from the library </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSavedRequestBuilder removeSaved(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new RemoveSavedRequestBuilder(ids);
    }
    private okhttp3.Call removeUserLibraryCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/shows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserLibraryValidateBeforeCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling removeUserLibrary(Async)");
        }

        return removeUserLibraryCall(ids, market, _callback);

    }


    private ApiResponse<Void> removeUserLibraryWithHttpInfo(String ids, String market) throws ApiException {
        okhttp3.Call localVarCall = removeUserLibraryValidateBeforeCall(ids, market, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeUserLibraryAsync(String ids, String market, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserLibraryValidateBeforeCall(ids, market, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveUserLibraryRequestBuilder {
        private final String ids;
        private String market;

        private RemoveUserLibraryRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return RemoveUserLibraryRequestBuilder
         */
        public RemoveUserLibraryRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Build call for removeUserLibrary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show removed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeUserLibraryCall(ids, market, _callback);
        }


        /**
         * Execute removeUserLibrary request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show removed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeUserLibraryWithHttpInfo(ids, market);
        }

        /**
         * Execute removeUserLibrary request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show removed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeUserLibraryWithHttpInfo(ids, market);
        }

        /**
         * Execute removeUserLibrary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show removed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeUserLibraryAsync(ids, market, _callback);
        }
    }

    /**
     * Remove User&#39;s Saved Shows 
     * Delete one or more shows from current Spotify user&#39;s library. 
     * @param ids  (required)
     * @return RemoveUserLibraryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show removed </td><td>  -  </td></tr>
     </table>
     */
    public RemoveUserLibraryRequestBuilder removeUserLibrary(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new RemoveUserLibraryRequestBuilder(ids);
    }
    private okhttp3.Call saveCurrentUserLibraryCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/audiobooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCurrentUserLibraryValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling saveCurrentUserLibrary(Async)");
        }

        return saveCurrentUserLibraryCall(ids, _callback);

    }


    private ApiResponse<Void> saveCurrentUserLibraryWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = saveCurrentUserLibraryValidateBeforeCall(ids, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call saveCurrentUserLibraryAsync(String ids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCurrentUserLibraryValidateBeforeCall(ids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SaveCurrentUserLibraryRequestBuilder {
        private final String ids;

        private SaveCurrentUserLibraryRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Build call for saveCurrentUserLibrary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audiobook(s) are saved to the library </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return saveCurrentUserLibraryCall(ids, _callback);
        }


        /**
         * Execute saveCurrentUserLibrary request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audiobook(s) are saved to the library </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            saveCurrentUserLibraryWithHttpInfo(ids);
        }

        /**
         * Execute saveCurrentUserLibrary request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audiobook(s) are saved to the library </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return saveCurrentUserLibraryWithHttpInfo(ids);
        }

        /**
         * Execute saveCurrentUserLibrary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Audiobook(s) are saved to the library </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return saveCurrentUserLibraryAsync(ids, _callback);
        }
    }

    /**
     * Save Audiobooks for Current User 
     * Save one or more audiobooks to the current Spotify user&#39;s library. 
     * @param ids  (required)
     * @return SaveCurrentUserLibraryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audiobook(s) are saved to the library </td><td>  -  </td></tr>
     </table>
     */
    public SaveCurrentUserLibraryRequestBuilder saveCurrentUserLibrary(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new SaveCurrentUserLibraryRequestBuilder(ids);
    }
    private okhttp3.Call saveCurrentUserLibrary_0Call(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCurrentUserLibrary_0ValidateBeforeCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling saveCurrentUserLibrary_0(Async)");
        }

        return saveCurrentUserLibrary_0Call(ids, requestBody, _callback);

    }


    private ApiResponse<Void> saveCurrentUserLibrary_0WithHttpInfo(String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = saveCurrentUserLibrary_0ValidateBeforeCall(ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call saveCurrentUserLibrary_0Async(String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCurrentUserLibrary_0ValidateBeforeCall(ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SaveCurrentUserLibrary0RequestBuilder {
        private final String ids;
        private List<String> ids;

        private SaveCurrentUserLibrary0RequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set ids
         * @param ids A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: &#x60;[\\\&quot;4iV5W9uYEdYUVa79Axb7Rh\\\&quot;, \\\&quot;1301WleyT98MSxVHPZCA6M\\\&quot;]&#x60;&lt;br/&gt;A maximum of 50 items can be specified in one request. _**Note**: if the &#x60;ids&#x60; parameter is present in the query string, any IDs listed here in the body will be ignored._  (optional)
         * @return SaveCurrentUserLibrary0RequestBuilder
         */
        public SaveCurrentUserLibrary0RequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for saveCurrentUserLibrary_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The album is saved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveCurrentUserLibrary_0Call(ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute saveCurrentUserLibrary_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The album is saved </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            saveCurrentUserLibrary_0WithHttpInfo(ids, requestBody);
        }

        /**
         * Execute saveCurrentUserLibrary_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The album is saved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveCurrentUserLibrary_0WithHttpInfo(ids, requestBody);
        }

        /**
         * Execute saveCurrentUserLibrary_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The album is saved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveCurrentUserLibrary_0Async(ids, requestBody, _callback);
        }
    }

    /**
     * Save Albums for Current User 
     * Save one or more albums to the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return SaveCurrentUserLibrary0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album is saved </td><td>  -  </td></tr>
     </table>
     */
    public SaveCurrentUserLibrary0RequestBuilder saveCurrentUserLibrary_0(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new SaveCurrentUserLibrary0RequestBuilder(ids);
    }
    private okhttp3.Call saveCurrentUserLibrary_1Call(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/episodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCurrentUserLibrary_1ValidateBeforeCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling saveCurrentUserLibrary_1(Async)");
        }

        return saveCurrentUserLibrary_1Call(ids, requestBody, _callback);

    }


    private ApiResponse<Void> saveCurrentUserLibrary_1WithHttpInfo(String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = saveCurrentUserLibrary_1ValidateBeforeCall(ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call saveCurrentUserLibrary_1Async(String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCurrentUserLibrary_1ValidateBeforeCall(ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SaveCurrentUserLibrary1RequestBuilder {
        private final String ids;
        private List<String> ids;

        private SaveCurrentUserLibrary1RequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set ids
         * @param ids A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). &lt;br/&gt;A maximum of 50 items can be specified in one request. _**Note**: if the &#x60;ids&#x60; parameter is present in the query string, any IDs listed here in the body will be ignored._  (optional)
         * @return SaveCurrentUserLibrary1RequestBuilder
         */
        public SaveCurrentUserLibrary1RequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for saveCurrentUserLibrary_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Episode saved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveCurrentUserLibrary_1Call(ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute saveCurrentUserLibrary_1 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Episode saved </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            saveCurrentUserLibrary_1WithHttpInfo(ids, requestBody);
        }

        /**
         * Execute saveCurrentUserLibrary_1 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Episode saved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveCurrentUserLibrary_1WithHttpInfo(ids, requestBody);
        }

        /**
         * Execute saveCurrentUserLibrary_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Episode saved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveCurrentUserLibrary_1Async(ids, requestBody, _callback);
        }
    }

    /**
     * Save Episodes for Current User 
     * Save one or more episodes to the current user&#39;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @param ids  (required)
     * @return SaveCurrentUserLibrary1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Episode saved </td><td>  -  </td></tr>
     </table>
     */
    public SaveCurrentUserLibrary1RequestBuilder saveCurrentUserLibrary_1(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new SaveCurrentUserLibrary1RequestBuilder(ids);
    }
    private okhttp3.Call saveCurrentUserLibrary_2Call(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/shows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCurrentUserLibrary_2ValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling saveCurrentUserLibrary_2(Async)");
        }

        return saveCurrentUserLibrary_2Call(ids, _callback);

    }


    private ApiResponse<Void> saveCurrentUserLibrary_2WithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = saveCurrentUserLibrary_2ValidateBeforeCall(ids, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call saveCurrentUserLibrary_2Async(String ids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCurrentUserLibrary_2ValidateBeforeCall(ids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SaveCurrentUserLibrary2RequestBuilder {
        private final String ids;

        private SaveCurrentUserLibrary2RequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Build call for saveCurrentUserLibrary_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show saved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return saveCurrentUserLibrary_2Call(ids, _callback);
        }


        /**
         * Execute saveCurrentUserLibrary_2 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show saved </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            saveCurrentUserLibrary_2WithHttpInfo(ids);
        }

        /**
         * Execute saveCurrentUserLibrary_2 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show saved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return saveCurrentUserLibrary_2WithHttpInfo(ids);
        }

        /**
         * Execute saveCurrentUserLibrary_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show saved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return saveCurrentUserLibrary_2Async(ids, _callback);
        }
    }

    /**
     * Save Shows for Current User 
     * Save one or more shows to current Spotify user&#39;s library. 
     * @param ids  (required)
     * @return SaveCurrentUserLibrary2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show saved </td><td>  -  </td></tr>
     </table>
     */
    public SaveCurrentUserLibrary2RequestBuilder saveCurrentUserLibrary_2(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new SaveCurrentUserLibrary2RequestBuilder(ids);
    }
    private okhttp3.Call saveForCurrentUserCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveForCurrentUserValidateBeforeCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling saveForCurrentUser(Async)");
        }

        return saveForCurrentUserCall(ids, requestBody, _callback);

    }


    private ApiResponse<Void> saveForCurrentUserWithHttpInfo(String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = saveForCurrentUserValidateBeforeCall(ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call saveForCurrentUserAsync(String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveForCurrentUserValidateBeforeCall(ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SaveForCurrentUserRequestBuilder {
        private final String ids;
        private List<String> ids;

        private SaveForCurrentUserRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set ids
         * @param ids A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: &#x60;[\\\&quot;4iV5W9uYEdYUVa79Axb7Rh\\\&quot;, \\\&quot;1301WleyT98MSxVHPZCA6M\\\&quot;]&#x60;&lt;br/&gt;A maximum of 50 items can be specified in one request. _**Note**: if the &#x60;ids&#x60; parameter is present in the query string, any IDs listed here in the body will be ignored._  (optional)
         * @return SaveForCurrentUserRequestBuilder
         */
        public SaveForCurrentUserRequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for saveForCurrentUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track saved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveForCurrentUserCall(ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute saveForCurrentUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track saved </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            saveForCurrentUserWithHttpInfo(ids, requestBody);
        }

        /**
         * Execute saveForCurrentUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track saved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveForCurrentUserWithHttpInfo(ids, requestBody);
        }

        /**
         * Execute saveForCurrentUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Track saved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return saveForCurrentUserAsync(ids, requestBody, _callback);
        }
    }

    /**
     * Save Tracks for Current User 
     * Save one or more tracks to the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return SaveForCurrentUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track saved </td><td>  -  </td></tr>
     </table>
     */
    public SaveForCurrentUserRequestBuilder saveForCurrentUser(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new SaveForCurrentUserRequestBuilder(ids);
    }
    private okhttp3.Call unfollowArtistsUsersCall(String type, String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unfollowArtistsUsersValidateBeforeCall(String type, String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling unfollowArtistsUsers(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling unfollowArtistsUsers(Async)");
        }

        return unfollowArtistsUsersCall(type, ids, requestBody, _callback);

    }


    private ApiResponse<Void> unfollowArtistsUsersWithHttpInfo(String type, String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = unfollowArtistsUsersValidateBeforeCall(type, ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unfollowArtistsUsersAsync(String type, String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unfollowArtistsUsersValidateBeforeCall(type, ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnfollowArtistsUsersRequestBuilder {
        private final String type;
        private final String ids;
        private List<String> ids;

        private UnfollowArtistsUsersRequestBuilder(String type, String ids) {
            this.type = type;
            this.ids = ids;
        }

        /**
         * Set ids
         * @param ids A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: &#x60;{ids:[\\\&quot;74ASZWbe4lXaubB36ztrGX\\\&quot;, \\\&quot;08td7MxkoHQkXnWAYD8d6Q\\\&quot;]}&#x60;. A maximum of 50 IDs can be sent in one request. _**Note**: if the &#x60;ids&#x60; parameter is present in the query string, any IDs listed here in the body will be ignored._  (optional)
         * @return UnfollowArtistsUsersRequestBuilder
         */
        public UnfollowArtistsUsersRequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for unfollowArtistsUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return unfollowArtistsUsersCall(type, ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute unfollowArtistsUsers request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            unfollowArtistsUsersWithHttpInfo(type, ids, requestBody);
        }

        /**
         * Execute unfollowArtistsUsers request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return unfollowArtistsUsersWithHttpInfo(type, ids, requestBody);
        }

        /**
         * Execute unfollowArtistsUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return unfollowArtistsUsersAsync(type, ids, requestBody, _callback);
        }
    }

    /**
     * Unfollow Artists or Users 
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @param type  (required)
     * @param ids  (required)
     * @return UnfollowArtistsUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
     </table>
     */
    public UnfollowArtistsUsersRequestBuilder unfollowArtistsUsers(String type, String ids) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new UnfollowArtistsUsersRequestBuilder(type, ids);
    }
    private okhttp3.Call updateDetailsCall(String playlistId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDetailsValidateBeforeCall(String playlistId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling updateDetails(Async)");
        }

        return updateDetailsCall(playlistId, requestBody, _callback);

    }


    private ApiResponse<Void> updateDetailsWithHttpInfo(String playlistId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(playlistId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateDetailsAsync(String playlistId, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(playlistId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateDetailsRequestBuilder {
        private final String playlistId;
        private String description;
        private String name;
        private Boolean _public;
        private Boolean collaborative;

        private UpdateDetailsRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set description
         * @param description Value for playlist description as displayed in Spotify Clients and in the Web API.  (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The new name for the playlist, for example &#x60;\\\&quot;My New Playlist Title\\\&quot;&#x60;  (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set _public
         * @param _public If &#x60;true&#x60; the playlist will be public, if &#x60;false&#x60; it will be private.  (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder _public(Boolean _public) {
            this._public = _public;
            return this;
        }
        
        /**
         * Set collaborative
         * @param collaborative If &#x60;true&#x60;, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. &lt;br/&gt; _**Note**: You can only set &#x60;collaborative&#x60; to &#x60;true&#x60; on non-public playlists._  (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder collaborative(Boolean collaborative) {
            this.collaborative = collaborative;
            return this;
        }
        
        /**
         * Build call for updateDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateDetailsCall(playlistId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("description", this.description);
            requestBody.put("name", this.name);
            requestBody.put("_public", this._public);
            requestBody.put("collaborative", this.collaborative);
            return requestBody;
        }

        /**
         * Execute updateDetails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist updated </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            updateDetailsWithHttpInfo(playlistId, requestBody);
        }

        /**
         * Execute updateDetails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateDetailsWithHttpInfo(playlistId, requestBody);
        }

        /**
         * Execute updateDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateDetailsAsync(playlistId, requestBody, _callback);
        }
    }

    /**
     * Change Playlist Details 
     * Change a playlist&#39;s name and public/private state. (The user must, of course, own the playlist.) 
     * @param playlistId  (required)
     * @return UpdateDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDetailsRequestBuilder updateDetails(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new UpdateDetailsRequestBuilder(playlistId);
    }
}
