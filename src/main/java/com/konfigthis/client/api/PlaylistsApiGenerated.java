/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ImageObject;
import com.konfigthis.client.model.PagingFeaturedPlaylistObject;
import com.konfigthis.client.model.PagingPlaylistObject;
import com.konfigthis.client.model.PagingPlaylistTrackObject;
import com.konfigthis.client.model.PlaylistObject;
import com.konfigthis.client.model.PlaylistsAddItemsRequest;
import com.konfigthis.client.model.PlaylistsCreatePlaylistRequest;
import com.konfigthis.client.model.PlaylistsRemoveItemsRequest;
import com.konfigthis.client.model.PlaylistsRemoveItemsRequestTracksInner;
import com.konfigthis.client.model.PlaylistsRemoveItemsResponse;
import com.konfigthis.client.model.PlaylistsUpdateDetailsRequest;
import com.konfigthis.client.model.PlaylistsUpdatePlaylistItemsRequest;
import com.konfigthis.client.model.UsersFollowPlaylistRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PlaylistsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlaylistsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PlaylistsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addItemsCall(String playlistId, Integer position, String uris, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addItemsValidateBeforeCall(String playlistId, Integer position, String uris, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling addItems(Async)");
        }

        return addItemsCall(playlistId, position, uris, requestBody, _callback);

    }


    private ApiResponse<PlaylistsRemoveItemsResponse> addItemsWithHttpInfo(String playlistId, Integer position, String uris, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = addItemsValidateBeforeCall(playlistId, position, uris, requestBody, null);
        Type localVarReturnType = new TypeToken<PlaylistsRemoveItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addItemsAsync(String playlistId, Integer position, String uris, Map<String, Object> requestBody, final ApiCallback<PlaylistsRemoveItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addItemsValidateBeforeCall(playlistId, position, uris, requestBody, _callback);
        Type localVarReturnType = new TypeToken<PlaylistsRemoveItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddItemsRequestBuilder {
        private final String playlistId;
        private List<String> uris;
        private Integer position;
        private Integer position;
        private String uris;

        private AddItemsRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set uris
         * @param uris A JSON array of the [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to add. For example: &#x60;{\\\&quot;uris\\\&quot;: [\\\&quot;spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\&quot;,\\\&quot;spotify:track:1301WleyT98MSxVHPZCA6M\\\&quot;, \\\&quot;spotify:episode:512ojhOuo1ktJprKbVcKyQ\\\&quot;]}&#x60;&lt;br/&gt;A maximum of 100 items can be added in one request. _**Note**: if the &#x60;uris&#x60; parameter is present in the query string, any URIs listed here in the body will be ignored._  (optional)
         * @return AddItemsRequestBuilder
         */
        public AddItemsRequestBuilder uris(List<String> uris) {
            this.uris = uris;
            return this;
        }
        
        /**
         * Set position
         * @param position The position to insert the items, a zero-based index. For example, to insert the items in the first position: &#x60;position&#x3D;0&#x60; ; to insert the items in the third position: &#x60;position&#x3D;2&#x60;. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: &#x60;{\\\&quot;uris\\\&quot;: [\\\&quot;spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\\&quot;,\\\&quot;spotify:track:1301WleyT98MSxVHPZCA6M\\\&quot;], \\\&quot;position\\\&quot;: 3}&#x60;  (optional)
         * @return AddItemsRequestBuilder
         */
        public AddItemsRequestBuilder position(Integer position) {
            this.position = position;
            return this;
        }
        
        /**
         * Set position
         * @param position  (optional)
         * @return AddItemsRequestBuilder
         */
        public AddItemsRequestBuilder position(Integer position) {
            this.position = position;
            return this;
        }
        
        /**
         * Set uris
         * @param uris  (optional)
         * @return AddItemsRequestBuilder
         */
        public AddItemsRequestBuilder uris(String uris) {
            this.uris = uris;
            return this;
        }
        
        /**
         * Build call for addItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addItemsCall(playlistId, position, uris, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("uris", this.uris);
            requestBody.put("position", this.position);
            return requestBody;
        }

        /**
         * Execute addItems request
         * @return PlaylistsRemoveItemsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public PlaylistsRemoveItemsResponse execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<PlaylistsRemoveItemsResponse> localVarResp = addItemsWithHttpInfo(playlistId, position, uris, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addItems request with HTTP info returned
         * @return ApiResponse&lt;PlaylistsRemoveItemsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlaylistsRemoveItemsResponse> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addItemsWithHttpInfo(playlistId, position, uris, requestBody);
        }

        /**
         * Execute addItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlaylistsRemoveItemsResponse> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addItemsAsync(playlistId, position, uris, requestBody, _callback);
        }
    }

    /**
     * Add Items to Playlist 
     * Add one or more items to a user&#39;s playlist. 
     * @param playlistId  (required)
     * @return AddItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
     </table>
     */
    public AddItemsRequestBuilder addItems(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new AddItemsRequestBuilder(playlistId);
    }
    private okhttp3.Call checkIfFollowsPlaylistCall(String playlistId, String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/followers/contains"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkIfFollowsPlaylistValidateBeforeCall(String playlistId, String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling checkIfFollowsPlaylist(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkIfFollowsPlaylist(Async)");
        }

        return checkIfFollowsPlaylistCall(playlistId, ids, _callback);

    }


    private ApiResponse<List<Boolean>> checkIfFollowsPlaylistWithHttpInfo(String playlistId, String ids) throws ApiException {
        okhttp3.Call localVarCall = checkIfFollowsPlaylistValidateBeforeCall(playlistId, ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkIfFollowsPlaylistAsync(String playlistId, String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkIfFollowsPlaylistValidateBeforeCall(playlistId, ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckIfFollowsPlaylistRequestBuilder {
        private final String playlistId;
        private final String ids;

        private CheckIfFollowsPlaylistRequestBuilder(String playlistId, String ids) {
            this.playlistId = playlistId;
            this.ids = ids;
        }

        /**
         * Build call for checkIfFollowsPlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkIfFollowsPlaylistCall(playlistId, ids, _callback);
        }


        /**
         * Execute checkIfFollowsPlaylist request
         * @return List&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public List<Boolean> execute() throws ApiException {
            ApiResponse<List<Boolean>> localVarResp = checkIfFollowsPlaylistWithHttpInfo(playlistId, ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkIfFollowsPlaylist request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Boolean>> executeWithHttpInfo() throws ApiException {
            return checkIfFollowsPlaylistWithHttpInfo(playlistId, ids);
        }

        /**
         * Execute checkIfFollowsPlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Boolean>> _callback) throws ApiException {
            return checkIfFollowsPlaylistAsync(playlistId, ids, _callback);
        }
    }

    /**
     * Check if Users Follow Playlist 
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @param playlistId  (required)
     * @param ids  (required)
     * @return CheckIfFollowsPlaylistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
     </table>
     */
    public CheckIfFollowsPlaylistRequestBuilder checkIfFollowsPlaylist(String playlistId, String ids) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new CheckIfFollowsPlaylistRequestBuilder(playlistId, ids);
    }
    private okhttp3.Call createPlaylistCall(String userId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/users/{user_id}/playlists"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPlaylistValidateBeforeCall(String userId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createPlaylist(Async)");
        }

        return createPlaylistCall(userId, requestBody, _callback);

    }


    private ApiResponse<PlaylistObject> createPlaylistWithHttpInfo(String userId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createPlaylistValidateBeforeCall(userId, requestBody, null);
        Type localVarReturnType = new TypeToken<PlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPlaylistAsync(String userId, Map<String, Object> requestBody, final ApiCallback<PlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPlaylistValidateBeforeCall(userId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<PlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePlaylistRequestBuilder {
        private final String name;
        private final String userId;
        private String description;
        private Boolean _public;
        private Boolean collaborative;

        private CreatePlaylistRequestBuilder(String name, String userId) {
            this.name = name;
            this.userId = userId;
        }

        /**
         * Set description
         * @param description value for playlist description as displayed in Spotify Clients and in the Web API.  (optional)
         * @return CreatePlaylistRequestBuilder
         */
        public CreatePlaylistRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set _public
         * @param _public Defaults to &#x60;true&#x60;. If &#x60;true&#x60; the playlist will be public, if &#x60;false&#x60; it will be private. To be able to create private playlists, the user must have granted the &#x60;playlist-modify-private&#x60; [scope](/documentation/web-api/concepts/scopes/#list-of-scopes)  (optional)
         * @return CreatePlaylistRequestBuilder
         */
        public CreatePlaylistRequestBuilder _public(Boolean _public) {
            this._public = _public;
            return this;
        }
        
        /**
         * Set collaborative
         * @param collaborative Defaults to &#x60;false&#x60;. If &#x60;true&#x60; the playlist will be collaborative. _**Note**: to create a collaborative playlist you must also set &#x60;public&#x60; to &#x60;false&#x60;. To create collaborative playlists you must have granted &#x60;playlist-modify-private&#x60; and &#x60;playlist-modify-public&#x60; [scopes](/documentation/web-api/concepts/scopes/#list-of-scopes)._  (optional)
         * @return CreatePlaylistRequestBuilder
         */
        public CreatePlaylistRequestBuilder collaborative(Boolean collaborative) {
            this.collaborative = collaborative;
            return this;
        }
        
        /**
         * Build call for createPlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createPlaylistCall(userId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("description", this.description);
            requestBody.put("name", this.name);
            requestBody.put("_public", this._public);
            requestBody.put("collaborative", this.collaborative);
            return requestBody;
        }

        /**
         * Execute createPlaylist request
         * @return PlaylistObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A playlist </td><td>  -  </td></tr>
         </table>
         */
        public PlaylistObject execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<PlaylistObject> localVarResp = createPlaylistWithHttpInfo(userId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPlaylist request with HTTP info returned
         * @return ApiResponse&lt;PlaylistObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A playlist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlaylistObject> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createPlaylistWithHttpInfo(userId, requestBody);
        }

        /**
         * Execute createPlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlaylistObject> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createPlaylistAsync(userId, requestBody, _callback);
        }
    }

    /**
     * Create Playlist 
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
     * @param userId  (required)
     * @return CreatePlaylistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A playlist </td><td>  -  </td></tr>
     </table>
     */
    public CreatePlaylistRequestBuilder createPlaylist(String name, String userId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new CreatePlaylistRequestBuilder(name, userId);
    }
    private okhttp3.Call followPlaylistCall(String playlistId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/followers"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followPlaylistValidateBeforeCall(String playlistId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling followPlaylist(Async)");
        }

        return followPlaylistCall(playlistId, requestBody, _callback);

    }


    private ApiResponse<Void> followPlaylistWithHttpInfo(String playlistId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = followPlaylistValidateBeforeCall(playlistId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call followPlaylistAsync(String playlistId, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followPlaylistValidateBeforeCall(playlistId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class FollowPlaylistRequestBuilder {
        private final String playlistId;
        private Boolean _public;

        private FollowPlaylistRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set _public
         * @param _public Defaults to &#x60;true&#x60;. If &#x60;true&#x60; the playlist will be included in user&#39;s public playlists, if &#x60;false&#x60; it will remain private.  (optional)
         * @return FollowPlaylistRequestBuilder
         */
        public FollowPlaylistRequestBuilder _public(Boolean _public) {
            this._public = _public;
            return this;
        }
        
        /**
         * Build call for followPlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist followed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followPlaylistCall(playlistId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("_public", this._public);
            return requestBody;
        }

        /**
         * Execute followPlaylist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist followed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            followPlaylistWithHttpInfo(playlistId, requestBody);
        }

        /**
         * Execute followPlaylist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist followed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followPlaylistWithHttpInfo(playlistId, requestBody);
        }

        /**
         * Execute followPlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist followed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followPlaylistAsync(playlistId, requestBody, _callback);
        }
    }

    /**
     * Follow Playlist 
     * Add the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @return FollowPlaylistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist followed </td><td>  -  </td></tr>
     </table>
     */
    public FollowPlaylistRequestBuilder followPlaylist(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new FollowPlaylistRequestBuilder(playlistId);
    }
    private okhttp3.Call getCategoryPlaylistsCall(String categoryId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browse/categories/{category_id}/playlists"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryPlaylistsValidateBeforeCall(String categoryId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getCategoryPlaylists(Async)");
        }

        return getCategoryPlaylistsCall(categoryId, limit, offset, _callback);

    }


    private ApiResponse<PagingFeaturedPlaylistObject> getCategoryPlaylistsWithHttpInfo(String categoryId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getCategoryPlaylistsValidateBeforeCall(categoryId, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingFeaturedPlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCategoryPlaylistsAsync(String categoryId, Integer limit, Integer offset, final ApiCallback<PagingFeaturedPlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryPlaylistsValidateBeforeCall(categoryId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingFeaturedPlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCategoryPlaylistsRequestBuilder {
        private final String categoryId;
        private Integer limit;
        private Integer offset;

        private GetCategoryPlaylistsRequestBuilder(String categoryId) {
            this.categoryId = categoryId;
        }

        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetCategoryPlaylistsRequestBuilder
         */
        public GetCategoryPlaylistsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetCategoryPlaylistsRequestBuilder
         */
        public GetCategoryPlaylistsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getCategoryPlaylists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCategoryPlaylistsCall(categoryId, limit, offset, _callback);
        }


        /**
         * Execute getCategoryPlaylists request
         * @return PagingFeaturedPlaylistObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public PagingFeaturedPlaylistObject execute() throws ApiException {
            ApiResponse<PagingFeaturedPlaylistObject> localVarResp = getCategoryPlaylistsWithHttpInfo(categoryId, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCategoryPlaylists request with HTTP info returned
         * @return ApiResponse&lt;PagingFeaturedPlaylistObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingFeaturedPlaylistObject> executeWithHttpInfo() throws ApiException {
            return getCategoryPlaylistsWithHttpInfo(categoryId, limit, offset);
        }

        /**
         * Execute getCategoryPlaylists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingFeaturedPlaylistObject> _callback) throws ApiException {
            return getCategoryPlaylistsAsync(categoryId, limit, offset, _callback);
        }
    }

    /**
     * Get Category&#39;s Playlists 
     * Get a list of Spotify playlists tagged with a particular category. 
     * @param categoryId  (required)
     * @return GetCategoryPlaylistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
     </table>
     */
    public GetCategoryPlaylistsRequestBuilder getCategoryPlaylists(String categoryId) throws IllegalArgumentException {
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new GetCategoryPlaylistsRequestBuilder(categoryId);
    }
    private okhttp3.Call getCoverImageCall(String playlistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/images"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverImageValidateBeforeCall(String playlistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getCoverImage(Async)");
        }

        return getCoverImageCall(playlistId, _callback);

    }


    private ApiResponse<List<ImageObject>> getCoverImageWithHttpInfo(String playlistId) throws ApiException {
        okhttp3.Call localVarCall = getCoverImageValidateBeforeCall(playlistId, null);
        Type localVarReturnType = new TypeToken<List<ImageObject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCoverImageAsync(String playlistId, final ApiCallback<List<ImageObject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCoverImageValidateBeforeCall(playlistId, _callback);
        Type localVarReturnType = new TypeToken<List<ImageObject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCoverImageRequestBuilder {
        private final String playlistId;

        private GetCoverImageRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Build call for getCoverImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of images </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCoverImageCall(playlistId, _callback);
        }


        /**
         * Execute getCoverImage request
         * @return List&lt;ImageObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of images </td><td>  -  </td></tr>
         </table>
         */
        public List<ImageObject> execute() throws ApiException {
            ApiResponse<List<ImageObject>> localVarResp = getCoverImageWithHttpInfo(playlistId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCoverImage request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ImageObject&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of images </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ImageObject>> executeWithHttpInfo() throws ApiException {
            return getCoverImageWithHttpInfo(playlistId);
        }

        /**
         * Execute getCoverImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of images </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ImageObject>> _callback) throws ApiException {
            return getCoverImageAsync(playlistId, _callback);
        }
    }

    /**
     * Get Playlist Cover Image 
     * Get the current image associated with a specific playlist. 
     * @param playlistId  (required)
     * @return GetCoverImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of images </td><td>  -  </td></tr>
     </table>
     */
    public GetCoverImageRequestBuilder getCoverImage(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new GetCoverImageRequestBuilder(playlistId);
    }
    private okhttp3.Call getFeaturedCall(String locale, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browse/featured-playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeaturedValidateBeforeCall(String locale, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getFeaturedCall(locale, limit, offset, _callback);

    }


    private ApiResponse<PagingFeaturedPlaylistObject> getFeaturedWithHttpInfo(String locale, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getFeaturedValidateBeforeCall(locale, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingFeaturedPlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeaturedAsync(String locale, Integer limit, Integer offset, final ApiCallback<PagingFeaturedPlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeaturedValidateBeforeCall(locale, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingFeaturedPlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFeaturedRequestBuilder {
        private String locale;
        private Integer limit;
        private Integer offset;

        private GetFeaturedRequestBuilder() {
        }

        /**
         * Set locale
         * @param locale  (optional)
         * @return GetFeaturedRequestBuilder
         */
        public GetFeaturedRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetFeaturedRequestBuilder
         */
        public GetFeaturedRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetFeaturedRequestBuilder
         */
        public GetFeaturedRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getFeatured
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeaturedCall(locale, limit, offset, _callback);
        }


        /**
         * Execute getFeatured request
         * @return PagingFeaturedPlaylistObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public PagingFeaturedPlaylistObject execute() throws ApiException {
            ApiResponse<PagingFeaturedPlaylistObject> localVarResp = getFeaturedWithHttpInfo(locale, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFeatured request with HTTP info returned
         * @return ApiResponse&lt;PagingFeaturedPlaylistObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingFeaturedPlaylistObject> executeWithHttpInfo() throws ApiException {
            return getFeaturedWithHttpInfo(locale, limit, offset);
        }

        /**
         * Execute getFeatured request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingFeaturedPlaylistObject> _callback) throws ApiException {
            return getFeaturedAsync(locale, limit, offset, _callback);
        }
    }

    /**
     * Get Featured Playlists 
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player&#39;s &#39;Browse&#39; tab). 
     * @return GetFeaturedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
     </table>
     */
    public GetFeaturedRequestBuilder getFeatured() throws IllegalArgumentException {
        return new GetFeaturedRequestBuilder();
    }
    private okhttp3.Call getPlaylistByIdCall(String playlistId, String market, String fields, String additionalTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (additionalTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("additional_types", additionalTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaylistByIdValidateBeforeCall(String playlistId, String market, String fields, String additionalTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getPlaylistById(Async)");
        }

        return getPlaylistByIdCall(playlistId, market, fields, additionalTypes, _callback);

    }


    private ApiResponse<PlaylistObject> getPlaylistByIdWithHttpInfo(String playlistId, String market, String fields, String additionalTypes) throws ApiException {
        okhttp3.Call localVarCall = getPlaylistByIdValidateBeforeCall(playlistId, market, fields, additionalTypes, null);
        Type localVarReturnType = new TypeToken<PlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPlaylistByIdAsync(String playlistId, String market, String fields, String additionalTypes, final ApiCallback<PlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaylistByIdValidateBeforeCall(playlistId, market, fields, additionalTypes, _callback);
        Type localVarReturnType = new TypeToken<PlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPlaylistByIdRequestBuilder {
        private final String playlistId;
        private String market;
        private String fields;
        private String additionalTypes;

        private GetPlaylistByIdRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetPlaylistByIdRequestBuilder
         */
        public GetPlaylistByIdRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set fields
         * @param fields  (optional)
         * @return GetPlaylistByIdRequestBuilder
         */
        public GetPlaylistByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set additionalTypes
         * @param additionalTypes  (optional)
         * @return GetPlaylistByIdRequestBuilder
         */
        public GetPlaylistByIdRequestBuilder additionalTypes(String additionalTypes) {
            this.additionalTypes = additionalTypes;
            return this;
        }
        
        /**
         * Build call for getPlaylistById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPlaylistByIdCall(playlistId, market, fields, additionalTypes, _callback);
        }


        /**
         * Execute getPlaylistById request
         * @return PlaylistObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A playlist </td><td>  -  </td></tr>
         </table>
         */
        public PlaylistObject execute() throws ApiException {
            ApiResponse<PlaylistObject> localVarResp = getPlaylistByIdWithHttpInfo(playlistId, market, fields, additionalTypes);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPlaylistById request with HTTP info returned
         * @return ApiResponse&lt;PlaylistObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A playlist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlaylistObject> executeWithHttpInfo() throws ApiException {
            return getPlaylistByIdWithHttpInfo(playlistId, market, fields, additionalTypes);
        }

        /**
         * Execute getPlaylistById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlaylistObject> _callback) throws ApiException {
            return getPlaylistByIdAsync(playlistId, market, fields, additionalTypes, _callback);
        }
    }

    /**
     * Get Playlist 
     * Get a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @return GetPlaylistByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A playlist </td><td>  -  </td></tr>
     </table>
     */
    public GetPlaylistByIdRequestBuilder getPlaylistById(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new GetPlaylistByIdRequestBuilder(playlistId);
    }
    private okhttp3.Call getPlaylistItemsCall(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (additionalTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("additional_types", additionalTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaylistItemsValidateBeforeCall(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getPlaylistItems(Async)");
        }

        return getPlaylistItemsCall(playlistId, market, fields, limit, offset, additionalTypes, _callback);

    }


    private ApiResponse<PagingPlaylistTrackObject> getPlaylistItemsWithHttpInfo(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes) throws ApiException {
        okhttp3.Call localVarCall = getPlaylistItemsValidateBeforeCall(playlistId, market, fields, limit, offset, additionalTypes, null);
        Type localVarReturnType = new TypeToken<PagingPlaylistTrackObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPlaylistItemsAsync(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ApiCallback<PagingPlaylistTrackObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaylistItemsValidateBeforeCall(playlistId, market, fields, limit, offset, additionalTypes, _callback);
        Type localVarReturnType = new TypeToken<PagingPlaylistTrackObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPlaylistItemsRequestBuilder {
        private final String playlistId;
        private String market;
        private String fields;
        private Integer limit;
        private Integer offset;
        private String additionalTypes;

        private GetPlaylistItemsRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetPlaylistItemsRequestBuilder
         */
        public GetPlaylistItemsRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set fields
         * @param fields  (optional)
         * @return GetPlaylistItemsRequestBuilder
         */
        public GetPlaylistItemsRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetPlaylistItemsRequestBuilder
         */
        public GetPlaylistItemsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetPlaylistItemsRequestBuilder
         */
        public GetPlaylistItemsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set additionalTypes
         * @param additionalTypes  (optional)
         * @return GetPlaylistItemsRequestBuilder
         */
        public GetPlaylistItemsRequestBuilder additionalTypes(String additionalTypes) {
            this.additionalTypes = additionalTypes;
            return this;
        }
        
        /**
         * Build call for getPlaylistItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPlaylistItemsCall(playlistId, market, fields, limit, offset, additionalTypes, _callback);
        }


        /**
         * Execute getPlaylistItems request
         * @return PagingPlaylistTrackObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public PagingPlaylistTrackObject execute() throws ApiException {
            ApiResponse<PagingPlaylistTrackObject> localVarResp = getPlaylistItemsWithHttpInfo(playlistId, market, fields, limit, offset, additionalTypes);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPlaylistItems request with HTTP info returned
         * @return ApiResponse&lt;PagingPlaylistTrackObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingPlaylistTrackObject> executeWithHttpInfo() throws ApiException {
            return getPlaylistItemsWithHttpInfo(playlistId, market, fields, limit, offset, additionalTypes);
        }

        /**
         * Execute getPlaylistItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingPlaylistTrackObject> _callback) throws ApiException {
            return getPlaylistItemsAsync(playlistId, market, fields, limit, offset, additionalTypes, _callback);
        }
    }

    /**
     * Get Playlist Items 
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @return GetPlaylistItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
     </table>
     */
    public GetPlaylistItemsRequestBuilder getPlaylistItems(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new GetPlaylistItemsRequestBuilder(playlistId);
    }
    private okhttp3.Call getUserPlaylistsCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPlaylistsValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getUserPlaylistsCall(limit, offset, _callback);

    }


    private ApiResponse<PagingPlaylistObject> getUserPlaylistsWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getUserPlaylistsValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserPlaylistsAsync(Integer limit, Integer offset, final ApiCallback<PagingPlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPlaylistsValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserPlaylistsRequestBuilder {
        private Integer limit;
        private Integer offset;

        private GetUserPlaylistsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetUserPlaylistsRequestBuilder
         */
        public GetUserPlaylistsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetUserPlaylistsRequestBuilder
         */
        public GetUserPlaylistsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getUserPlaylists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserPlaylistsCall(limit, offset, _callback);
        }


        /**
         * Execute getUserPlaylists request
         * @return PagingPlaylistObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public PagingPlaylistObject execute() throws ApiException {
            ApiResponse<PagingPlaylistObject> localVarResp = getUserPlaylistsWithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserPlaylists request with HTTP info returned
         * @return ApiResponse&lt;PagingPlaylistObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingPlaylistObject> executeWithHttpInfo() throws ApiException {
            return getUserPlaylistsWithHttpInfo(limit, offset);
        }

        /**
         * Execute getUserPlaylists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingPlaylistObject> _callback) throws ApiException {
            return getUserPlaylistsAsync(limit, offset, _callback);
        }
    }

    /**
     * Get Current User&#39;s Playlists 
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @return GetUserPlaylistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
     </table>
     */
    public GetUserPlaylistsRequestBuilder getUserPlaylists() throws IllegalArgumentException {
        return new GetUserPlaylistsRequestBuilder();
    }
    private okhttp3.Call getUserPlaylists_0Call(String userId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/playlists"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPlaylists_0ValidateBeforeCall(String userId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserPlaylists_0(Async)");
        }

        return getUserPlaylists_0Call(userId, limit, offset, _callback);

    }


    private ApiResponse<PagingPlaylistObject> getUserPlaylists_0WithHttpInfo(String userId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getUserPlaylists_0ValidateBeforeCall(userId, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserPlaylists_0Async(String userId, Integer limit, Integer offset, final ApiCallback<PagingPlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPlaylists_0ValidateBeforeCall(userId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserPlaylists0RequestBuilder {
        private final String userId;
        private Integer limit;
        private Integer offset;

        private GetUserPlaylists0RequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetUserPlaylists0RequestBuilder
         */
        public GetUserPlaylists0RequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetUserPlaylists0RequestBuilder
         */
        public GetUserPlaylists0RequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getUserPlaylists_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserPlaylists_0Call(userId, limit, offset, _callback);
        }


        /**
         * Execute getUserPlaylists_0 request
         * @return PagingPlaylistObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public PagingPlaylistObject execute() throws ApiException {
            ApiResponse<PagingPlaylistObject> localVarResp = getUserPlaylists_0WithHttpInfo(userId, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserPlaylists_0 request with HTTP info returned
         * @return ApiResponse&lt;PagingPlaylistObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingPlaylistObject> executeWithHttpInfo() throws ApiException {
            return getUserPlaylists_0WithHttpInfo(userId, limit, offset);
        }

        /**
         * Execute getUserPlaylists_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingPlaylistObject> _callback) throws ApiException {
            return getUserPlaylists_0Async(userId, limit, offset, _callback);
        }
    }

    /**
     * Get User&#39;s Playlists 
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @param userId  (required)
     * @return GetUserPlaylists0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
     </table>
     */
    public GetUserPlaylists0RequestBuilder getUserPlaylists_0(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetUserPlaylists0RequestBuilder(userId);
    }
    private okhttp3.Call removeItemsCall(String playlistId, PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = playlistsRemoveItemsRequest;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeItemsValidateBeforeCall(String playlistId, PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling removeItems(Async)");
        }

        return removeItemsCall(playlistId, playlistsRemoveItemsRequest, _callback);

    }


    private ApiResponse<PlaylistsRemoveItemsResponse> removeItemsWithHttpInfo(String playlistId, PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest) throws ApiException {
        okhttp3.Call localVarCall = removeItemsValidateBeforeCall(playlistId, playlistsRemoveItemsRequest, null);
        Type localVarReturnType = new TypeToken<PlaylistsRemoveItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeItemsAsync(String playlistId, PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest, final ApiCallback<PlaylistsRemoveItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeItemsValidateBeforeCall(playlistId, playlistsRemoveItemsRequest, _callback);
        Type localVarReturnType = new TypeToken<PlaylistsRemoveItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveItemsRequestBuilder {
        private final List<PlaylistsRemoveItemsRequestTracksInner> tracks;
        private final String playlistId;
        private String snapshotId;

        private RemoveItemsRequestBuilder(List<PlaylistsRemoveItemsRequestTracksInner> tracks, String playlistId) {
            this.tracks = tracks;
            this.playlistId = playlistId;
        }

        /**
         * Set snapshotId
         * @param snapshotId The playlist&#39;s snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.  (optional)
         * @return RemoveItemsRequestBuilder
         */
        public RemoveItemsRequestBuilder snapshotId(String snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }
        
        /**
         * Build call for removeItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest = buildBodyParams();
            return removeItemsCall(playlistId, playlistsRemoveItemsRequest, _callback);
        }

        private PlaylistsRemoveItemsRequest buildBodyParams() {
            PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest = new PlaylistsRemoveItemsRequest();
            playlistsRemoveItemsRequest.tracks(this.tracks);
            playlistsRemoveItemsRequest.snapshotId(this.snapshotId);
            return playlistsRemoveItemsRequest;
        }

        /**
         * Execute removeItems request
         * @return PlaylistsRemoveItemsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public PlaylistsRemoveItemsResponse execute() throws ApiException {
            PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest = buildBodyParams();
            ApiResponse<PlaylistsRemoveItemsResponse> localVarResp = removeItemsWithHttpInfo(playlistId, playlistsRemoveItemsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeItems request with HTTP info returned
         * @return ApiResponse&lt;PlaylistsRemoveItemsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlaylistsRemoveItemsResponse> executeWithHttpInfo() throws ApiException {
            PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest = buildBodyParams();
            return removeItemsWithHttpInfo(playlistId, playlistsRemoveItemsRequest);
        }

        /**
         * Execute removeItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlaylistsRemoveItemsResponse> _callback) throws ApiException {
            PlaylistsRemoveItemsRequest playlistsRemoveItemsRequest = buildBodyParams();
            return removeItemsAsync(playlistId, playlistsRemoveItemsRequest, _callback);
        }
    }

    /**
     * Remove Playlist Items 
     * Remove one or more items from a user&#39;s playlist. 
     * @param playlistId  (required)
     * @return RemoveItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
     </table>
     */
    public RemoveItemsRequestBuilder removeItems(List<PlaylistsRemoveItemsRequestTracksInner> tracks, String playlistId) throws IllegalArgumentException {
        if (tracks == null) throw new IllegalArgumentException("\"tracks\" is required but got null");
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new RemoveItemsRequestBuilder(tracks, playlistId);
    }
    private okhttp3.Call replaceCoverImageCall(String playlistId, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/images"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "image/jpeg"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceCoverImageValidateBeforeCall(String playlistId, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling replaceCoverImage(Async)");
        }

        return replaceCoverImageCall(playlistId, body, _callback);

    }


    private ApiResponse<Void> replaceCoverImageWithHttpInfo(String playlistId, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = replaceCoverImageValidateBeforeCall(playlistId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call replaceCoverImageAsync(String playlistId, byte[] body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceCoverImageValidateBeforeCall(playlistId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReplaceCoverImageRequestBuilder {
        private final String playlistId;
        private byte[] body;

        private ReplaceCoverImageRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return ReplaceCoverImageRequestBuilder
         */
        public ReplaceCoverImageRequestBuilder body(byte[] body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for replaceCoverImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Image uploaded </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            byte[] body = buildBodyParams();
            return replaceCoverImageCall(playlistId, body, _callback);
        }

        private byte[] buildBodyParams() {
            return this.body;
        }

        /**
         * Execute replaceCoverImage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Image uploaded </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            byte[] body = buildBodyParams();
            replaceCoverImageWithHttpInfo(playlistId, body);
        }

        /**
         * Execute replaceCoverImage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Image uploaded </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            byte[] body = buildBodyParams();
            return replaceCoverImageWithHttpInfo(playlistId, body);
        }

        /**
         * Execute replaceCoverImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Image uploaded </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            byte[] body = buildBodyParams();
            return replaceCoverImageAsync(playlistId, body, _callback);
        }
    }

    /**
     * Add Custom Playlist Cover Image 
     * Replace the image used to represent a specific playlist. 
     * @param playlistId  (required)
     * @return ReplaceCoverImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Image uploaded </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceCoverImageRequestBuilder replaceCoverImage(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new ReplaceCoverImageRequestBuilder(playlistId);
    }
    private okhttp3.Call unfollowPlaylistCall(String playlistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/followers"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unfollowPlaylistValidateBeforeCall(String playlistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling unfollowPlaylist(Async)");
        }

        return unfollowPlaylistCall(playlistId, _callback);

    }


    private ApiResponse<Void> unfollowPlaylistWithHttpInfo(String playlistId) throws ApiException {
        okhttp3.Call localVarCall = unfollowPlaylistValidateBeforeCall(playlistId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unfollowPlaylistAsync(String playlistId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unfollowPlaylistValidateBeforeCall(playlistId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnfollowPlaylistRequestBuilder {
        private final String playlistId;

        private UnfollowPlaylistRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Build call for unfollowPlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unfollowPlaylistCall(playlistId, _callback);
        }


        /**
         * Execute unfollowPlaylist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unfollowPlaylistWithHttpInfo(playlistId);
        }

        /**
         * Execute unfollowPlaylist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unfollowPlaylistWithHttpInfo(playlistId);
        }

        /**
         * Execute unfollowPlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unfollowPlaylistAsync(playlistId, _callback);
        }
    }

    /**
     * Unfollow Playlist 
     * Remove the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @return UnfollowPlaylistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist unfollowed </td><td>  -  </td></tr>
     </table>
     */
    public UnfollowPlaylistRequestBuilder unfollowPlaylist(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new UnfollowPlaylistRequestBuilder(playlistId);
    }
    private okhttp3.Call updateDetailsCall(String playlistId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDetailsValidateBeforeCall(String playlistId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling updateDetails(Async)");
        }

        return updateDetailsCall(playlistId, requestBody, _callback);

    }


    private ApiResponse<Void> updateDetailsWithHttpInfo(String playlistId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(playlistId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateDetailsAsync(String playlistId, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(playlistId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateDetailsRequestBuilder {
        private final String playlistId;
        private String description;
        private String name;
        private Boolean _public;
        private Boolean collaborative;

        private UpdateDetailsRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set description
         * @param description Value for playlist description as displayed in Spotify Clients and in the Web API.  (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The new name for the playlist, for example &#x60;\\\&quot;My New Playlist Title\\\&quot;&#x60;  (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set _public
         * @param _public If &#x60;true&#x60; the playlist will be public, if &#x60;false&#x60; it will be private.  (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder _public(Boolean _public) {
            this._public = _public;
            return this;
        }
        
        /**
         * Set collaborative
         * @param collaborative If &#x60;true&#x60;, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. &lt;br/&gt; _**Note**: You can only set &#x60;collaborative&#x60; to &#x60;true&#x60; on non-public playlists._  (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder collaborative(Boolean collaborative) {
            this.collaborative = collaborative;
            return this;
        }
        
        /**
         * Build call for updateDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateDetailsCall(playlistId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("description", this.description);
            requestBody.put("name", this.name);
            requestBody.put("_public", this._public);
            requestBody.put("collaborative", this.collaborative);
            return requestBody;
        }

        /**
         * Execute updateDetails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist updated </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            updateDetailsWithHttpInfo(playlistId, requestBody);
        }

        /**
         * Execute updateDetails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateDetailsWithHttpInfo(playlistId, requestBody);
        }

        /**
         * Execute updateDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateDetailsAsync(playlistId, requestBody, _callback);
        }
    }

    /**
     * Change Playlist Details 
     * Change a playlist&#39;s name and public/private state. (The user must, of course, own the playlist.) 
     * @param playlistId  (required)
     * @return UpdateDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDetailsRequestBuilder updateDetails(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new UpdateDetailsRequestBuilder(playlistId);
    }
    private okhttp3.Call updatePlaylistItemsCall(String playlistId, String uris, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlaylistItemsValidateBeforeCall(String playlistId, String uris, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling updatePlaylistItems(Async)");
        }

        return updatePlaylistItemsCall(playlistId, uris, requestBody, _callback);

    }


    private ApiResponse<PlaylistsRemoveItemsResponse> updatePlaylistItemsWithHttpInfo(String playlistId, String uris, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updatePlaylistItemsValidateBeforeCall(playlistId, uris, requestBody, null);
        Type localVarReturnType = new TypeToken<PlaylistsRemoveItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePlaylistItemsAsync(String playlistId, String uris, Map<String, Object> requestBody, final ApiCallback<PlaylistsRemoveItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlaylistItemsValidateBeforeCall(playlistId, uris, requestBody, _callback);
        Type localVarReturnType = new TypeToken<PlaylistsRemoveItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePlaylistItemsRequestBuilder {
        private final String playlistId;
        private List<String> uris;
        private Integer rangeStart;
        private Integer insertBefore;
        private Integer rangeLength;
        private String snapshotId;
        private String uris;

        private UpdatePlaylistItemsRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set uris
         * @param uris  (optional)
         * @return UpdatePlaylistItemsRequestBuilder
         */
        public UpdatePlaylistItemsRequestBuilder uris(List<String> uris) {
            this.uris = uris;
            return this;
        }
        
        /**
         * Set rangeStart
         * @param rangeStart The position of the first item to be reordered.  (optional)
         * @return UpdatePlaylistItemsRequestBuilder
         */
        public UpdatePlaylistItemsRequestBuilder rangeStart(Integer rangeStart) {
            this.rangeStart = rangeStart;
            return this;
        }
        
        /**
         * Set insertBefore
         * @param insertBefore The position where the items should be inserted.&lt;br/&gt;To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.&lt;br/&gt;Examples:&lt;br/&gt;To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.&lt;br/&gt;To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0.  (optional)
         * @return UpdatePlaylistItemsRequestBuilder
         */
        public UpdatePlaylistItemsRequestBuilder insertBefore(Integer insertBefore) {
            this.insertBefore = insertBefore;
            return this;
        }
        
        /**
         * Set rangeLength
         * @param rangeLength The amount of items to be reordered. Defaults to 1 if not set.&lt;br/&gt;The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.&lt;br/&gt;Example:&lt;br/&gt;To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2.  (optional)
         * @return UpdatePlaylistItemsRequestBuilder
         */
        public UpdatePlaylistItemsRequestBuilder rangeLength(Integer rangeLength) {
            this.rangeLength = rangeLength;
            return this;
        }
        
        /**
         * Set snapshotId
         * @param snapshotId The playlist&#39;s snapshot ID against which you want to make the changes.  (optional)
         * @return UpdatePlaylistItemsRequestBuilder
         */
        public UpdatePlaylistItemsRequestBuilder snapshotId(String snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }
        
        /**
         * Set uris
         * @param uris  (optional)
         * @return UpdatePlaylistItemsRequestBuilder
         */
        public UpdatePlaylistItemsRequestBuilder uris(String uris) {
            this.uris = uris;
            return this;
        }
        
        /**
         * Build call for updatePlaylistItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updatePlaylistItemsCall(playlistId, uris, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("uris", this.uris);
            requestBody.put("rangeStart", this.rangeStart);
            requestBody.put("insertBefore", this.insertBefore);
            requestBody.put("rangeLength", this.rangeLength);
            requestBody.put("snapshotId", this.snapshotId);
            return requestBody;
        }

        /**
         * Execute updatePlaylistItems request
         * @return PlaylistsRemoveItemsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public PlaylistsRemoveItemsResponse execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<PlaylistsRemoveItemsResponse> localVarResp = updatePlaylistItemsWithHttpInfo(playlistId, uris, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePlaylistItems request with HTTP info returned
         * @return ApiResponse&lt;PlaylistsRemoveItemsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlaylistsRemoveItemsResponse> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updatePlaylistItemsWithHttpInfo(playlistId, uris, requestBody);
        }

        /**
         * Execute updatePlaylistItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlaylistsRemoveItemsResponse> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updatePlaylistItemsAsync(playlistId, uris, requestBody, _callback);
        }
    }

    /**
     * Update Playlist Items 
     * Either reorder or replace items in a playlist depending on the request&#39;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#39;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#39;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#39;t be applied together in a single request. 
     * @param playlistId  (required)
     * @return UpdatePlaylistItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot ID for the playlist </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePlaylistItemsRequestBuilder updatePlaylistItems(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new UpdatePlaylistItemsRequestBuilder(playlistId);
    }
}
