/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.SearchSpotifyCatalogInfoResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SearchApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call spotifyCatalogInfoCall(String q, List<String> type, String market, Integer limit, Integer offset, String includeExternal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "type", type));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (includeExternal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_external", includeExternal));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spotifyCatalogInfoValidateBeforeCall(String q, List<String> type, String market, Integer limit, Integer offset, String includeExternal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling spotifyCatalogInfo(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling spotifyCatalogInfo(Async)");
        }

        return spotifyCatalogInfoCall(q, type, market, limit, offset, includeExternal, _callback);

    }


    private ApiResponse<SearchSpotifyCatalogInfoResponse> spotifyCatalogInfoWithHttpInfo(String q, List<String> type, String market, Integer limit, Integer offset, String includeExternal) throws ApiException {
        okhttp3.Call localVarCall = spotifyCatalogInfoValidateBeforeCall(q, type, market, limit, offset, includeExternal, null);
        Type localVarReturnType = new TypeToken<SearchSpotifyCatalogInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call spotifyCatalogInfoAsync(String q, List<String> type, String market, Integer limit, Integer offset, String includeExternal, final ApiCallback<SearchSpotifyCatalogInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = spotifyCatalogInfoValidateBeforeCall(q, type, market, limit, offset, includeExternal, _callback);
        Type localVarReturnType = new TypeToken<SearchSpotifyCatalogInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SpotifyCatalogInfoRequestBuilder {
        private final String q;
        private final List<String> type;
        private String market;
        private Integer limit;
        private Integer offset;
        private String includeExternal;

        private SpotifyCatalogInfoRequestBuilder(String q, List<String> type) {
            this.q = q;
            this.type = type;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return SpotifyCatalogInfoRequestBuilder
         */
        public SpotifyCatalogInfoRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return SpotifyCatalogInfoRequestBuilder
         */
        public SpotifyCatalogInfoRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return SpotifyCatalogInfoRequestBuilder
         */
        public SpotifyCatalogInfoRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set includeExternal
         * @param includeExternal  (optional)
         * @return SpotifyCatalogInfoRequestBuilder
         */
        public SpotifyCatalogInfoRequestBuilder includeExternal(String includeExternal) {
            this.includeExternal = includeExternal;
            return this;
        }
        
        /**
         * Build call for spotifyCatalogInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Search response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return spotifyCatalogInfoCall(q, type, market, limit, offset, includeExternal, _callback);
        }


        /**
         * Execute spotifyCatalogInfo request
         * @return SearchSpotifyCatalogInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Search response </td><td>  -  </td></tr>
         </table>
         */
        public SearchSpotifyCatalogInfoResponse execute() throws ApiException {
            ApiResponse<SearchSpotifyCatalogInfoResponse> localVarResp = spotifyCatalogInfoWithHttpInfo(q, type, market, limit, offset, includeExternal);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute spotifyCatalogInfo request with HTTP info returned
         * @return ApiResponse&lt;SearchSpotifyCatalogInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Search response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SearchSpotifyCatalogInfoResponse> executeWithHttpInfo() throws ApiException {
            return spotifyCatalogInfoWithHttpInfo(q, type, market, limit, offset, includeExternal);
        }

        /**
         * Execute spotifyCatalogInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Search response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SearchSpotifyCatalogInfoResponse> _callback) throws ApiException {
            return spotifyCatalogInfoAsync(q, type, market, limit, offset, includeExternal, _callback);
        }
    }

    /**
     * Search for Item 
     * Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks that match a keyword string. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @param q  (required)
     * @param type  (required)
     * @return SpotifyCatalogInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search response </td><td>  -  </td></tr>
     </table>
     */
    public SpotifyCatalogInfoRequestBuilder spotifyCatalogInfo(String q, List<String> type) throws IllegalArgumentException {
        if (q == null) throw new IllegalArgumentException("\"q\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
        return new SpotifyCatalogInfoRequestBuilder(q, type);
    }
}
