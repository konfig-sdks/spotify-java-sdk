/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PagingPlaylistObject;
import com.konfigthis.client.model.PrivateUserObject;
import com.konfigthis.client.model.PublicUserObject;
import com.konfigthis.client.model.UsersFollowArtistsOrUsersRequest;
import com.konfigthis.client.model.UsersFollowPlaylistRequest;
import com.konfigthis.client.model.UsersGetFollowedArtistsResponse;
import com.konfigthis.client.model.UsersGetTopItemsResponse;
import com.konfigthis.client.model.UsersUnfollowArtistsUsersRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkFollowingArtistsUsersCall(String type, String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/following/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkFollowingArtistsUsersValidateBeforeCall(String type, String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling checkFollowingArtistsUsers(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkFollowingArtistsUsers(Async)");
        }

        return checkFollowingArtistsUsersCall(type, ids, _callback);

    }


    private ApiResponse<List<Boolean>> checkFollowingArtistsUsersWithHttpInfo(String type, String ids) throws ApiException {
        okhttp3.Call localVarCall = checkFollowingArtistsUsersValidateBeforeCall(type, ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkFollowingArtistsUsersAsync(String type, String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkFollowingArtistsUsersValidateBeforeCall(type, ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckFollowingArtistsUsersRequestBuilder {
        private final String type;
        private final String ids;

        private CheckFollowingArtistsUsersRequestBuilder(String type, String ids) {
            this.type = type;
            this.ids = ids;
        }

        /**
         * Build call for checkFollowingArtistsUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkFollowingArtistsUsersCall(type, ids, _callback);
        }


        /**
         * Execute checkFollowingArtistsUsers request
         * @return List&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public List<Boolean> execute() throws ApiException {
            ApiResponse<List<Boolean>> localVarResp = checkFollowingArtistsUsersWithHttpInfo(type, ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkFollowingArtistsUsers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Boolean>> executeWithHttpInfo() throws ApiException {
            return checkFollowingArtistsUsersWithHttpInfo(type, ids);
        }

        /**
         * Execute checkFollowingArtistsUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Boolean>> _callback) throws ApiException {
            return checkFollowingArtistsUsersAsync(type, ids, _callback);
        }
    }

    /**
     * Check If User Follows Artists or Users 
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @param type  (required)
     * @param ids  (required)
     * @return CheckFollowingArtistsUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
     </table>
     */
    public CheckFollowingArtistsUsersRequestBuilder checkFollowingArtistsUsers(String type, String ids) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new CheckFollowingArtistsUsersRequestBuilder(type, ids);
    }
    private okhttp3.Call checkIfFollowsPlaylistCall(String playlistId, String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/followers/contains"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkIfFollowsPlaylistValidateBeforeCall(String playlistId, String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling checkIfFollowsPlaylist(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkIfFollowsPlaylist(Async)");
        }

        return checkIfFollowsPlaylistCall(playlistId, ids, _callback);

    }


    private ApiResponse<List<Boolean>> checkIfFollowsPlaylistWithHttpInfo(String playlistId, String ids) throws ApiException {
        okhttp3.Call localVarCall = checkIfFollowsPlaylistValidateBeforeCall(playlistId, ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkIfFollowsPlaylistAsync(String playlistId, String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkIfFollowsPlaylistValidateBeforeCall(playlistId, ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckIfFollowsPlaylistRequestBuilder {
        private final String playlistId;
        private final String ids;

        private CheckIfFollowsPlaylistRequestBuilder(String playlistId, String ids) {
            this.playlistId = playlistId;
            this.ids = ids;
        }

        /**
         * Build call for checkIfFollowsPlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkIfFollowsPlaylistCall(playlistId, ids, _callback);
        }


        /**
         * Execute checkIfFollowsPlaylist request
         * @return List&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public List<Boolean> execute() throws ApiException {
            ApiResponse<List<Boolean>> localVarResp = checkIfFollowsPlaylistWithHttpInfo(playlistId, ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkIfFollowsPlaylist request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Boolean>> executeWithHttpInfo() throws ApiException {
            return checkIfFollowsPlaylistWithHttpInfo(playlistId, ids);
        }

        /**
         * Execute checkIfFollowsPlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Boolean>> _callback) throws ApiException {
            return checkIfFollowsPlaylistAsync(playlistId, ids, _callback);
        }
    }

    /**
     * Check if Users Follow Playlist 
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @param playlistId  (required)
     * @param ids  (required)
     * @return CheckIfFollowsPlaylistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
     </table>
     */
    public CheckIfFollowsPlaylistRequestBuilder checkIfFollowsPlaylist(String playlistId, String ids) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new CheckIfFollowsPlaylistRequestBuilder(playlistId, ids);
    }
    private okhttp3.Call followArtistsOrUsersCall(String type, String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followArtistsOrUsersValidateBeforeCall(String type, String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling followArtistsOrUsers(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling followArtistsOrUsers(Async)");
        }

        return followArtistsOrUsersCall(type, ids, requestBody, _callback);

    }


    private ApiResponse<Void> followArtistsOrUsersWithHttpInfo(String type, String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = followArtistsOrUsersValidateBeforeCall(type, ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call followArtistsOrUsersAsync(String type, String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followArtistsOrUsersValidateBeforeCall(type, ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class FollowArtistsOrUsersRequestBuilder {
        private final List<String> ids;
        private final String type;
        private final String ids;

        private FollowArtistsOrUsersRequestBuilder(List<String> ids, String type, String ids) {
            this.ids = ids;
            this.type = type;
            this.ids = ids;
        }

        /**
         * Build call for followArtistsOrUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followArtistsOrUsersCall(type, ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute followArtistsOrUsers request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            followArtistsOrUsersWithHttpInfo(type, ids, requestBody);
        }

        /**
         * Execute followArtistsOrUsers request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followArtistsOrUsersWithHttpInfo(type, ids, requestBody);
        }

        /**
         * Execute followArtistsOrUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followArtistsOrUsersAsync(type, ids, requestBody, _callback);
        }
    }

    /**
     * Follow Artists or Users 
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @param type  (required)
     * @param ids  (required)
     * @return FollowArtistsOrUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
     </table>
     */
    public FollowArtistsOrUsersRequestBuilder followArtistsOrUsers(List<String> ids, String type, String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new FollowArtistsOrUsersRequestBuilder(ids, type, ids);
    }
    private okhttp3.Call followPlaylistCall(String playlistId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/followers"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followPlaylistValidateBeforeCall(String playlistId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling followPlaylist(Async)");
        }

        return followPlaylistCall(playlistId, requestBody, _callback);

    }


    private ApiResponse<Void> followPlaylistWithHttpInfo(String playlistId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = followPlaylistValidateBeforeCall(playlistId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call followPlaylistAsync(String playlistId, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followPlaylistValidateBeforeCall(playlistId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class FollowPlaylistRequestBuilder {
        private final String playlistId;
        private Boolean _public;

        private FollowPlaylistRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set _public
         * @param _public Defaults to &#x60;true&#x60;. If &#x60;true&#x60; the playlist will be included in user&#39;s public playlists, if &#x60;false&#x60; it will remain private.  (optional)
         * @return FollowPlaylistRequestBuilder
         */
        public FollowPlaylistRequestBuilder _public(Boolean _public) {
            this._public = _public;
            return this;
        }
        
        /**
         * Build call for followPlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist followed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followPlaylistCall(playlistId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("_public", this._public);
            return requestBody;
        }

        /**
         * Execute followPlaylist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist followed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            followPlaylistWithHttpInfo(playlistId, requestBody);
        }

        /**
         * Execute followPlaylist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist followed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followPlaylistWithHttpInfo(playlistId, requestBody);
        }

        /**
         * Execute followPlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist followed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followPlaylistAsync(playlistId, requestBody, _callback);
        }
    }

    /**
     * Follow Playlist 
     * Add the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @return FollowPlaylistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist followed </td><td>  -  </td></tr>
     </table>
     */
    public FollowPlaylistRequestBuilder followPlaylist(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new FollowPlaylistRequestBuilder(playlistId);
    }
    private okhttp3.Call getCurrentUserProfileCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentUserProfileValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCurrentUserProfileCall(_callback);

    }


    private ApiResponse<PrivateUserObject> getCurrentUserProfileWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrentUserProfileValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PrivateUserObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentUserProfileAsync(final ApiCallback<PrivateUserObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentUserProfileValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PrivateUserObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentUserProfileRequestBuilder {

        private GetCurrentUserProfileRequestBuilder() {
        }

        /**
         * Build call for getCurrentUserProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentUserProfileCall(_callback);
        }


        /**
         * Execute getCurrentUserProfile request
         * @return PrivateUserObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A user </td><td>  -  </td></tr>
         </table>
         */
        public PrivateUserObject execute() throws ApiException {
            ApiResponse<PrivateUserObject> localVarResp = getCurrentUserProfileWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentUserProfile request with HTTP info returned
         * @return ApiResponse&lt;PrivateUserObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A user </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PrivateUserObject> executeWithHttpInfo() throws ApiException {
            return getCurrentUserProfileWithHttpInfo();
        }

        /**
         * Execute getCurrentUserProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PrivateUserObject> _callback) throws ApiException {
            return getCurrentUserProfileAsync(_callback);
        }
    }

    /**
     * Get Current User&#39;s Profile 
     * Get detailed profile information about the current user (including the current user&#39;s username). 
     * @return GetCurrentUserProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A user </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentUserProfileRequestBuilder getCurrentUserProfile() throws IllegalArgumentException {
        return new GetCurrentUserProfileRequestBuilder();
    }
    private okhttp3.Call getFollowedArtistsCall(String type, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowedArtistsValidateBeforeCall(String type, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getFollowedArtists(Async)");
        }

        return getFollowedArtistsCall(type, after, limit, _callback);

    }


    private ApiResponse<UsersGetFollowedArtistsResponse> getFollowedArtistsWithHttpInfo(String type, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getFollowedArtistsValidateBeforeCall(type, after, limit, null);
        Type localVarReturnType = new TypeToken<UsersGetFollowedArtistsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFollowedArtistsAsync(String type, String after, Integer limit, final ApiCallback<UsersGetFollowedArtistsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowedArtistsValidateBeforeCall(type, after, limit, _callback);
        Type localVarReturnType = new TypeToken<UsersGetFollowedArtistsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFollowedArtistsRequestBuilder {
        private final String type;
        private String after;
        private Integer limit;

        private GetFollowedArtistsRequestBuilder(String type) {
            this.type = type;
        }

        /**
         * Set after
         * @param after  (optional)
         * @return GetFollowedArtistsRequestBuilder
         */
        public GetFollowedArtistsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetFollowedArtistsRequestBuilder
         */
        public GetFollowedArtistsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getFollowedArtists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFollowedArtistsCall(type, after, limit, _callback);
        }


        /**
         * Execute getFollowedArtists request
         * @return UsersGetFollowedArtistsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetFollowedArtistsResponse execute() throws ApiException {
            ApiResponse<UsersGetFollowedArtistsResponse> localVarResp = getFollowedArtistsWithHttpInfo(type, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFollowedArtists request with HTTP info returned
         * @return ApiResponse&lt;UsersGetFollowedArtistsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetFollowedArtistsResponse> executeWithHttpInfo() throws ApiException {
            return getFollowedArtistsWithHttpInfo(type, after, limit);
        }

        /**
         * Execute getFollowedArtists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetFollowedArtistsResponse> _callback) throws ApiException {
            return getFollowedArtistsAsync(type, after, limit, _callback);
        }
    }

    /**
     * Get Followed Artists 
     * Get the current user&#39;s followed artists. 
     * @param type  (required)
     * @return GetFollowedArtistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
     </table>
     */
    public GetFollowedArtistsRequestBuilder getFollowedArtists(String type) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new GetFollowedArtistsRequestBuilder(type);
    }
    private okhttp3.Call getTopItemsCall(String type, String timeRange, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/top/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_range", timeRange));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopItemsValidateBeforeCall(String type, String timeRange, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getTopItems(Async)");
        }

        return getTopItemsCall(type, timeRange, limit, offset, _callback);

    }


    private ApiResponse<UsersGetTopItemsResponse> getTopItemsWithHttpInfo(String type, String timeRange, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getTopItemsValidateBeforeCall(type, timeRange, limit, offset, null);
        Type localVarReturnType = new TypeToken<UsersGetTopItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTopItemsAsync(String type, String timeRange, Integer limit, Integer offset, final ApiCallback<UsersGetTopItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopItemsValidateBeforeCall(type, timeRange, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<UsersGetTopItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTopItemsRequestBuilder {
        private final String type;
        private String timeRange;
        private Integer limit;
        private Integer offset;

        private GetTopItemsRequestBuilder(String type) {
            this.type = type;
        }

        /**
         * Set timeRange
         * @param timeRange  (optional, default to medium_term)
         * @return GetTopItemsRequestBuilder
         */
        public GetTopItemsRequestBuilder timeRange(String timeRange) {
            this.timeRange = timeRange;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetTopItemsRequestBuilder
         */
        public GetTopItemsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetTopItemsRequestBuilder
         */
        public GetTopItemsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getTopItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTopItemsCall(type, timeRange, limit, offset, _callback);
        }


        /**
         * Execute getTopItems request
         * @return UsersGetTopItemsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetTopItemsResponse execute() throws ApiException {
            ApiResponse<UsersGetTopItemsResponse> localVarResp = getTopItemsWithHttpInfo(type, timeRange, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTopItems request with HTTP info returned
         * @return ApiResponse&lt;UsersGetTopItemsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetTopItemsResponse> executeWithHttpInfo() throws ApiException {
            return getTopItemsWithHttpInfo(type, timeRange, limit, offset);
        }

        /**
         * Execute getTopItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetTopItemsResponse> _callback) throws ApiException {
            return getTopItemsAsync(type, timeRange, limit, offset, _callback);
        }
    }

    /**
     * Get User&#39;s Top Items 
     * Get the current user&#39;s top artists or tracks based on calculated affinity. 
     * @param type  (required)
     * @return GetTopItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of artists or tracks </td><td>  -  </td></tr>
     </table>
     */
    public GetTopItemsRequestBuilder getTopItems(String type) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new GetTopItemsRequestBuilder(type);
    }
    private okhttp3.Call getUserPlaylistsCall(String userId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/playlists"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPlaylistsValidateBeforeCall(String userId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserPlaylists(Async)");
        }

        return getUserPlaylistsCall(userId, limit, offset, _callback);

    }


    private ApiResponse<PagingPlaylistObject> getUserPlaylistsWithHttpInfo(String userId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getUserPlaylistsValidateBeforeCall(userId, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserPlaylistsAsync(String userId, Integer limit, Integer offset, final ApiCallback<PagingPlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPlaylistsValidateBeforeCall(userId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserPlaylistsRequestBuilder {
        private final String userId;
        private Integer limit;
        private Integer offset;

        private GetUserPlaylistsRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetUserPlaylistsRequestBuilder
         */
        public GetUserPlaylistsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetUserPlaylistsRequestBuilder
         */
        public GetUserPlaylistsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getUserPlaylists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserPlaylistsCall(userId, limit, offset, _callback);
        }


        /**
         * Execute getUserPlaylists request
         * @return PagingPlaylistObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public PagingPlaylistObject execute() throws ApiException {
            ApiResponse<PagingPlaylistObject> localVarResp = getUserPlaylistsWithHttpInfo(userId, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserPlaylists request with HTTP info returned
         * @return ApiResponse&lt;PagingPlaylistObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingPlaylistObject> executeWithHttpInfo() throws ApiException {
            return getUserPlaylistsWithHttpInfo(userId, limit, offset);
        }

        /**
         * Execute getUserPlaylists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingPlaylistObject> _callback) throws ApiException {
            return getUserPlaylistsAsync(userId, limit, offset, _callback);
        }
    }

    /**
     * Get User&#39;s Playlists 
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @param userId  (required)
     * @return GetUserPlaylistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
     </table>
     */
    public GetUserPlaylistsRequestBuilder getUserPlaylists(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetUserPlaylistsRequestBuilder(userId);
    }
    private okhttp3.Call getUserProfileCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserProfileValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserProfile(Async)");
        }

        return getUserProfileCall(userId, _callback);

    }


    private ApiResponse<PublicUserObject> getUserProfileWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = getUserProfileValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<PublicUserObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserProfileAsync(String userId, final ApiCallback<PublicUserObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserProfileValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<PublicUserObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserProfileRequestBuilder {
        private final String userId;

        private GetUserProfileRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for getUserProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserProfileCall(userId, _callback);
        }


        /**
         * Execute getUserProfile request
         * @return PublicUserObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A user </td><td>  -  </td></tr>
         </table>
         */
        public PublicUserObject execute() throws ApiException {
            ApiResponse<PublicUserObject> localVarResp = getUserProfileWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserProfile request with HTTP info returned
         * @return ApiResponse&lt;PublicUserObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A user </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicUserObject> executeWithHttpInfo() throws ApiException {
            return getUserProfileWithHttpInfo(userId);
        }

        /**
         * Execute getUserProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicUserObject> _callback) throws ApiException {
            return getUserProfileAsync(userId, _callback);
        }
    }

    /**
     * Get User&#39;s Profile 
     * Get public profile information about a Spotify user. 
     * @param userId  (required)
     * @return GetUserProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A user </td><td>  -  </td></tr>
     </table>
     */
    public GetUserProfileRequestBuilder getUserProfile(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetUserProfileRequestBuilder(userId);
    }
    private okhttp3.Call unfollowArtistsUsersCall(String type, String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unfollowArtistsUsersValidateBeforeCall(String type, String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling unfollowArtistsUsers(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling unfollowArtistsUsers(Async)");
        }

        return unfollowArtistsUsersCall(type, ids, requestBody, _callback);

    }


    private ApiResponse<Void> unfollowArtistsUsersWithHttpInfo(String type, String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = unfollowArtistsUsersValidateBeforeCall(type, ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unfollowArtistsUsersAsync(String type, String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unfollowArtistsUsersValidateBeforeCall(type, ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnfollowArtistsUsersRequestBuilder {
        private final String type;
        private final String ids;
        private List<String> ids;

        private UnfollowArtistsUsersRequestBuilder(String type, String ids) {
            this.type = type;
            this.ids = ids;
        }

        /**
         * Set ids
         * @param ids A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: &#x60;{ids:[\\\&quot;74ASZWbe4lXaubB36ztrGX\\\&quot;, \\\&quot;08td7MxkoHQkXnWAYD8d6Q\\\&quot;]}&#x60;. A maximum of 50 IDs can be sent in one request. _**Note**: if the &#x60;ids&#x60; parameter is present in the query string, any IDs listed here in the body will be ignored._  (optional)
         * @return UnfollowArtistsUsersRequestBuilder
         */
        public UnfollowArtistsUsersRequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for unfollowArtistsUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return unfollowArtistsUsersCall(type, ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute unfollowArtistsUsers request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            unfollowArtistsUsersWithHttpInfo(type, ids, requestBody);
        }

        /**
         * Execute unfollowArtistsUsers request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return unfollowArtistsUsersWithHttpInfo(type, ids, requestBody);
        }

        /**
         * Execute unfollowArtistsUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return unfollowArtistsUsersAsync(type, ids, requestBody, _callback);
        }
    }

    /**
     * Unfollow Artists or Users 
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @param type  (required)
     * @param ids  (required)
     * @return UnfollowArtistsUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
     </table>
     */
    public UnfollowArtistsUsersRequestBuilder unfollowArtistsUsers(String type, String ids) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new UnfollowArtistsUsersRequestBuilder(type, ids);
    }
    private okhttp3.Call unfollowPlaylistCall(String playlistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/followers"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unfollowPlaylistValidateBeforeCall(String playlistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling unfollowPlaylist(Async)");
        }

        return unfollowPlaylistCall(playlistId, _callback);

    }


    private ApiResponse<Void> unfollowPlaylistWithHttpInfo(String playlistId) throws ApiException {
        okhttp3.Call localVarCall = unfollowPlaylistValidateBeforeCall(playlistId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unfollowPlaylistAsync(String playlistId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unfollowPlaylistValidateBeforeCall(playlistId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnfollowPlaylistRequestBuilder {
        private final String playlistId;

        private UnfollowPlaylistRequestBuilder(String playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Build call for unfollowPlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unfollowPlaylistCall(playlistId, _callback);
        }


        /**
         * Execute unfollowPlaylist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unfollowPlaylistWithHttpInfo(playlistId);
        }

        /**
         * Execute unfollowPlaylist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unfollowPlaylistWithHttpInfo(playlistId);
        }

        /**
         * Execute unfollowPlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unfollowPlaylistAsync(playlistId, _callback);
        }
    }

    /**
     * Unfollow Playlist 
     * Remove the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @return UnfollowPlaylistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist unfollowed </td><td>  -  </td></tr>
     </table>
     */
    public UnfollowPlaylistRequestBuilder unfollowPlaylist(String playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
            

        return new UnfollowPlaylistRequestBuilder(playlistId);
    }
}
