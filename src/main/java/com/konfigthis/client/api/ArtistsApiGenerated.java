/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ArtistObject;
import com.konfigthis.client.model.ArtistsGetCatalogInfoResponse;
import com.konfigthis.client.model.ArtistsGetTopTracksResponse;
import com.konfigthis.client.model.PagingArtistDiscographyAlbumObject;
import com.konfigthis.client.model.UsersFollowArtistsOrUsersRequest;
import com.konfigthis.client.model.UsersGetFollowedArtistsResponse;
import com.konfigthis.client.model.UsersUnfollowArtistsUsersRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ArtistsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ArtistsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ArtistsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkFollowingArtistsUsersCall(String type, String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/following/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkFollowingArtistsUsersValidateBeforeCall(String type, String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling checkFollowingArtistsUsers(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkFollowingArtistsUsers(Async)");
        }

        return checkFollowingArtistsUsersCall(type, ids, _callback);

    }


    private ApiResponse<List<Boolean>> checkFollowingArtistsUsersWithHttpInfo(String type, String ids) throws ApiException {
        okhttp3.Call localVarCall = checkFollowingArtistsUsersValidateBeforeCall(type, ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkFollowingArtistsUsersAsync(String type, String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkFollowingArtistsUsersValidateBeforeCall(type, ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckFollowingArtistsUsersRequestBuilder {
        private final String type;
        private final String ids;

        private CheckFollowingArtistsUsersRequestBuilder(String type, String ids) {
            this.type = type;
            this.ids = ids;
        }

        /**
         * Build call for checkFollowingArtistsUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkFollowingArtistsUsersCall(type, ids, _callback);
        }


        /**
         * Execute checkFollowingArtistsUsers request
         * @return List&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public List<Boolean> execute() throws ApiException {
            ApiResponse<List<Boolean>> localVarResp = checkFollowingArtistsUsersWithHttpInfo(type, ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkFollowingArtistsUsers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Boolean>> executeWithHttpInfo() throws ApiException {
            return checkFollowingArtistsUsersWithHttpInfo(type, ids);
        }

        /**
         * Execute checkFollowingArtistsUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Boolean>> _callback) throws ApiException {
            return checkFollowingArtistsUsersAsync(type, ids, _callback);
        }
    }

    /**
     * Check If User Follows Artists or Users 
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @param type  (required)
     * @param ids  (required)
     * @return CheckFollowingArtistsUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
     </table>
     */
    public CheckFollowingArtistsUsersRequestBuilder checkFollowingArtistsUsers(String type, String ids) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new CheckFollowingArtistsUsersRequestBuilder(type, ids);
    }
    private okhttp3.Call followArtistsOrUsersCall(String type, String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followArtistsOrUsersValidateBeforeCall(String type, String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling followArtistsOrUsers(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling followArtistsOrUsers(Async)");
        }

        return followArtistsOrUsersCall(type, ids, requestBody, _callback);

    }


    private ApiResponse<Void> followArtistsOrUsersWithHttpInfo(String type, String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = followArtistsOrUsersValidateBeforeCall(type, ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call followArtistsOrUsersAsync(String type, String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followArtistsOrUsersValidateBeforeCall(type, ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class FollowArtistsOrUsersRequestBuilder {
        private final List<String> ids;
        private final String type;
        private final String ids;

        private FollowArtistsOrUsersRequestBuilder(List<String> ids, String type, String ids) {
            this.ids = ids;
            this.type = type;
            this.ids = ids;
        }

        /**
         * Build call for followArtistsOrUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followArtistsOrUsersCall(type, ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute followArtistsOrUsers request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            followArtistsOrUsersWithHttpInfo(type, ids, requestBody);
        }

        /**
         * Execute followArtistsOrUsers request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followArtistsOrUsersWithHttpInfo(type, ids, requestBody);
        }

        /**
         * Execute followArtistsOrUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return followArtistsOrUsersAsync(type, ids, requestBody, _callback);
        }
    }

    /**
     * Follow Artists or Users 
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @param type  (required)
     * @param ids  (required)
     * @return FollowArtistsOrUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Artist or user followed </td><td>  -  </td></tr>
     </table>
     */
    public FollowArtistsOrUsersRequestBuilder followArtistsOrUsers(List<String> ids, String type, String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new FollowArtistsOrUsersRequestBuilder(ids, type, ids);
    }
    private okhttp3.Call getAlbumsByIdCall(String id, String includeGroups, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artists/{id}/albums"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_groups", includeGroups));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumsByIdValidateBeforeCall(String id, String includeGroups, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAlbumsById(Async)");
        }

        return getAlbumsByIdCall(id, includeGroups, market, limit, offset, _callback);

    }


    private ApiResponse<PagingArtistDiscographyAlbumObject> getAlbumsByIdWithHttpInfo(String id, String includeGroups, String market, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAlbumsByIdValidateBeforeCall(id, includeGroups, market, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingArtistDiscographyAlbumObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAlbumsByIdAsync(String id, String includeGroups, String market, Integer limit, Integer offset, final ApiCallback<PagingArtistDiscographyAlbumObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumsByIdValidateBeforeCall(id, includeGroups, market, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingArtistDiscographyAlbumObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAlbumsByIdRequestBuilder {
        private final String id;
        private String includeGroups;
        private String market;
        private Integer limit;
        private Integer offset;

        private GetAlbumsByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set includeGroups
         * @param includeGroups  (optional)
         * @return GetAlbumsByIdRequestBuilder
         */
        public GetAlbumsByIdRequestBuilder includeGroups(String includeGroups) {
            this.includeGroups = includeGroups;
            return this;
        }
        
        /**
         * Set market
         * @param market  (optional)
         * @return GetAlbumsByIdRequestBuilder
         */
        public GetAlbumsByIdRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetAlbumsByIdRequestBuilder
         */
        public GetAlbumsByIdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetAlbumsByIdRequestBuilder
         */
        public GetAlbumsByIdRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getAlbumsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAlbumsByIdCall(id, includeGroups, market, limit, offset, _callback);
        }


        /**
         * Execute getAlbumsById request
         * @return PagingArtistDiscographyAlbumObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public PagingArtistDiscographyAlbumObject execute() throws ApiException {
            ApiResponse<PagingArtistDiscographyAlbumObject> localVarResp = getAlbumsByIdWithHttpInfo(id, includeGroups, market, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAlbumsById request with HTTP info returned
         * @return ApiResponse&lt;PagingArtistDiscographyAlbumObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingArtistDiscographyAlbumObject> executeWithHttpInfo() throws ApiException {
            return getAlbumsByIdWithHttpInfo(id, includeGroups, market, limit, offset);
        }

        /**
         * Execute getAlbumsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingArtistDiscographyAlbumObject> _callback) throws ApiException {
            return getAlbumsByIdAsync(id, includeGroups, market, limit, offset, _callback);
        }
    }

    /**
     * Get Artist&#39;s Albums 
     * Get Spotify catalog information about an artist&#39;s albums. 
     * @param id  (required)
     * @return GetAlbumsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
     </table>
     */
    public GetAlbumsByIdRequestBuilder getAlbumsById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetAlbumsByIdRequestBuilder(id);
    }
    private okhttp3.Call getCatalogInfoCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artists/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCatalogInfoValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCatalogInfo(Async)");
        }

        return getCatalogInfoCall(id, _callback);

    }


    private ApiResponse<ArtistObject> getCatalogInfoWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getCatalogInfoValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ArtistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCatalogInfoAsync(String id, final ApiCallback<ArtistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCatalogInfoValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ArtistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCatalogInfoRequestBuilder {
        private final String id;

        private GetCatalogInfoRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getCatalogInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An artist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCatalogInfoCall(id, _callback);
        }


        /**
         * Execute getCatalogInfo request
         * @return ArtistObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An artist </td><td>  -  </td></tr>
         </table>
         */
        public ArtistObject execute() throws ApiException {
            ApiResponse<ArtistObject> localVarResp = getCatalogInfoWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCatalogInfo request with HTTP info returned
         * @return ApiResponse&lt;ArtistObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An artist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ArtistObject> executeWithHttpInfo() throws ApiException {
            return getCatalogInfoWithHttpInfo(id);
        }

        /**
         * Execute getCatalogInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An artist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ArtistObject> _callback) throws ApiException {
            return getCatalogInfoAsync(id, _callback);
        }
    }

    /**
     * Get Artist 
     * Get Spotify catalog information for a single artist identified by their unique Spotify ID. 
     * @param id  (required)
     * @return GetCatalogInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artist </td><td>  -  </td></tr>
     </table>
     */
    public GetCatalogInfoRequestBuilder getCatalogInfo(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetCatalogInfoRequestBuilder(id);
    }
    private okhttp3.Call getCatalogInfo_0Call(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCatalogInfo_0ValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getCatalogInfo_0(Async)");
        }

        return getCatalogInfo_0Call(ids, _callback);

    }


    private ApiResponse<ArtistsGetCatalogInfoResponse> getCatalogInfo_0WithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = getCatalogInfo_0ValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<ArtistsGetCatalogInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCatalogInfo_0Async(String ids, final ApiCallback<ArtistsGetCatalogInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCatalogInfo_0ValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<ArtistsGetCatalogInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCatalogInfo0RequestBuilder {
        private final String ids;

        private GetCatalogInfo0RequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Build call for getCatalogInfo_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of artists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCatalogInfo_0Call(ids, _callback);
        }


        /**
         * Execute getCatalogInfo_0 request
         * @return ArtistsGetCatalogInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of artists </td><td>  -  </td></tr>
         </table>
         */
        public ArtistsGetCatalogInfoResponse execute() throws ApiException {
            ApiResponse<ArtistsGetCatalogInfoResponse> localVarResp = getCatalogInfo_0WithHttpInfo(ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCatalogInfo_0 request with HTTP info returned
         * @return ApiResponse&lt;ArtistsGetCatalogInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of artists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ArtistsGetCatalogInfoResponse> executeWithHttpInfo() throws ApiException {
            return getCatalogInfo_0WithHttpInfo(ids);
        }

        /**
         * Execute getCatalogInfo_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of artists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ArtistsGetCatalogInfoResponse> _callback) throws ApiException {
            return getCatalogInfo_0Async(ids, _callback);
        }
    }

    /**
     * Get Several Artists 
     * Get Spotify catalog information for several artists based on their Spotify IDs. 
     * @param ids  (required)
     * @return GetCatalogInfo0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of artists </td><td>  -  </td></tr>
     </table>
     */
    public GetCatalogInfo0RequestBuilder getCatalogInfo_0(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new GetCatalogInfo0RequestBuilder(ids);
    }
    private okhttp3.Call getFollowedArtistsCall(String type, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowedArtistsValidateBeforeCall(String type, String after, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getFollowedArtists(Async)");
        }

        return getFollowedArtistsCall(type, after, limit, _callback);

    }


    private ApiResponse<UsersGetFollowedArtistsResponse> getFollowedArtistsWithHttpInfo(String type, String after, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getFollowedArtistsValidateBeforeCall(type, after, limit, null);
        Type localVarReturnType = new TypeToken<UsersGetFollowedArtistsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFollowedArtistsAsync(String type, String after, Integer limit, final ApiCallback<UsersGetFollowedArtistsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowedArtistsValidateBeforeCall(type, after, limit, _callback);
        Type localVarReturnType = new TypeToken<UsersGetFollowedArtistsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFollowedArtistsRequestBuilder {
        private final String type;
        private String after;
        private Integer limit;

        private GetFollowedArtistsRequestBuilder(String type) {
            this.type = type;
        }

        /**
         * Set after
         * @param after  (optional)
         * @return GetFollowedArtistsRequestBuilder
         */
        public GetFollowedArtistsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetFollowedArtistsRequestBuilder
         */
        public GetFollowedArtistsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getFollowedArtists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFollowedArtistsCall(type, after, limit, _callback);
        }


        /**
         * Execute getFollowedArtists request
         * @return UsersGetFollowedArtistsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetFollowedArtistsResponse execute() throws ApiException {
            ApiResponse<UsersGetFollowedArtistsResponse> localVarResp = getFollowedArtistsWithHttpInfo(type, after, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFollowedArtists request with HTTP info returned
         * @return ApiResponse&lt;UsersGetFollowedArtistsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetFollowedArtistsResponse> executeWithHttpInfo() throws ApiException {
            return getFollowedArtistsWithHttpInfo(type, after, limit);
        }

        /**
         * Execute getFollowedArtists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetFollowedArtistsResponse> _callback) throws ApiException {
            return getFollowedArtistsAsync(type, after, limit, _callback);
        }
    }

    /**
     * Get Followed Artists 
     * Get the current user&#39;s followed artists. 
     * @param type  (required)
     * @return GetFollowedArtistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of artists </td><td>  -  </td></tr>
     </table>
     */
    public GetFollowedArtistsRequestBuilder getFollowedArtists(String type) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new GetFollowedArtistsRequestBuilder(type);
    }
    private okhttp3.Call getRelatedArtistsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artists/{id}/related-artists"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelatedArtistsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRelatedArtists(Async)");
        }

        return getRelatedArtistsCall(id, _callback);

    }


    private ApiResponse<ArtistsGetCatalogInfoResponse> getRelatedArtistsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getRelatedArtistsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ArtistsGetCatalogInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRelatedArtistsAsync(String id, final ApiCallback<ArtistsGetCatalogInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelatedArtistsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ArtistsGetCatalogInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRelatedArtistsRequestBuilder {
        private final String id;

        private GetRelatedArtistsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getRelatedArtists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of artists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRelatedArtistsCall(id, _callback);
        }


        /**
         * Execute getRelatedArtists request
         * @return ArtistsGetCatalogInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of artists </td><td>  -  </td></tr>
         </table>
         */
        public ArtistsGetCatalogInfoResponse execute() throws ApiException {
            ApiResponse<ArtistsGetCatalogInfoResponse> localVarResp = getRelatedArtistsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRelatedArtists request with HTTP info returned
         * @return ApiResponse&lt;ArtistsGetCatalogInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of artists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ArtistsGetCatalogInfoResponse> executeWithHttpInfo() throws ApiException {
            return getRelatedArtistsWithHttpInfo(id);
        }

        /**
         * Execute getRelatedArtists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of artists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ArtistsGetCatalogInfoResponse> _callback) throws ApiException {
            return getRelatedArtistsAsync(id, _callback);
        }
    }

    /**
     * Get Artist&#39;s Related Artists 
     * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community&#39;s listening history. 
     * @param id  (required)
     * @return GetRelatedArtistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of artists </td><td>  -  </td></tr>
     </table>
     */
    public GetRelatedArtistsRequestBuilder getRelatedArtists(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetRelatedArtistsRequestBuilder(id);
    }
    private okhttp3.Call getTopTracksCall(String id, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artists/{id}/top-tracks"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopTracksValidateBeforeCall(String id, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTopTracks(Async)");
        }

        return getTopTracksCall(id, market, _callback);

    }


    private ApiResponse<ArtistsGetTopTracksResponse> getTopTracksWithHttpInfo(String id, String market) throws ApiException {
        okhttp3.Call localVarCall = getTopTracksValidateBeforeCall(id, market, null);
        Type localVarReturnType = new TypeToken<ArtistsGetTopTracksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTopTracksAsync(String id, String market, final ApiCallback<ArtistsGetTopTracksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopTracksValidateBeforeCall(id, market, _callback);
        Type localVarReturnType = new TypeToken<ArtistsGetTopTracksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTopTracksRequestBuilder {
        private final String id;
        private String market;

        private GetTopTracksRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetTopTracksRequestBuilder
         */
        public GetTopTracksRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Build call for getTopTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTopTracksCall(id, market, _callback);
        }


        /**
         * Execute getTopTracks request
         * @return ArtistsGetTopTracksResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public ArtistsGetTopTracksResponse execute() throws ApiException {
            ApiResponse<ArtistsGetTopTracksResponse> localVarResp = getTopTracksWithHttpInfo(id, market);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTopTracks request with HTTP info returned
         * @return ApiResponse&lt;ArtistsGetTopTracksResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ArtistsGetTopTracksResponse> executeWithHttpInfo() throws ApiException {
            return getTopTracksWithHttpInfo(id, market);
        }

        /**
         * Execute getTopTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ArtistsGetTopTracksResponse> _callback) throws ApiException {
            return getTopTracksAsync(id, market, _callback);
        }
    }

    /**
     * Get Artist&#39;s Top Tracks 
     * Get Spotify catalog information about an artist&#39;s top tracks by country. 
     * @param id  (required)
     * @return GetTopTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of tracks </td><td>  -  </td></tr>
     </table>
     */
    public GetTopTracksRequestBuilder getTopTracks(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetTopTracksRequestBuilder(id);
    }
    private okhttp3.Call unfollowArtistsUsersCall(String type, String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unfollowArtistsUsersValidateBeforeCall(String type, String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling unfollowArtistsUsers(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling unfollowArtistsUsers(Async)");
        }

        return unfollowArtistsUsersCall(type, ids, requestBody, _callback);

    }


    private ApiResponse<Void> unfollowArtistsUsersWithHttpInfo(String type, String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = unfollowArtistsUsersValidateBeforeCall(type, ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unfollowArtistsUsersAsync(String type, String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unfollowArtistsUsersValidateBeforeCall(type, ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnfollowArtistsUsersRequestBuilder {
        private final String type;
        private final String ids;
        private List<String> ids;

        private UnfollowArtistsUsersRequestBuilder(String type, String ids) {
            this.type = type;
            this.ids = ids;
        }

        /**
         * Set ids
         * @param ids A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: &#x60;{ids:[\\\&quot;74ASZWbe4lXaubB36ztrGX\\\&quot;, \\\&quot;08td7MxkoHQkXnWAYD8d6Q\\\&quot;]}&#x60;. A maximum of 50 IDs can be sent in one request. _**Note**: if the &#x60;ids&#x60; parameter is present in the query string, any IDs listed here in the body will be ignored._  (optional)
         * @return UnfollowArtistsUsersRequestBuilder
         */
        public UnfollowArtistsUsersRequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for unfollowArtistsUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return unfollowArtistsUsersCall(type, ids, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("ids", this.ids);
            return requestBody;
        }

        /**
         * Execute unfollowArtistsUsers request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            unfollowArtistsUsersWithHttpInfo(type, ids, requestBody);
        }

        /**
         * Execute unfollowArtistsUsers request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return unfollowArtistsUsersWithHttpInfo(type, ids, requestBody);
        }

        /**
         * Execute unfollowArtistsUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return unfollowArtistsUsersAsync(type, ids, requestBody, _callback);
        }
    }

    /**
     * Unfollow Artists or Users 
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @param type  (required)
     * @param ids  (required)
     * @return UnfollowArtistsUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Artist or user unfollowed </td><td>  -  </td></tr>
     </table>
     */
    public UnfollowArtistsUsersRequestBuilder unfollowArtistsUsers(String type, String ids) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new UnfollowArtistsUsersRequestBuilder(type, ids);
    }
}
