/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PagingSavedShowObject;
import com.konfigthis.client.model.PagingSimplifiedEpisodeObject;
import com.konfigthis.client.model.ShowObject;
import com.konfigthis.client.model.ShowsGetMultipleShowsInfoResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShowsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShowsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ShowsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkSavedShowsCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/shows/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkSavedShowsValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkSavedShows(Async)");
        }

        return checkSavedShowsCall(ids, _callback);

    }


    private ApiResponse<List<Boolean>> checkSavedShowsWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = checkSavedShowsValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkSavedShowsAsync(String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkSavedShowsValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckSavedShowsRequestBuilder {
        private final String ids;

        private CheckSavedShowsRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Build call for checkSavedShows
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkSavedShowsCall(ids, _callback);
        }


        /**
         * Execute checkSavedShows request
         * @return List&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public List<Boolean> execute() throws ApiException {
            ApiResponse<List<Boolean>> localVarResp = checkSavedShowsWithHttpInfo(ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkSavedShows request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Boolean>> executeWithHttpInfo() throws ApiException {
            return checkSavedShowsWithHttpInfo(ids);
        }

        /**
         * Execute checkSavedShows request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Boolean>> _callback) throws ApiException {
            return checkSavedShowsAsync(ids, _callback);
        }
    }

    /**
     * Check User&#39;s Saved Shows 
     * Check if one or more shows is already saved in the current Spotify user&#39;s library. 
     * @param ids  (required)
     * @return CheckSavedShowsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
     </table>
     */
    public CheckSavedShowsRequestBuilder checkSavedShows(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new CheckSavedShowsRequestBuilder(ids);
    }
    private okhttp3.Call getEpisodesByIdCall(String id, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shows/{id}/episodes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEpisodesByIdValidateBeforeCall(String id, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEpisodesById(Async)");
        }

        return getEpisodesByIdCall(id, market, limit, offset, _callback);

    }


    private ApiResponse<PagingSimplifiedEpisodeObject> getEpisodesByIdWithHttpInfo(String id, String market, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getEpisodesByIdValidateBeforeCall(id, market, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSimplifiedEpisodeObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEpisodesByIdAsync(String id, String market, Integer limit, Integer offset, final ApiCallback<PagingSimplifiedEpisodeObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEpisodesByIdValidateBeforeCall(id, market, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSimplifiedEpisodeObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEpisodesByIdRequestBuilder {
        private final String id;
        private String market;
        private Integer limit;
        private Integer offset;

        private GetEpisodesByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetEpisodesByIdRequestBuilder
         */
        public GetEpisodesByIdRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetEpisodesByIdRequestBuilder
         */
        public GetEpisodesByIdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetEpisodesByIdRequestBuilder
         */
        public GetEpisodesByIdRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getEpisodesById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEpisodesByIdCall(id, market, limit, offset, _callback);
        }


        /**
         * Execute getEpisodesById request
         * @return PagingSimplifiedEpisodeObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
         </table>
         */
        public PagingSimplifiedEpisodeObject execute() throws ApiException {
            ApiResponse<PagingSimplifiedEpisodeObject> localVarResp = getEpisodesByIdWithHttpInfo(id, market, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEpisodesById request with HTTP info returned
         * @return ApiResponse&lt;PagingSimplifiedEpisodeObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingSimplifiedEpisodeObject> executeWithHttpInfo() throws ApiException {
            return getEpisodesByIdWithHttpInfo(id, market, limit, offset);
        }

        /**
         * Execute getEpisodesById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingSimplifiedEpisodeObject> _callback) throws ApiException {
            return getEpisodesByIdAsync(id, market, limit, offset, _callback);
        }
    }

    /**
     * Get Show Episodes 
     * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
     * @param id  (required)
     * @return GetEpisodesByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of episodes </td><td>  -  </td></tr>
     </table>
     */
    public GetEpisodesByIdRequestBuilder getEpisodesById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetEpisodesByIdRequestBuilder(id);
    }
    private okhttp3.Call getInformationCall(String id, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shows/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInformationValidateBeforeCall(String id, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInformation(Async)");
        }

        return getInformationCall(id, market, _callback);

    }


    private ApiResponse<ShowObject> getInformationWithHttpInfo(String id, String market) throws ApiException {
        okhttp3.Call localVarCall = getInformationValidateBeforeCall(id, market, null);
        Type localVarReturnType = new TypeToken<ShowObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInformationAsync(String id, String market, final ApiCallback<ShowObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInformationValidateBeforeCall(id, market, _callback);
        Type localVarReturnType = new TypeToken<ShowObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInformationRequestBuilder {
        private final String id;
        private String market;

        private GetInformationRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetInformationRequestBuilder
         */
        public GetInformationRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Build call for getInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A show </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInformationCall(id, market, _callback);
        }


        /**
         * Execute getInformation request
         * @return ShowObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A show </td><td>  -  </td></tr>
         </table>
         */
        public ShowObject execute() throws ApiException {
            ApiResponse<ShowObject> localVarResp = getInformationWithHttpInfo(id, market);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInformation request with HTTP info returned
         * @return ApiResponse&lt;ShowObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A show </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShowObject> executeWithHttpInfo() throws ApiException {
            return getInformationWithHttpInfo(id, market);
        }

        /**
         * Execute getInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A show </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShowObject> _callback) throws ApiException {
            return getInformationAsync(id, market, _callback);
        }
    }

    /**
     * Get Show 
     * Get Spotify catalog information for a single show identified by its unique Spotify ID. 
     * @param id  (required)
     * @return GetInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A show </td><td>  -  </td></tr>
     </table>
     */
    public GetInformationRequestBuilder getInformation(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetInformationRequestBuilder(id);
    }
    private okhttp3.Call getMultipleShowsInfoCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultipleShowsInfoValidateBeforeCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getMultipleShowsInfo(Async)");
        }

        return getMultipleShowsInfoCall(ids, market, _callback);

    }


    private ApiResponse<ShowsGetMultipleShowsInfoResponse> getMultipleShowsInfoWithHttpInfo(String ids, String market) throws ApiException {
        okhttp3.Call localVarCall = getMultipleShowsInfoValidateBeforeCall(ids, market, null);
        Type localVarReturnType = new TypeToken<ShowsGetMultipleShowsInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMultipleShowsInfoAsync(String ids, String market, final ApiCallback<ShowsGetMultipleShowsInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultipleShowsInfoValidateBeforeCall(ids, market, _callback);
        Type localVarReturnType = new TypeToken<ShowsGetMultipleShowsInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMultipleShowsInfoRequestBuilder {
        private final String ids;
        private String market;

        private GetMultipleShowsInfoRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return GetMultipleShowsInfoRequestBuilder
         */
        public GetMultipleShowsInfoRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Build call for getMultipleShowsInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of shows </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMultipleShowsInfoCall(ids, market, _callback);
        }


        /**
         * Execute getMultipleShowsInfo request
         * @return ShowsGetMultipleShowsInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of shows </td><td>  -  </td></tr>
         </table>
         */
        public ShowsGetMultipleShowsInfoResponse execute() throws ApiException {
            ApiResponse<ShowsGetMultipleShowsInfoResponse> localVarResp = getMultipleShowsInfoWithHttpInfo(ids, market);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMultipleShowsInfo request with HTTP info returned
         * @return ApiResponse&lt;ShowsGetMultipleShowsInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of shows </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShowsGetMultipleShowsInfoResponse> executeWithHttpInfo() throws ApiException {
            return getMultipleShowsInfoWithHttpInfo(ids, market);
        }

        /**
         * Execute getMultipleShowsInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A set of shows </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShowsGetMultipleShowsInfoResponse> _callback) throws ApiException {
            return getMultipleShowsInfoAsync(ids, market, _callback);
        }
    }

    /**
     * Get Several Shows 
     * Get Spotify catalog information for several shows based on their Spotify IDs. 
     * @param ids  (required)
     * @return GetMultipleShowsInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of shows </td><td>  -  </td></tr>
     </table>
     */
    public GetMultipleShowsInfoRequestBuilder getMultipleShowsInfo(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new GetMultipleShowsInfoRequestBuilder(ids);
    }
    private okhttp3.Call getUserSavedShowsCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/shows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserSavedShowsValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getUserSavedShowsCall(limit, offset, _callback);

    }


    private ApiResponse<PagingSavedShowObject> getUserSavedShowsWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getUserSavedShowsValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSavedShowObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserSavedShowsAsync(Integer limit, Integer offset, final ApiCallback<PagingSavedShowObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserSavedShowsValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSavedShowObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserSavedShowsRequestBuilder {
        private Integer limit;
        private Integer offset;

        private GetUserSavedShowsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetUserSavedShowsRequestBuilder
         */
        public GetUserSavedShowsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetUserSavedShowsRequestBuilder
         */
        public GetUserSavedShowsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getUserSavedShows
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of shows </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserSavedShowsCall(limit, offset, _callback);
        }


        /**
         * Execute getUserSavedShows request
         * @return PagingSavedShowObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of shows </td><td>  -  </td></tr>
         </table>
         */
        public PagingSavedShowObject execute() throws ApiException {
            ApiResponse<PagingSavedShowObject> localVarResp = getUserSavedShowsWithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserSavedShows request with HTTP info returned
         * @return ApiResponse&lt;PagingSavedShowObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of shows </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingSavedShowObject> executeWithHttpInfo() throws ApiException {
            return getUserSavedShowsWithHttpInfo(limit, offset);
        }

        /**
         * Execute getUserSavedShows request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pages of shows </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingSavedShowObject> _callback) throws ApiException {
            return getUserSavedShowsAsync(limit, offset, _callback);
        }
    }

    /**
     * Get User&#39;s Saved Shows 
     * Get a list of shows saved in the current Spotify user&#39;s library. Optional parameters can be used to limit the number of shows returned. 
     * @return GetUserSavedShowsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of shows </td><td>  -  </td></tr>
     </table>
     */
    public GetUserSavedShowsRequestBuilder getUserSavedShows() throws IllegalArgumentException {
        return new GetUserSavedShowsRequestBuilder();
    }
    private okhttp3.Call removeUserLibraryCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/shows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserLibraryValidateBeforeCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling removeUserLibrary(Async)");
        }

        return removeUserLibraryCall(ids, market, _callback);

    }


    private ApiResponse<Void> removeUserLibraryWithHttpInfo(String ids, String market) throws ApiException {
        okhttp3.Call localVarCall = removeUserLibraryValidateBeforeCall(ids, market, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeUserLibraryAsync(String ids, String market, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserLibraryValidateBeforeCall(ids, market, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveUserLibraryRequestBuilder {
        private final String ids;
        private String market;

        private RemoveUserLibraryRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Set market
         * @param market  (optional)
         * @return RemoveUserLibraryRequestBuilder
         */
        public RemoveUserLibraryRequestBuilder market(String market) {
            this.market = market;
            return this;
        }
        
        /**
         * Build call for removeUserLibrary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show removed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeUserLibraryCall(ids, market, _callback);
        }


        /**
         * Execute removeUserLibrary request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show removed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeUserLibraryWithHttpInfo(ids, market);
        }

        /**
         * Execute removeUserLibrary request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show removed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeUserLibraryWithHttpInfo(ids, market);
        }

        /**
         * Execute removeUserLibrary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show removed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeUserLibraryAsync(ids, market, _callback);
        }
    }

    /**
     * Remove User&#39;s Saved Shows 
     * Delete one or more shows from current Spotify user&#39;s library. 
     * @param ids  (required)
     * @return RemoveUserLibraryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show removed </td><td>  -  </td></tr>
     </table>
     */
    public RemoveUserLibraryRequestBuilder removeUserLibrary(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new RemoveUserLibraryRequestBuilder(ids);
    }
    private okhttp3.Call saveCurrentUserLibraryCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/shows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCurrentUserLibraryValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling saveCurrentUserLibrary(Async)");
        }

        return saveCurrentUserLibraryCall(ids, _callback);

    }


    private ApiResponse<Void> saveCurrentUserLibraryWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = saveCurrentUserLibraryValidateBeforeCall(ids, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call saveCurrentUserLibraryAsync(String ids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCurrentUserLibraryValidateBeforeCall(ids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SaveCurrentUserLibraryRequestBuilder {
        private final String ids;

        private SaveCurrentUserLibraryRequestBuilder(String ids) {
            this.ids = ids;
        }

        /**
         * Build call for saveCurrentUserLibrary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show saved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return saveCurrentUserLibraryCall(ids, _callback);
        }


        /**
         * Execute saveCurrentUserLibrary request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show saved </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            saveCurrentUserLibraryWithHttpInfo(ids);
        }

        /**
         * Execute saveCurrentUserLibrary request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show saved </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return saveCurrentUserLibraryWithHttpInfo(ids);
        }

        /**
         * Execute saveCurrentUserLibrary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Show saved </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return saveCurrentUserLibraryAsync(ids, _callback);
        }
    }

    /**
     * Save Shows for Current User 
     * Save one or more shows to current Spotify user&#39;s library. 
     * @param ids  (required)
     * @return SaveCurrentUserLibraryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show saved </td><td>  -  </td></tr>
     </table>
     */
    public SaveCurrentUserLibraryRequestBuilder saveCurrentUserLibrary(String ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        return new SaveCurrentUserLibraryRequestBuilder(ids);
    }
}
