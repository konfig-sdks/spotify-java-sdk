/*
 * Spotify Web API
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CategoriesListSeveralResponse;
import com.konfigthis.client.model.CategoryObject;
import com.konfigthis.client.model.PagingFeaturedPlaylistObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CategoriesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoriesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCategoryPlaylistsCall(String categoryId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browse/categories/{category_id}/playlists"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryPlaylistsValidateBeforeCall(String categoryId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getCategoryPlaylists(Async)");
        }

        return getCategoryPlaylistsCall(categoryId, limit, offset, _callback);

    }


    private ApiResponse<PagingFeaturedPlaylistObject> getCategoryPlaylistsWithHttpInfo(String categoryId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getCategoryPlaylistsValidateBeforeCall(categoryId, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingFeaturedPlaylistObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCategoryPlaylistsAsync(String categoryId, Integer limit, Integer offset, final ApiCallback<PagingFeaturedPlaylistObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryPlaylistsValidateBeforeCall(categoryId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingFeaturedPlaylistObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCategoryPlaylistsRequestBuilder {
        private final String categoryId;
        private Integer limit;
        private Integer offset;

        private GetCategoryPlaylistsRequestBuilder(String categoryId) {
            this.categoryId = categoryId;
        }

        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return GetCategoryPlaylistsRequestBuilder
         */
        public GetCategoryPlaylistsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetCategoryPlaylistsRequestBuilder
         */
        public GetCategoryPlaylistsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getCategoryPlaylists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCategoryPlaylistsCall(categoryId, limit, offset, _callback);
        }


        /**
         * Execute getCategoryPlaylists request
         * @return PagingFeaturedPlaylistObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public PagingFeaturedPlaylistObject execute() throws ApiException {
            ApiResponse<PagingFeaturedPlaylistObject> localVarResp = getCategoryPlaylistsWithHttpInfo(categoryId, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCategoryPlaylists request with HTTP info returned
         * @return ApiResponse&lt;PagingFeaturedPlaylistObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagingFeaturedPlaylistObject> executeWithHttpInfo() throws ApiException {
            return getCategoryPlaylistsWithHttpInfo(categoryId, limit, offset);
        }

        /**
         * Execute getCategoryPlaylists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagingFeaturedPlaylistObject> _callback) throws ApiException {
            return getCategoryPlaylistsAsync(categoryId, limit, offset, _callback);
        }
    }

    /**
     * Get Category&#39;s Playlists 
     * Get a list of Spotify playlists tagged with a particular category. 
     * @param categoryId  (required)
     * @return GetCategoryPlaylistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of playlists </td><td>  -  </td></tr>
     </table>
     */
    public GetCategoryPlaylistsRequestBuilder getCategoryPlaylists(String categoryId) throws IllegalArgumentException {
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new GetCategoryPlaylistsRequestBuilder(categoryId);
    }
    private okhttp3.Call getSingleCall(String categoryId, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browse/categories/{category_id}"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleValidateBeforeCall(String categoryId, String locale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getSingle(Async)");
        }

        return getSingleCall(categoryId, locale, _callback);

    }


    private ApiResponse<CategoryObject> getSingleWithHttpInfo(String categoryId, String locale) throws ApiException {
        okhttp3.Call localVarCall = getSingleValidateBeforeCall(categoryId, locale, null);
        Type localVarReturnType = new TypeToken<CategoryObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAsync(String categoryId, String locale, final ApiCallback<CategoryObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleValidateBeforeCall(categoryId, locale, _callback);
        Type localVarReturnType = new TypeToken<CategoryObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRequestBuilder {
        private final String categoryId;
        private String locale;

        private GetSingleRequestBuilder(String categoryId) {
            this.categoryId = categoryId;
        }

        /**
         * Set locale
         * @param locale  (optional)
         * @return GetSingleRequestBuilder
         */
        public GetSingleRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Build call for getSingle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A category </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCall(categoryId, locale, _callback);
        }


        /**
         * Execute getSingle request
         * @return CategoryObject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A category </td><td>  -  </td></tr>
         </table>
         */
        public CategoryObject execute() throws ApiException {
            ApiResponse<CategoryObject> localVarResp = getSingleWithHttpInfo(categoryId, locale);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingle request with HTTP info returned
         * @return ApiResponse&lt;CategoryObject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A category </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategoryObject> executeWithHttpInfo() throws ApiException {
            return getSingleWithHttpInfo(categoryId, locale);
        }

        /**
         * Execute getSingle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A category </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategoryObject> _callback) throws ApiException {
            return getSingleAsync(categoryId, locale, _callback);
        }
    }

    /**
     * Get Single Browse Category 
     * Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
     * @param categoryId  (required)
     * @return GetSingleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A category </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRequestBuilder getSingle(String categoryId) throws IllegalArgumentException {
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new GetSingleRequestBuilder(categoryId);
    }
    private okhttp3.Call listSeveralCall(String locale, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browse/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSeveralValidateBeforeCall(String locale, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return listSeveralCall(locale, limit, offset, _callback);

    }


    private ApiResponse<CategoriesListSeveralResponse> listSeveralWithHttpInfo(String locale, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listSeveralValidateBeforeCall(locale, limit, offset, null);
        Type localVarReturnType = new TypeToken<CategoriesListSeveralResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSeveralAsync(String locale, Integer limit, Integer offset, final ApiCallback<CategoriesListSeveralResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSeveralValidateBeforeCall(locale, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CategoriesListSeveralResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSeveralRequestBuilder {
        private String locale;
        private Integer limit;
        private Integer offset;

        private ListSeveralRequestBuilder() {
        }

        /**
         * Set locale
         * @param locale  (optional)
         * @return ListSeveralRequestBuilder
         */
        public ListSeveralRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 20)
         * @return ListSeveralRequestBuilder
         */
        public ListSeveralRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return ListSeveralRequestBuilder
         */
        public ListSeveralRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listSeveral
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of categories </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSeveralCall(locale, limit, offset, _callback);
        }


        /**
         * Execute listSeveral request
         * @return CategoriesListSeveralResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of categories </td><td>  -  </td></tr>
         </table>
         */
        public CategoriesListSeveralResponse execute() throws ApiException {
            ApiResponse<CategoriesListSeveralResponse> localVarResp = listSeveralWithHttpInfo(locale, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSeveral request with HTTP info returned
         * @return ApiResponse&lt;CategoriesListSeveralResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of categories </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategoriesListSeveralResponse> executeWithHttpInfo() throws ApiException {
            return listSeveralWithHttpInfo(locale, limit, offset);
        }

        /**
         * Execute listSeveral request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A paged set of categories </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategoriesListSeveralResponse> _callback) throws ApiException {
            return listSeveralAsync(locale, limit, offset, _callback);
        }
    }

    /**
     * Get Several Browse Categories 
     * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
     * @return ListSeveralRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of categories </td><td>  -  </td></tr>
     </table>
     */
    public ListSeveralRequestBuilder listSeveral() throws IllegalArgumentException {
        return new ListSeveralRequestBuilder();
    }
}
