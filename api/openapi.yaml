openapi: 3.0.3
info:
  contact:
    name: Spotify for Developers Community
    url: https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer
  description: |
    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.

    In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/">OAuth 2.0</a>.

    The base URI for all Web API requests is `https://api.spotify.com/v1`.

    Need help? See our <a href="https://developer.spotify.com/documentation/web-api/guides/">Web API guides</a> for more information, or visit the <a href="https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer">Spotify for Developers community forum</a> to ask questions and connect with other developers.
  termsOfService: https://developer.spotify.com/terms/
  title: Spotify Web API
  version: 1.0.0
  x-konfig-ignore:
    object-with-no-properties: true
  x-konfig-has-globally-required-security: true
servers:
- url: https://api.spotify.com/v1
tags:
- name: Library
- name: Tracks
- name: Playlists
- name: Player
- name: Users
- name: Albums
- name: Artists
- name: Audiobooks
- name: Episodes
- name: Shows
- name: Categories
- name: Chapters
- name: Genres
- name: Markets
- name: Search
paths:
  /albums/{id}:
    get:
      description: |
        Get Spotify catalog information for a single album.
      operationId: Albums_getInformation
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the album.
          example: 4aawyAB9vmqN3uQ7FjRGTy
          title: Spotify Album ID
          type: string
          x-konfig-original-example: 4aawyAB9vmqN3uQ7FjRGTy
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathAlbumId-schema
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumObject'
          description: An album
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Album
      tags:
      - Albums
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--albums-id
      x-accepts: application/json
  /albums:
    get:
      description: |
        Get Spotify catalog information for multiple albums identified by their Spotify IDs.
      operationId: Albums_listSeveral
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs.
          example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          title: Spotify Album IDs
          type: string
          x-konfig-original-example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAlbumIds-schema
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsListSeveralResponse'
          description: A set of albums
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Several Albums
      tags:
      - Albums
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--albums
      x-accepts: application/json
  /albums/{id}/tracks:
    get:
      description: |
        Get Spotify catalog information about an album’s tracks.
        Optional parameters can be used to limit the number of tracks returned.
      operationId: Albums_getTracksById
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the album.
          example: 4aawyAB9vmqN3uQ7FjRGTy
          title: Spotify Album ID
          type: string
          x-konfig-original-example: 4aawyAB9vmqN3uQ7FjRGTy
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathAlbumId-schema
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSimplifiedTrackObject'
          description: Pages of tracks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Album Tracks
      tags:
      - Albums
      - Tracks
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--albums-id-tracks
      x-accepts: application/json
  /artists/{id}:
    get:
      description: |
        Get Spotify catalog information for a single artist identified by their unique Spotify ID.
      operationId: Artists_getCatalogInfo
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
          example: 0TnOYISbd1XYRBk9myaseg
          title: Spotify Artist ID
          type: string
          x-konfig-original-example: 0TnOYISbd1XYRBk9myaseg
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathArtistId-schema
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistObject'
          description: An artist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Artist
      tags:
      - Artists
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--artists-id
      x-accepts: application/json
  /artists:
    get:
      description: |
        Get Spotify catalog information for several artists based on their Spotify IDs.
      operationId: Artists_getCatalogInfo
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the artists. Maximum: 100 IDs.
          example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          title: Spotify Artist IDs
          type: string
          x-konfig-original-example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          x-konfig-generated-schema: konfig-generated-schema-paths--artists-get-parameters-0-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistsGetCatalogInfoResponse'
          description: A set of artists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Several Artists
      tags:
      - Artists
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--artists
      x-accepts: application/json
  /artists/{id}/albums:
    get:
      description: |
        Get Spotify catalog information about an artist's albums.
      operationId: Artists_getAlbumsById
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
          example: 0TnOYISbd1XYRBk9myaseg
          title: Spotify Artist ID
          type: string
          x-konfig-original-example: 0TnOYISbd1XYRBk9myaseg
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathArtistId-schema
        style: simple
      - explode: true
        in: query
        name: include_groups
        required: false
        schema:
          description: |
            A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>
            Valid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.
          example: "single,appears_on"
          title: "Groups to include (single, album, appears_on, compilation)"
          type: string
          x-konfig-original-example: "single,appears_on"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryIncludeGroups-schema
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingArtistDiscographyAlbumObject'
          description: Pages of albums
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Artist's Albums
      tags:
      - Artists
      - Albums
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--artists-id-albums
      x-accepts: application/json
  /artists/{id}/top-tracks:
    get:
      description: |
        Get Spotify catalog information about an artist's top tracks by country.
      operationId: Artists_getTopTracks
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
          example: 0TnOYISbd1XYRBk9myaseg
          title: Spotify Artist ID
          type: string
          x-konfig-original-example: 0TnOYISbd1XYRBk9myaseg
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathArtistId-schema
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistsGetTopTracksResponse'
          description: A set of tracks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Artist's Top Tracks
      tags:
      - Artists
      - Tracks
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--artists-id-top-tracks
      x-accepts: application/json
  /artists/{id}/related-artists:
    get:
      description: |
        Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community's listening history.
      operationId: Artists_getRelatedArtists
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
          example: 0TnOYISbd1XYRBk9myaseg
          title: Spotify Artist ID
          type: string
          x-konfig-original-example: 0TnOYISbd1XYRBk9myaseg
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathArtistId-schema
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistsGetCatalogInfoResponse'
          description: A set of artists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Artist's Related Artists
      tags:
      - Artists
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--artists-id-related-artists
      x-accepts: application/json
  /shows/{id}:
    get:
      description: |
        Get Spotify catalog information for a single show identified by its
        unique Spotify ID.
      operationId: Shows_getInformation
      parameters:
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the show.
          example: 38bS44xjbVVZ3No3ByF1dJ
          title: Spotify Show ID
          type: string
          x-konfig-original-example: 38bS44xjbVVZ3No3ByF1dJ
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathShowId-schema
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowObject'
          description: A show
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-read-playback-position
      summary: |
        Get Show
      tags:
      - Shows
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--shows-id
      x-accepts: application/json
  /shows:
    get:
      description: |
        Get Spotify catalog information for several shows based on their Spotify IDs.
      operationId: Shows_getMultipleShowsInfo
      parameters:
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs.
          example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          title: Ids
          type: string
          x-konfig-original-example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryShowIds-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowsGetMultipleShowsInfoResponse'
          description: A set of shows
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Several Shows
      tags:
      - Shows
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--shows
      x-accepts: application/json
  /shows/{id}/episodes:
    get:
      description: |
        Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned.
      operationId: Shows_getEpisodesById
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the show.
          example: 38bS44xjbVVZ3No3ByF1dJ
          title: Spotify Show ID
          type: string
          x-konfig-original-example: 38bS44xjbVVZ3No3ByF1dJ
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathShowId-schema
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSimplifiedEpisodeObject'
          description: Pages of episodes
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-read-playback-position
      summary: |
        Get Show Episodes
      tags:
      - Shows
      - Episodes
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--shows-id-episodes
      x-accepts: application/json
  /episodes/{id}:
    get:
      description: |
        Get Spotify catalog information for a single episode identified by its
        unique Spotify ID.
      operationId: Episodes_getSingleById
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)\
            \ for the episode."
          example: 512ojhOuo1ktJprKbVcKyQ
          title: Get an Episode
          type: string
          x-konfig-original-example: 512ojhOuo1ktJprKbVcKyQ
          x-konfig-generated-schema: konfig-generated-schema-paths--episodes-id-get-parameters-0-schema
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EpisodeObject'
          description: An episode
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-read-playback-position
      summary: |
        Get Episode
      tags:
      - Episodes
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--episodes-id
      x-accepts: application/json
  /episodes:
    get:
      description: |
        Get Spotify catalog information for several episodes based on their Spotify IDs.
      operationId: Episodes_getSeveral
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the episodes. Maximum: 50 IDs.
          example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
          title: Ids
          type: string
          x-konfig-original-example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
          x-konfig-generated-schema: konfig-generated-schema-paths--episodes-get-parameters-0-schema
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EpisodesGetSeveralResponse'
          description: A set of episodes
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-read-playback-position
      summary: |
        Get Several Episodes
      tags:
      - Episodes
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--episodes
      x-accepts: application/json
  /audiobooks/{id}:
    get:
      description: |
        Get Spotify catalog information for a single audiobook. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.
      operationId: Audiobooks_getCatalogInfo
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the audiobook.
          example: 7iHfbu1YPACw6oZPAFJtqe
          title: Spotify Audiobook ID
          type: string
          x-konfig-original-example: 7iHfbu1YPACw6oZPAFJtqe
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathAudiobookId-schema
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudiobookObject'
          description: An Audiobook
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudiobooksGetCatalogInfoResponse'
          description: |
            The request contains malformed data in path, query parameters, or body.
          x-do-not-generate: true
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudiobooksGetCatalogInfo404Response'
          description: |
            The requested resource cannot be found.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get an Audiobook
      tags:
      - Audiobooks
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--audiobooks-id
      x-accepts: application/json
  /audiobooks:
    get:
      description: |
        Get Spotify catalog information for several audiobooks identified by their Spotify IDs. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.
      operationId: Audiobooks_getSeveral
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ`. Maximum: 50 IDs.
          example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          title: Spotify Audiobook IDs
          type: string
          x-konfig-original-example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAudiobookIds-schema
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudiobooksGetSeveralResponse'
          description: A set of audiobooks. If one of the requested audiobooks is
            unavailable then you'll find a `null` item in the `audiobooks` array where
            the audiobook object would otherwise be.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Several Audiobooks
      tags:
      - Audiobooks
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--audiobooks
      x-accepts: application/json
  /audiobooks/{id}/chapters:
    get:
      description: |
        Get Spotify catalog information about an audiobook's chapters. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.
      operationId: Audiobooks_getChaptersById
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the audiobook.
          example: 7iHfbu1YPACw6oZPAFJtqe
          title: Spotify Audiobook ID
          type: string
          x-konfig-original-example: 7iHfbu1YPACw6oZPAFJtqe
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathAudiobookId-schema
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSimplifiedChapterObject'
          description: Pages of chapters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Audiobook Chapters
      tags:
      - Audiobooks
      - Chapters
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--audiobooks-id-chapters
      x-accepts: application/json
  /me/audiobooks:
    delete:
      description: |
        Remove one or more audiobooks from the Spotify user's library.
      operationId: Audiobooks_removeFromLibrary
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ`. Maximum: 50 IDs.
          example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          title: Spotify Audiobook IDs
          type: string
          x-konfig-original-example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAudiobookIds-schema
        style: form
      responses:
        "200":
          description: Audiobook(s) have been removed from the library
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Remove User's Saved Audiobooks
      tags:
      - Audiobooks
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-delete--me-audiobooks
      x-accepts: application/json
    get:
      description: |
        Get a list of the audiobooks saved in the current Spotify user's 'Your Music' library.
      operationId: Audiobooks_listSaved
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSimplifiedAudiobookObject'
          description: Pages of audiobooks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Get User's Saved Audiobooks
      tags:
      - Audiobooks
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-audiobooks
      x-accepts: application/json
    put:
      description: |
        Save one or more audiobooks to the current Spotify user's library.
      operationId: Audiobooks_saveCurrentUserLibrary
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ`. Maximum: 50 IDs.
          example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          title: Spotify Audiobook IDs
          type: string
          x-konfig-original-example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAudiobookIds-schema
        style: form
      responses:
        "200":
          description: Audiobook(s) are saved to the library
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Save Audiobooks for Current User
      tags:
      - Audiobooks
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-put--me-audiobooks
      x-accepts: application/json
  /me/audiobooks/contains:
    get:
      description: |
        Check if one or more audiobooks are already saved in the current Spotify user's library.
      operationId: Audiobooks_checkUserSaved
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ`. Maximum: 50 IDs.
          example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          title: Spotify Audiobook IDs
          type: string
          x-konfig-original-example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAudiobookIds-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudiobooksCheckUserSavedResponse'
          description: Array of booleans
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Check User's Saved Audiobooks
      tags:
      - Audiobooks
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-audiobooks-contains
      x-accepts: application/json
  /chapters/{id}:
    get:
      description: |
        Get Spotify catalog information for a single audiobook chapter. Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.
      operationId: Chapters_getChapterInfo
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the chapter.
          example: 0D5wENdkdwbqlrHoaJ9g29
          title: Spotify Chapter ID
          type: string
          x-konfig-original-example: 0D5wENdkdwbqlrHoaJ9g29
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathChapterId-schema
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterObject'
          description: A Chapter
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get a Chapter
      tags:
      - Chapters
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--chapters-id
      x-accepts: application/json
  /chapters:
    get:
      description: |
        Get Spotify catalog information for several audiobook chapters identified by their Spotify IDs. Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.
      operationId: Chapters_getMultipleByIds
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU`. Maximum: 50 IDs.
          example: "0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU,0D5wENdkdwbqlrHoaJ9g29"
          title: Spotify Chapter IDs
          type: string
          x-konfig-original-example: "0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU,0D5wENdkdwbqlrHoaJ9g29"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryChapterIds-schema
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChaptersGetMultipleByIdsResponse'
          description: A set of chapters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Several Chapters
      tags:
      - Chapters
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--chapters
      x-accepts: application/json
  /tracks/{id}:
    get:
      description: |
        Get Spotify catalog information for a single track identified by its
        unique Spotify ID.
      operationId: Tracks_getBySpotifyId
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the track.
          example: 11dFghVXANMlKmJXsNCbNl
          title: Spotify Track ID
          type: string
          x-konfig-original-example: 11dFghVXANMlKmJXsNCbNl
          x-konfig-generated-schema: konfig-generated-schema-paths--tracks-id-get-parameters-0-schema
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackObject'
          description: A track
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Track
      tags:
      - Tracks
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataWithMachineLearningPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--tracks-id
      x-accepts: application/json
  /tracks:
    get:
      description: |
        Get Spotify catalog information for multiple tracks based on their Spotify IDs.
      operationId: Tracks_getMultipleByIds
      parameters:
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 100 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
          x-konfig-original-example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          x-konfig-generated-schema: konfig-generated-schema-paths--tracks-get-parameters-1-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistsGetTopTracksResponse'
          description: A set of tracks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Several Tracks
      tags:
      - Tracks
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataWithMachineLearningPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--tracks
      x-accepts: application/json
  /search:
    get:
      description: |
        Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks
        that match a keyword string. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.
      operationId: Search_spotifyCatalogInfo
      parameters:
      - explode: true
        in: query
        name: q
        required: true
        schema:
          description: |
            Your search query.

            You can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.

            The `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />
            The `album` filter can be used while searching albums and tracks.<br />
            The `genre` filter can be used while searching artists and tracks.<br />
            The `isrc` and `track` filters can be used while searching tracks.<br />
            The `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />
          example: remaster%20track:Doxy%20artist:Miles%20Davis
          title: Query
          type: string
          x-konfig-original-example: remaster%20track:Doxy%20artist:Miles%20Davis
          x-konfig-generated-schema: konfig-generated-schema-paths--search-get-parameters-0-schema
        style: form
      - explode: false
        in: query
        name: type
        required: true
        schema:
          description: |
            A comma-separated list of item types to search across. Search results include hits
            from all the specified item types. For example: `q=abacab&type=album,track` returns
            both albums and tracks matching "abacab".
          items:
            enum:
            - album
            - artist
            - playlist
            - track
            - show
            - episode
            - audiobook
            type: string
          title: Item type
          type: array
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of results to return in each item type.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-paths--search-get-parameters-3-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first result to return. Use
            with limit to get the next page of search results.
          example: 5
          maximum: 1000
          minimum: 0
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-paths--search-get-parameters-4-schema
        style: form
      - explode: true
        in: query
        name: include_external
        required: false
        schema:
          description: |
            If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks
            the content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.
          enum:
          - audio
          title: Include External
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSpotifyCatalogInfoResponse'
          description: Search response
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Search for Item
      tags:
      - Search
      x-spotify-policy-list:
      - $ref: '#/components/x-spotify-policy/policies/MachineLearning'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--search
      x-accepts: application/json
  /me:
    get:
      description: |
        Get detailed profile information about the current user (including the
        current user's username).
      operationId: Users_getCurrentUserProfile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserObject'
          description: A user
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-read-private
        - user-read-email
      summary: |
        Get Current User's Profile
      tags:
      - Users
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me
      x-accepts: application/json
  /playlists/{playlist_id}:
    get:
      description: |
        Get a playlist owned by a Spotify user.
      operationId: Playlists_getPlaylistById
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: true
        in: query
        name: fields
        required: false
        schema:
          description: |
            Filters for the query: a comma-separated list of the
            fields to return. If omitted, all fields are returned. For example, to get
            just the playlist''s description and URI: `fields=description,uri`. A dot
            separator can be used to specify non-reoccurring fields, while parentheses
            can be used to specify reoccurring fields within objects. For example, to
            get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.
            Use multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`.
            Fields can be excluded by prefixing them with an exclamation mark, for example:
            `fields=tracks.items(track(name,href,album(!name,href)))`
          example: "items(added_by.id,track(name,href,album(name,href)))"
          title: Fields
          type: string
          x-konfig-original-example: "items(added_by.id,track(name,href,album(name,href)))"
          x-konfig-generated-schema: konfig-generated-schema-paths--playlists-playlist_id-get-parameters-2-schema
        style: form
      - explode: true
        in: query
        name: additional_types
        required: false
        schema:
          description: |
            A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
            _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
            In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
          title: Additional Types
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistObject'
          description: A playlist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Playlist
      tags:
      - Playlists
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataWithMachineLearningPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--playlists-playlist_id
      x-accepts: application/json
    put:
      description: |
        Change a playlist's name and public/private state. (The user must, of
        course, own the playlist.)
      operationId: Playlists_updateDetails
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistsUpdateDetailsRequest'
      responses:
        "200":
          description: Playlist updated
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Change Playlist Details
      tags:
      - Playlists
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-put--playlists-playlist_id
      x-content-type: application/json
      x-accepts: application/json
  /playlists/{playlist_id}/tracks:
    delete:
      description: |
        Remove one or more items from a user's playlist.
      operationId: Playlists_removeItems
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistsRemoveItemsRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistsRemoveItemsResponse'
          description: A snapshot ID for the playlist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Remove Playlist Items
      tags:
      - Playlists
      - Tracks
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-delete--playlists-playlist_id-tracks
      x-content-type: application/json
      x-accepts: application/json
    get:
      description: |
        Get full details of the items of a playlist owned by a Spotify user.
      operationId: Playlists_getPlaylistItems
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        style: simple
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: true
        in: query
        name: fields
        required: false
        schema:
          description: |
            Filters for the query: a comma-separated list of the
            fields to return. If omitted, all fields are returned. For example, to get
            just the total number of items and the request limit:<br/>`fields=total,limit`<br/>A
            dot separator can be used to specify non-reoccurring fields, while parentheses
            can be used to specify reoccurring fields within objects. For example, to
            get just the added date and user ID of the adder:<br/>`fields=items(added_at,added_by.id)`<br/>Use
            multiple parentheses to drill down into nested objects, for example:<br/>`fields=items(track(name,href,album(name,href)))`<br/>Fields
            can be excluded by prefixing them with an exclamation mark, for example:<br/>`fields=items.track.album(!external_urls,images)`
          example: "items(added_by.id,track(name,href,album(name,href)))"
          title: Fields
          type: string
          x-konfig-original-example: "items(added_by.id,track(name,href,album(name,href)))"
          x-konfig-generated-schema: konfig-generated-schema-paths--playlists-playlist_id-tracks-get-parameters-2-schema
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      - explode: true
        in: query
        name: additional_types
        required: false
        schema:
          description: |
            A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
            _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
            In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
          title: Additional Types
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingPlaylistTrackObject'
          description: Pages of tracks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - playlist-read-private
      summary: |
        Get Playlist Items
      tags:
      - Playlists
      - Tracks
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataWithMachineLearningPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--playlists-playlist_id-tracks
      x-accepts: application/json
    post:
      description: |
        Add one or more items to a user's playlist.
      operationId: Playlists_addItems
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        style: simple
      - explode: true
        in: query
        name: position
        required: false
        schema:
          description: |
            The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.
          example: 0
          title: Position (append by default)
          type: integer
          x-konfig-original-example: 0
          x-konfig-generated-schema: konfig-generated-schema-paths--playlists-playlist_id-tracks-post-parameters-1-schema
        style: form
      - explode: true
        in: query
        name: uris
        required: false
        schema:
          description: |
            A comma-separated list of [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to add, can be track or episode URIs. For example:<br/>`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be added in one request. <br/>
            _**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._
          example: "spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M"
          title: Spotify Track URIs
          type: string
          x-konfig-original-example: "spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M"
          x-konfig-generated-schema: konfig-generated-schema-paths--playlists-playlist_id-tracks-post-parameters-2-schema
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistsAddItemsRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistsRemoveItemsResponse'
          description: A snapshot ID for the playlist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Add Items to Playlist
      tags:
      - Playlists
      - Tracks
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: application/json
      x-accepts: application/json
    put:
      description: |
        Either reorder or replace items in a playlist depending on the request's parameters.
        To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body.
        To replace items, include `uris` as either a query parameter or in the request's body.
        Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.
        <br/>
        **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.
        These operations can't be applied together in a single request.
      operationId: Playlists_updatePlaylistItems
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        style: simple
      - explode: true
        in: query
        name: uris
        required: false
        schema:
          description: |
            A comma-separated list of [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`<br/>A maximum of 100 items can be set in one request.
          title: Spotify Track URIs
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistsUpdatePlaylistItemsRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistsRemoveItemsResponse'
          description: A snapshot ID for the playlist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Update Playlist Items
      tags:
      - Playlists
      - Tracks
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: application/json
      x-accepts: application/json
  /me/playlists:
    get:
      description: |
        Get a list of the playlists owned or followed by the current Spotify
        user.
      operationId: Playlists_getUserPlaylists
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            'The index of the first playlist to return. Default:
            0 (the first object). Maximum offset: 100.000\. Use with `limit` to get the
            next set of playlists.'
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-paths--me-playlists-get-parameters-1-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingPlaylistObject'
          description: A paged set of playlists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - playlist-read-private
      summary: |
        Get Current User's Playlists
      tags:
      - Playlists
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-playlists
      x-accepts: application/json
  /me/albums:
    delete:
      description: |
        Remove one or more albums from the current user's 'Your Music' library.
      operationId: Albums_removeSaved
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs.
          example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          title: Spotify Album IDs
          type: string
          x-konfig-original-example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAlbumIds-schema
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlbumsRemoveSavedRequest'
      responses:
        "200":
          description: Album(s) have been removed from the library
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Remove Users' Saved Albums
      tags:
      - Albums
      - Library
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: application/json
      x-accepts: application/json
    get:
      description: |
        Get a list of the albums saved in the current Spotify user's 'Your Music' library.
      operationId: Albums_getSaved
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSavedAlbumObject'
          description: Pages of albums
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Get User's Saved Albums
      tags:
      - Albums
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-albums
      x-accepts: application/json
    put:
      description: |
        Save one or more albums to the current user's 'Your Music' library.
      operationId: Albums_saveCurrentUserLibrary
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs.
          example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          title: Spotify Album IDs
          type: string
          x-konfig-original-example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAlbumIds-schema
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlbumsSaveCurrentUserLibraryRequest'
      responses:
        "200":
          description: The album is saved
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Save Albums for Current User
      tags:
      - Albums
      - Library
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: application/json
      x-accepts: application/json
  /me/albums/contains:
    get:
      description: |
        Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.
      operationId: Albums_checkSaved
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs.
          example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          title: Spotify Album IDs
          type: string
          x-konfig-original-example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAlbumIds-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudiobooksCheckUserSavedResponse'
          description: Array of booleans
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Check User's Saved Albums
      tags:
      - Albums
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-albums-contains
      x-accepts: application/json
  /me/tracks:
    delete:
      description: |
        Remove one or more tracks from the current user's 'Your Music' library.
      operationId: Tracks_removeFromLibrary
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
          x-konfig-original-example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryTrackIds-schema
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TracksRemoveFromLibraryRequest'
      responses:
        "200":
          description: Track removed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Remove User's Saved Tracks
      tags:
      - Tracks
      - Library
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: application/json
      x-accepts: application/json
    get:
      description: |
        Get a list of the songs saved in the current Spotify user's 'Your Music' library.
      operationId: Tracks_getUserSaved
      parameters:
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSavedTrackObject'
          description: Pages of tracks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Get User's Saved Tracks
      tags:
      - Tracks
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-tracks
      x-accepts: application/json
    put:
      description: |
        Save one or more tracks to the current user's 'Your Music' library.
      operationId: Tracks_saveForCurrentUser
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
          x-konfig-original-example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryTrackIds-schema
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TracksSaveForCurrentUserRequest'
      responses:
        "200":
          description: Track saved
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Save Tracks for Current User
      tags:
      - Tracks
      - Library
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: application/json
      x-accepts: application/json
  /me/tracks/contains:
    get:
      description: |
        Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.
      operationId: Tracks_checkSaved
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
          x-konfig-original-example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryTrackIds-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudiobooksCheckUserSavedResponse'
          description: Array of booleans
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Check User's Saved Tracks
      tags:
      - Tracks
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-tracks-contains
      x-accepts: application/json
  /me/episodes:
    delete:
      description: |
        Remove one or more episodes from the current user's library.<br/>
        This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
      operationId: Episodes_removeFromLibrary
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
          x-konfig-original-example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryTrackIds-schema
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EpisodesRemoveFromLibraryRequest'
      responses:
        "200":
          description: Episode removed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Remove User's Saved Episodes
      tags:
      - Episodes
      - Library
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: application/json
      x-accepts: application/json
    get:
      description: |
        Get a list of the episodes saved in the current Spotify user's library.<br/>
        This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
      operationId: Episodes_getUserSavedEpisodes
      parameters:
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSavedEpisodeObject'
          description: Pages of episodes
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-read
        - user-read-playback-position
      summary: |
        Get User's Saved Episodes
      tags:
      - Episodes
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-episodes
      x-accepts: application/json
    put:
      description: |
        Save one or more episodes to the current user's library.<br/>
        This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
      operationId: Episodes_saveCurrentUserLibrary
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). Maximum: 50 IDs.
          example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
          title: Spotify Episodes IDs
          type: string
          x-konfig-original-example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
          x-konfig-generated-schema: konfig-generated-schema-paths--me-episodes-put-parameters-0-schema
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EpisodesSaveCurrentUserLibraryRequest'
      responses:
        "200":
          description: Episode saved
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Save Episodes for Current User
      tags:
      - Episodes
      - Library
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: application/json
      x-accepts: application/json
  /me/episodes/contains:
    get:
      description: |
        Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes' library.<br/>
        This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)..
      operationId: Episodes_checkSavedEpisodes
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the episodes. Maximum: 50 IDs.
          example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
          title: Spotify Episode IDs
          type: string
          x-konfig-original-example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
          x-konfig-generated-schema: konfig-generated-schema-paths--me-episodes-contains-get-parameters-0-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudiobooksCheckUserSavedResponse'
          description: Array of booleans
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Check User's Saved Episodes
      tags:
      - Episodes
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-episodes-contains
      x-accepts: application/json
  /me/shows:
    delete:
      description: |
        Delete one or more shows from current Spotify user's library.
      operationId: Shows_removeUserLibrary
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs.
          example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          title: Ids
          type: string
          x-konfig-original-example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryShowIds-schema
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      responses:
        "200":
          description: Show removed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Remove User's Saved Shows
      tags:
      - Shows
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-delete--me-shows
      x-accepts: application/json
    get:
      description: |
        Get a list of shows saved in the current Spotify user's library. Optional parameters can be used to limit the number of shows returned.
      operationId: Shows_getUserSavedShows
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingSavedShowObject'
          description: Pages of shows
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Get User's Saved Shows
      tags:
      - Shows
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-shows
      x-accepts: application/json
    put:
      description: |
        Save one or more shows to current Spotify user's library.
      operationId: Shows_saveCurrentUserLibrary
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs.
          example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          title: Ids
          type: string
          x-konfig-original-example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryShowIds-schema
        style: form
      responses:
        "200":
          description: Show saved
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-modify
      summary: |
        Save Shows for Current User
      tags:
      - Shows
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-put--me-shows
      x-accepts: application/json
  /me/shows/contains:
    get:
      description: |
        Check if one or more shows is already saved in the current Spotify user's library.
      operationId: Shows_checkSavedShows
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs.
          example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          title: Ids
          type: string
          x-konfig-original-example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryShowIds-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudiobooksCheckUserSavedResponse'
          description: Array of booleans
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-library-read
      summary: |
        Check User's Saved Shows
      tags:
      - Shows
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-shows-contains
      x-accepts: application/json
  /me/top/{type}:
    get:
      description: |
        Get the current user's top artists or tracks based on calculated affinity.
      operationId: Users_getTopItems
      parameters:
      - explode: false
        in: path
        name: type
        required: true
        schema:
          description: |
            The type of entity to return. Valid values: `artists` or `tracks`
          enum:
          - artists
          - tracks
          title: Type
          type: string
        style: simple
      - explode: true
        in: query
        name: time_range
        required: false
        schema:
          default: medium_term
          description: |
            Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term` (approximately last 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`
          example: medium_term
          title: Time Range
          type: string
          x-konfig-original-example: medium_term
          x-konfig-generated-schema: konfig-generated-schema-paths--me-top-type-get-parameters-1-schema
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersGetTopItemsResponse'
          description: Pages of artists or tracks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-top-read
      summary: |
        Get User's Top Items
      tags:
      - Users
      - Tracks
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-top-type
      x-accepts: application/json
  /users/{user_id}:
    get:
      description: |
        Get public profile information about a Spotify user.
      operationId: Users_getUserProfile
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          description: |
            The user's [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids).
          example: smedjan
          title: User ID
          type: string
          x-konfig-original-example: smedjan
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathUserId-schema
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserObject'
          description: A user
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get User's Profile
      tags:
      - Users
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-user_id
      x-accepts: application/json
  /users/{user_id}/playlists:
    get:
      description: |
        Get a list of the playlists owned or followed by a Spotify user.
      operationId: Playlists_getUserPlaylists
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          description: |
            The user's [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids).
          example: smedjan
          title: User ID
          type: string
          x-konfig-original-example: smedjan
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathUserId-schema
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first playlist to return. Default:
            0 (the first object). Maximum offset: 100.000\. Use with `limit` to get the
            next set of playlists.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-paths--users-user_id-playlists-get-parameters-2-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingPlaylistObject'
          description: A paged set of playlists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - playlist-read-private
        - playlist-read-collaborative
      summary: |
        Get User's Playlists
      tags:
      - Playlists
      - Users
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-user_id-playlists
      x-accepts: application/json
    post:
      description: |
        Create a playlist for a Spotify user. (The playlist will be empty until
        you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).)
        Each user is generally limited to a maximum of 11000 playlists.
      operationId: Playlists_createPlaylist
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          description: |
            The user's [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids).
          example: smedjan
          title: User ID
          type: string
          x-konfig-original-example: smedjan
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathUserId-schema
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistsCreatePlaylistRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistObject'
          description: A playlist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Create Playlist
      tags:
      - Playlists
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--users-user_id-playlists
      x-content-type: application/json
      x-accepts: application/json
  /playlists/{playlist_id}/followers:
    delete:
      description: |
        Remove the current user as a follower of a playlist.
      operationId: Users_unfollowPlaylist
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        style: simple
      responses:
        "200":
          description: Playlist unfollowed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Unfollow Playlist
      tags:
      - Users
      - Playlists
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-delete--playlists-playlist_id-followers
      x-accepts: application/json
    put:
      description: |
        Add the current user as a follower of a playlist.
      operationId: Users_followPlaylist
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersFollowPlaylistRequest'
      responses:
        "200":
          description: Playlist followed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Follow Playlist
      tags:
      - Users
      - Playlists
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-put--playlists-playlist_id-followers
      x-content-type: application/json
      x-accepts: application/json
  /browse/featured-playlists:
    get:
      description: |
        Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).
      operationId: Playlists_getFeatured
      parameters:
      - explode: true
        in: query
        name: locale
        required: false
        schema:
          description: |
            The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning &quot;Spanish (Mexico)&quot;. Provide this parameter if you want the category strings returned in a particular language.<br/> _**Note**: if `locale` is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English)._
          example: sv_SE
          title: Locale
          type: string
          x-konfig-original-example: sv_SE
          x-konfig-generated-schema: konfig-generated-schema-paths--browse-featured-playlists-get-parameters-0-schema
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingFeaturedPlaylistObject'
          description: A paged set of playlists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Featured Playlists
      tags:
      - Playlists
      x-spotify-policy-list:
      - $ref: '#/components/x-spotify-policy/policies/MultipleIntegrations'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--browse-featured-playlists
      x-accepts: application/json
  /browse/categories:
    get:
      description: |
        Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).
      operationId: Categories_listSeveral
      parameters:
      - explode: true
        in: query
        name: locale
        required: false
        schema:
          description: |
            The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning &quot;Spanish (Mexico)&quot;. Provide this parameter if you want the category strings returned in a particular language.<br/> _**Note**: if `locale` is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English)._
          example: sv_SE
          title: Locale
          type: string
          x-konfig-original-example: sv_SE
          x-konfig-generated-schema: konfig-generated-schema-paths--browse-categories-get-parameters-0-schema
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesListSeveralResponse'
          description: A paged set of categories
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Several Browse Categories
      tags:
      - Categories
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--browse-categories
      x-accepts: application/json
  /browse/categories/{category_id}:
    get:
      description: |
        Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).
      operationId: Categories_getSingle
      parameters:
      - explode: false
        in: path
        name: category_id
        required: true
        schema:
          description: |
            The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) for the category.
          example: dinner
          title: Category ID
          type: string
          x-konfig-original-example: dinner
          x-konfig-generated-schema: konfig-generated-schema-paths--browse-categories-category_id-get-parameters-0-schema
        style: simple
      - explode: true
        in: query
        name: locale
        required: false
        schema:
          description: |
            The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning &quot;Spanish (Mexico)&quot;. Provide this parameter if you want the category strings returned in a particular language.<br/> _**Note**: if `locale` is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English)._
          example: sv_SE
          title: Locale
          type: string
          x-konfig-original-example: sv_SE
          x-konfig-generated-schema: konfig-generated-schema-paths--browse-categories-category_id-get-parameters-1-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryObject'
          description: A category
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Single Browse Category
      tags:
      - Categories
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--browse-categories-category_id
      x-accepts: application/json
  /browse/categories/{category_id}/playlists:
    get:
      description: |
        Get a list of Spotify playlists tagged with a particular category.
      operationId: Playlists_getCategoryPlaylists
      parameters:
      - explode: false
        in: path
        name: category_id
        required: true
        schema:
          description: |
            The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) for the category.
          example: dinner
          title: Category ID
          type: string
          x-konfig-original-example: dinner
          x-konfig-generated-schema: konfig-generated-schema-paths--browse-categories-category_id-playlists-get-parameters-0-schema
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingFeaturedPlaylistObject'
          description: A paged set of playlists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Category's Playlists
      tags:
      - Playlists
      - Categories
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--browse-categories-category_id-playlists
      x-accepts: application/json
  /playlists/{playlist_id}/images:
    get:
      description: |
        Get the current image associated with a specific playlist.
      operationId: Playlists_getCoverImage
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistsGetCoverImageResponse'
          description: A set of images
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Playlist Cover Image
      tags:
      - Playlists
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/metadataWithMachineLearningPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--playlists-playlist_id-images
      x-accepts: application/json
    put:
      description: |
        Replace the image used to represent a specific playlist.
      operationId: Playlists_replaceCoverImage
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        style: simple
      requestBody:
        content:
          image/jpeg:
            schema:
              $ref: '#/components/schemas/PlaylistsReplaceCoverImageRequest'
      responses:
        "202":
          description: Image uploaded
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - ugc-image-upload
        - playlist-modify-public
        - playlist-modify-private
      summary: |
        Add Custom Playlist Cover Image
      tags:
      - Playlists
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: image/jpeg
      x-accepts: application/json
  /browse/new-releases:
    get:
      description: |
        Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).
      operationId: Albums_getNewReleases
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetNewReleasesResponse'
          description: A paged set of albums
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get New Releases
      tags:
      - Albums
      x-spotify-policy-list:
      - $ref: '#/components/x-spotify-policy/policies/MultipleIntegrations'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--browse-new-releases
      x-accepts: application/json
  /me/following:
    delete:
      description: |
        Remove the current user as a follower of one or more artists or other Spotify users.
      operationId: Users_unfollowArtistsUsers
      parameters:
      - explode: true
        in: query
        name: type
        required: true
        schema:
          description: |
            The ID type: either `artist` or `user`.
          enum:
          - artist
          - user
          example: artist
          title: Item Type
          type: string
          x-konfig-original-example: artist
          x-konfig-generated-schema: konfig-generated-schema-paths--me-following-delete-parameters-0-schema
        style: form
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50 IDs can be sent in one request.
          example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          title: Spotify IDs
          type: string
          x-konfig-original-example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          x-konfig-generated-schema: konfig-generated-schema-paths--me-following-delete-parameters-1-schema
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUnfollowArtistsUsersRequest'
      responses:
        "200":
          description: Artist or user unfollowed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-follow-modify
      summary: |
        Unfollow Artists or Users
      tags:
      - Users
      - Artists
      - Library
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: application/json
      x-accepts: application/json
    get:
      description: |
        Get the current user's followed artists.
      operationId: Users_getFollowedArtists
      parameters:
      - explode: true
        in: query
        name: type
        required: true
        schema:
          description: |
            The ID type: currently only `artist` is supported.
          enum:
          - artist
          example: artist
          title: Item Type
          type: string
          x-konfig-original-example: artist
          x-konfig-generated-schema: konfig-generated-schema-paths--me-following-get-parameters-0-schema
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          description: |
            The last artist ID retrieved from the previous request.
          example: 0I2XqVXqHScXjHhk6AYYRe
          title: After
          type: string
          x-konfig-original-example: 0I2XqVXqHScXjHhk6AYYRe
          x-konfig-generated-schema: konfig-generated-schema-paths--me-following-get-parameters-1-schema
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20\. Minimum: 1\. Maximum: 50\.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-paths--me-following-get-parameters-2-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersGetFollowedArtistsResponse'
          description: A paged set of artists
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-follow-read
      summary: |
        Get Followed Artists
      tags:
      - Users
      - Library
      - Artists
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-following
      x-accepts: application/json
    put:
      description: |
        Add the current user as a follower of one or more artists or other Spotify users.
      operationId: Users_followArtistsOrUsers
      parameters:
      - explode: true
        in: query
        name: type
        required: true
        schema:
          description: |
            The ID type.
          enum:
          - artist
          - user
          example: artist
          title: Item Type
          type: string
          x-konfig-original-example: artist
          x-konfig-generated-schema: konfig-generated-schema-paths--me-following-put-parameters-0-schema
        style: form
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids).
            A maximum of 50 IDs can be sent in one request.
          example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          title: Spotify IDs
          type: string
          x-konfig-original-example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          x-konfig-generated-schema: konfig-generated-schema-paths--me-following-put-parameters-1-schema
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersFollowArtistsOrUsersRequest'
      responses:
        "204":
          description: Artist or user followed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-follow-modify
      summary: |
        Follow Artists or Users
      tags:
      - Users
      - Artists
      - Library
      x-konfig-operation-can-have-single-parameter: false
      x-content-type: application/json
      x-accepts: application/json
  /me/following/contains:
    get:
      description: |
        Check to see if the current user is following one or more artists or other Spotify users.
      operationId: Users_checkFollowingArtistsUsers
      parameters:
      - explode: true
        in: query
        name: type
        required: true
        schema:
          description: |
            The ID type: either `artist` or `user`.
          enum:
          - artist
          - user
          example: artist
          title: Item Type
          type: string
          x-konfig-original-example: artist
          x-konfig-generated-schema: konfig-generated-schema-paths--me-following-contains-get-parameters-0-schema
        style: form
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) to check. For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50 IDs can be sent in one request.
          example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          title: Spotify IDs
          type: string
          x-konfig-original-example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          x-konfig-generated-schema: konfig-generated-schema-paths--me-following-contains-get-parameters-1-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudiobooksCheckUserSavedResponse'
          description: Array of booleans
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-follow-read
      summary: |
        Check If User Follows Artists or Users
      tags:
      - Users
      - Artists
      - Library
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-following-contains
      x-accepts: application/json
  /playlists/{playlist_id}/followers/contains:
    get:
      description: |
        Check to see if one or more Spotify users are following a specified playlist.
      operationId: Users_checkIfFollowsPlaylist
      parameters:
      - explode: false
        in: path
        name: playlist_id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        style: simple
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of [Spotify User IDs](/documentation/web-api/concepts/spotify-uris-ids) ; the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids.
          example: "jmperezperez,thelinmichael,wizzler"
          title: Spotify user IDs
          type: string
          x-konfig-original-example: "jmperezperez,thelinmichael,wizzler"
          x-konfig-generated-schema: konfig-generated-schema-paths--playlists-playlist_id-followers-contains-get-parameters-1-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudiobooksCheckUserSavedResponse'
          description: Array of booleans
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Check if Users Follow Playlist
      tags:
      - Users
      - Playlists
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--playlists-playlist_id-followers-contains
      x-accepts: application/json
  /audio-features:
    get:
      description: |
        Get audio features for multiple tracks based on their Spotify IDs.
      operationId: Tracks_getMultipleAudioFeatures
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids)
            for the tracks. Maximum: 100 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
          x-konfig-original-example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          x-konfig-generated-schema: konfig-generated-schema-paths--audio-features-get-parameters-0-schema
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TracksGetMultipleAudioFeaturesResponse'
          description: A set of audio features
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Several Tracks' Audio Features
      tags:
      - Tracks
      x-spotify-policy-list:
      - $ref: '#/components/x-spotify-policy/policies/MachineLearning'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--audio-features
      x-accepts: application/json
  /audio-features/{id}:
    get:
      description: |
        Get audio feature information for a single track identified by its unique
        Spotify ID.
      operationId: Tracks_getAudioFeaturesById
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          example: 11dFghVXANMlKmJXsNCbNl
          title: Spotify Track ID
          type: string
          x-konfig-original-example: 11dFghVXANMlKmJXsNCbNl
          x-konfig-generated-schema: konfig-generated-schema-paths--audio-features-id-get-parameters-0-schema
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioFeaturesObject'
          description: Audio features for one track
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Track's Audio Features
      tags:
      - Tracks
      x-spotify-policy-list:
      - $ref: '#/components/x-spotify-policy/policies/MachineLearning'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--audio-features-id
      x-accepts: application/json
  /audio-analysis/{id}:
    get:
      description: |
        Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre.
      operationId: Tracks_getAudioAnalysis
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the track.
          example: 11dFghVXANMlKmJXsNCbNl
          title: Spotify Track ID
          type: string
          x-konfig-original-example: 11dFghVXANMlKmJXsNCbNl
          x-konfig-generated-schema: konfig-generated-schema-paths--audio-analysis-id-get-parameters-0-schema
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioAnalysisObject'
          description: Audio analysis for one track
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Track's Audio Analysis
      tags:
      - Tracks
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--audio-analysis-id
      x-accepts: application/json
  /recommendations:
    get:
      description: |
        Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.

        For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.
      operationId: Tracks_getRecommendations
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The target size of the list of recommended tracks. For seeds with unusually small pools or when highly restrictive filtering is applied, it may be impossible to generate the requested number of recommended tracks. Debugging information for such cases is available in the response. Default: 20\. Minimum: 1\. Maximum: 100.
          example: 10
          maximum: 100
          minimum: 1
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-paths--recommendations-get-parameters-0-schema
        style: form
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: true
        in: query
        name: seed_artists
        required: true
        schema:
          description: |
            A comma separated list of [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for seed artists.  Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.<br/> _**Note**: only required if `seed_genres` and `seed_tracks` are not set_.
          example: 4NHQUGzhtTLFvgF5SZesLK
          title: Spotify Artist ID Seeds
          type: string
          x-konfig-original-example: 4NHQUGzhtTLFvgF5SZesLK
          x-konfig-generated-schema: konfig-generated-schema-paths--recommendations-get-parameters-2-schema
        style: form
      - explode: true
        in: query
        name: seed_genres
        required: true
        schema:
          description: |
            A comma separated list of any genres in the set of [available genre seeds](/documentation/web-api/reference/get-recommendation-genres). Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.<br/> _**Note**: only required if `seed_artists` and `seed_tracks` are not set_.
          example: "classical,country"
          title: Genres Seeds
          type: string
          x-konfig-original-example: "classical,country"
          x-konfig-generated-schema: konfig-generated-schema-paths--recommendations-get-parameters-3-schema
        style: form
      - explode: true
        in: query
        name: seed_tracks
        required: true
        schema:
          description: |
            A comma separated list of [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for a seed track.  Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.<br/> _**Note**: only required if `seed_artists` and `seed_genres` are not set_.
          example: 0c6xIDDpzE81m2q797ordA
          title: Spotify Track ID Seeds
          type: string
          x-konfig-original-example: 0c6xIDDpzE81m2q797ordA
          x-konfig-generated-schema: konfig-generated-schema-paths--recommendations-get-parameters-4-schema
        style: form
      - explode: true
        in: query
        name: min_acousticness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Acousticness
          type: number
        style: form
      - explode: true
        in: query
        name: max_acousticness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Acousticness
          type: number
        style: form
      - explode: true
        in: query
        name: target_acousticness
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Acousticness
          type: number
        style: form
      - explode: true
        in: query
        name: min_danceability
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Danceability
          type: number
        style: form
      - explode: true
        in: query
        name: max_danceability
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Danceability
          type: number
        style: form
      - explode: true
        in: query
        name: target_danceability
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Danceability
          type: number
        style: form
      - explode: true
        in: query
        name: min_duration_ms
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          title: Min. Duration (ms)
          type: integer
        style: form
      - explode: true
        in: query
        name: max_duration_ms
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          title: Max. Duration (ms)
          type: integer
        style: form
      - explode: true
        in: query
        name: target_duration_ms
        required: false
        schema:
          description: Target duration of the track (ms)
          title: Target Duration (ms)
          type: integer
        style: form
      - explode: true
        in: query
        name: min_energy
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Energy
          type: number
        style: form
      - explode: true
        in: query
        name: max_energy
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Energy
          type: number
        style: form
      - explode: true
        in: query
        name: target_energy
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Energy
          type: number
        style: form
      - explode: true
        in: query
        name: min_instrumentalness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Instrumentalness
          type: number
        style: form
      - explode: true
        in: query
        name: max_instrumentalness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Instrumentalness
          type: number
        style: form
      - explode: true
        in: query
        name: target_instrumentalness
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Instrumentalness
          type: number
        style: form
      - explode: true
        in: query
        name: min_key
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 11
          minimum: 0
          title: Min. Key
          type: integer
        style: form
      - explode: true
        in: query
        name: max_key
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 11
          minimum: 0
          title: Max. Key
          type: integer
        style: form
      - explode: true
        in: query
        name: target_key
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 11
          minimum: 0
          title: Target Key
          type: integer
        style: form
      - explode: true
        in: query
        name: min_liveness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Liveness
          type: number
        style: form
      - explode: true
        in: query
        name: max_liveness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Liveness
          type: number
        style: form
      - explode: true
        in: query
        name: target_liveness
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Liveness
          type: number
        style: form
      - explode: true
        in: query
        name: min_loudness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          title: Min. Loudness
          type: number
        style: form
      - explode: true
        in: query
        name: max_loudness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          title: Max. Loudness
          type: number
        style: form
      - explode: true
        in: query
        name: target_loudness
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          title: Target Loudness
          type: number
        style: form
      - explode: true
        in: query
        name: min_mode
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Mode
          type: integer
        style: form
      - explode: true
        in: query
        name: max_mode
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Mode
          type: integer
        style: form
      - explode: true
        in: query
        name: target_mode
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Mode
          type: integer
        style: form
      - explode: true
        in: query
        name: min_popularity
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 100
          minimum: 0
          title: Min. Popularity
          type: integer
        style: form
      - explode: true
        in: query
        name: max_popularity
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 100
          minimum: 0
          title: Max. Popularity
          type: integer
        style: form
      - explode: true
        in: query
        name: target_popularity
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 100
          minimum: 0
          title: Target Popularity
          type: integer
        style: form
      - explode: true
        in: query
        name: min_speechiness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Speechiness
          type: number
        style: form
      - explode: true
        in: query
        name: max_speechiness
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Speechiness
          type: number
        style: form
      - explode: true
        in: query
        name: target_speechiness
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Speechiness
          type: number
        style: form
      - explode: true
        in: query
        name: min_tempo
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          title: Min. Tempo
          type: number
        style: form
      - explode: true
        in: query
        name: max_tempo
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          title: Max. Tempo
          type: number
        style: form
      - explode: true
        in: query
        name: target_tempo
        required: false
        schema:
          description: Target tempo (BPM)
          title: Target Tempo
          type: number
        style: form
      - explode: true
        in: query
        name: min_time_signature
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 11
          title: Min. Time Signature
          type: integer
        style: form
      - explode: true
        in: query
        name: max_time_signature
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          title: Max. Time Signature
          type: integer
        style: form
      - explode: true
        in: query
        name: target_time_signature
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          title: Target Time Signature
          type: integer
        style: form
      - explode: true
        in: query
        name: min_valence
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Valence
          type: number
        style: form
      - explode: true
        in: query
        name: max_valence
        required: false
        schema:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Valence
          type: number
        style: form
      - explode: true
        in: query
        name: target_valence
        required: false
        schema:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Valence
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationsObject'
          description: A set of recommendations
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Recommendations
      tags:
      - Tracks
      x-spotify-policy-list:
      - $ref: '#/components/x-spotify-policy/policies/MachineLearning'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--recommendations
      x-accepts: application/json
  /recommendations/available-genre-seeds:
    get:
      description: |
        Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations).
      operationId: Genres_getAvailableSeeds
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenresGetAvailableSeedsResponse'
          description: A set of genres
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Available Genre Seeds
      tags:
      - Genres
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--recommendations-available-genre-seeds
      x-accepts: application/json
  /me/player:
    get:
      description: |
        Get information about the user’s current playback state, including track or episode, progress, and active device.
      operationId: Player_getCurrentPlaybackState
      parameters:
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: true
        in: query
        name: additional_types
        required: false
        schema:
          description: |
            A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
            _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
            In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
          title: Additional Types
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentlyPlayingContextObject'
          description: Information about playback
        "204":
          description: Playback not available or active
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-read-playback-state
      summary: |
        Get Playback State
      tags:
      - Player
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/playerPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-player
      x-accepts: application/json
    put:
      description: |
        Transfer playback to a new device and optionally begin playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
      operationId: Player_transferPlaybackToNewDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerTransferPlaybackToNewDeviceRequest'
      responses:
        "204":
          description: Playback transferred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Transfer Playback
      tags:
      - Player
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/playerPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-put--me-player
      x-content-type: application/json
      x-accepts: application/json
  /me/player/devices:
    get:
      description: |
        Get information about a user’s available Spotify Connect devices. Some device models are not supported and will not be listed in the API response.
      operationId: Player_getAvailableDevices
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerGetAvailableDevicesResponse'
          description: A set of devices
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-read-playback-state
      summary: |
        Get Available Devices
      tags:
      - Player
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-player-devices
      x-accepts: application/json
  /me/player/currently-playing:
    get:
      description: |
        Get the object currently being played on the user's Spotify account.
      operationId: Player_getCurrentlyPlayingTrack
      parameters:
      - explode: true
        in: query
        name: market
        required: false
        schema:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        style: form
      - explode: true
        in: query
        name: additional_types
        required: false
        schema:
          description: |
            A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
            _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
            In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
          title: Additional Types
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentlyPlayingContextObject'
          description: Information about the currently playing track
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-read-currently-playing
      summary: |
        Get Currently Playing Track
      tags:
      - Player
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/playerPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-player-currently-playing
      x-accepts: application/json
  /me/player/play:
    put:
      description: |
        Start a new context or resume current playback on the user's active device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
      operationId: Player_startPlayback
      parameters:
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-play-put-parameters-0-schema
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerStartPlaybackRequest'
      responses:
        "204":
          description: Playback started
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Start/Resume Playback
      tags:
      - Player
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/playerPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-put--me-player-play
      x-content-type: application/json
      x-accepts: application/json
  /me/player/pause:
    put:
      description: |
        Pause playback on the user's account. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
      operationId: Player_pausePlayback
      parameters:
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: |
            The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-pause-put-parameters-0-schema
        style: form
      responses:
        "204":
          description: Playback paused
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Pause Playback
      tags:
      - Player
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/playerPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-put--me-player-pause
      x-accepts: application/json
  /me/player/next:
    post:
      description: |
        Skips to next track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
      operationId: Player_skipToNextTrack
      parameters:
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-next-post-parameters-0-schema
        style: form
      responses:
        "204":
          description: Command sent
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Skip To Next
      tags:
      - Player
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/playerPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--me-player-next
      x-accepts: application/json
  /me/player/previous:
    post:
      description: |
        Skips to previous track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
      operationId: Player_skipToPreviousTrack
      parameters:
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-previous-post-parameters-0-schema
        style: form
      responses:
        "204":
          description: Command sent
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Skip To Previous
      tags:
      - Player
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/playerPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--me-player-previous
      x-accepts: application/json
  /me/player/seek:
    put:
      description: |
        Seeks to the given position in the user’s currently playing track. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
      operationId: Player_seekToPosition
      parameters:
      - explode: true
        in: query
        name: position_ms
        required: true
        schema:
          description: |
            The position in milliseconds to seek to. Must be a
            positive number. Passing in a position that is greater than the length of
            the track will cause the player to start playing the next song.
          example: 25000
          title: Position (ms)
          type: integer
          x-konfig-original-example: 25000
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-seek-put-parameters-0-schema
        style: form
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-seek-put-parameters-1-schema
        style: form
      responses:
        "204":
          description: Command sent
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Seek To Position
      tags:
      - Player
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/playerPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-put--me-player-seek
      x-accepts: application/json
  /me/player/repeat:
    put:
      description: |
        Set the repeat mode for the user's playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
      operationId: Player_setRepeatMode
      parameters:
      - explode: true
        in: query
        name: state
        required: true
        schema:
          description: |
            **track**, **context** or **off**.<br/>
            **track** will repeat the current track.<br/>
            **context** will repeat the current context.<br/>
            **off** will turn repeat off.
          example: context
          title: State
          type: string
          x-konfig-original-example: context
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-repeat-put-parameters-0-schema
        style: form
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-repeat-put-parameters-1-schema
        style: form
      responses:
        "204":
          description: Command sent
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Set Repeat Mode
      tags:
      - Player
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-put--me-player-repeat
      x-accepts: application/json
  /me/player/volume:
    put:
      description: |
        Set the volume for the user’s current playback device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
      operationId: Player_setPlaybackVolume
      parameters:
      - explode: true
        in: query
        name: volume_percent
        required: true
        schema:
          description: |
            The volume to set. Must be a value from 0 to 100 inclusive.
          example: 50
          title: Volume %
          type: integer
          x-konfig-original-example: 50
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-volume-put-parameters-0-schema
        style: form
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: |
            The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-volume-put-parameters-1-schema
        style: form
      responses:
        "204":
          description: Command sent
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Set Playback Volume
      tags:
      - Player
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-put--me-player-volume
      x-accepts: application/json
  /me/player/shuffle:
    put:
      description: |
        Toggle shuffle on or off for user’s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
      operationId: Player_togglePlaybackShuffle
      parameters:
      - explode: true
        in: query
        name: state
        required: true
        schema:
          description: |
            **true** : Shuffle user's playback.<br/>
            **false** : Do not shuffle user's playback.
          example: true
          title: State
          type: boolean
          x-konfig-original-example: true
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-shuffle-put-parameters-0-schema
        style: form
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-shuffle-put-parameters-1-schema
        style: form
      responses:
        "204":
          description: Command sent
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Toggle Playback Shuffle
      tags:
      - Player
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-put--me-player-shuffle
      x-accepts: application/json
  /me/player/recently-played:
    get:
      description: |
        Get tracks from the current user's recently played tracks.
        _**Note**: Currently doesn't support podcast episodes._
      operationId: Player_getRecentlyPlayedTracks
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-recently-played-get-parameters-0-schema
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          description: |
            A Unix timestamp in milliseconds. Returns all items
            after (but not including) this cursor position. If `after` is specified, `before`
            must not be specified.
          example: 1484811043508
          title: After
          type: integer
          x-konfig-original-example: 1484811043508
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-recently-played-get-parameters-1-schema
        style: form
      - explode: true
        in: query
        name: before
        required: false
        schema:
          description: |
            A Unix timestamp in milliseconds. Returns all items
            before (but not including) this cursor position. If `before` is specified,
            `after` must not be specified.
          title: Before
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CursorPagingPlayHistoryObject'
          description: A paged set of tracks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-read-recently-played
      summary: |
        Get Recently Played Tracks
      tags:
      - Player
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/playerPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-player-recently-played
      x-accepts: application/json
  /me/player/queue:
    get:
      description: |
        Get the list of objects that make up the user's queue.
      operationId: Player_getUserQueue
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueObject'
          description: Information about the queue
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-read-currently-playing
        - user-read-playback-state
      summary: |
        Get the User's Queue
      tags:
      - Player
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/playerPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-player-queue
      x-accepts: application/json
    post:
      description: |
        Add an item to the end of the user's current playback queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
      operationId: Player_addItemToQueue
      parameters:
      - explode: true
        in: query
        name: uri
        required: true
        schema:
          description: |
            The uri of the item to add to the queue. Must be a track or an episode uri.
          example: spotify:track:4iV5W9uYEdYUVa79Axb7Rh
          title: Spotify URI
          type: string
          x-konfig-original-example: spotify:track:4iV5W9uYEdYUVa79Axb7Rh
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-queue-post-parameters-0-schema
        style: form
      - explode: true
        in: query
        name: device_id
        required: false
        schema:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-queue-post-parameters-1-schema
        style: form
      responses:
        "204":
          description: Command received
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0:
        - user-modify-playback-state
      summary: |
        Add Item to Playback Queue
      tags:
      - Player
      x-spotify-policy-list:
        $ref: '#/components/x-spotify-policy/playerPolicyList'
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--me-player-queue
      x-accepts: application/json
  /markets:
    get:
      description: |
        Get the list of markets where Spotify is available.
      operationId: Markets_listAvailable
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketsListAvailableResponse'
          description: A markets object with an array of country codes
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformationResponse'
          description: |
            Bad or expired token. This can happen if the user revoked a token or
            the access token has expired. You should re-authenticate the user.
          x-do-not-generate: true
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation403Response'
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            timestamp...). Unfortunately, re-authenticating the user won't help here.
          x-do-not-generate: true
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsGetInformation429Response'
          description: |
            The app has exceeded its rate limits.
          x-do-not-generate: true
      security:
      - oauth_2_0: []
      summary: |
        Get Available Markets
      tags:
      - Markets
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--markets
      x-accepts: application/json
components:
  parameters:
    PathAlbumId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        description: |
          The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the album.
        example: 4aawyAB9vmqN3uQ7FjRGTy
        title: Spotify Album ID
        type: string
        x-konfig-original-example: 4aawyAB9vmqN3uQ7FjRGTy
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathAlbumId-schema
      style: simple
    PathPlaylistId:
      explode: false
      in: path
      name: playlist_id
      required: true
      schema:
        description: |
          The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
        example: 3cEYpjA9oz9GiPac4AsH4n
        title: Playlist ID
        type: string
        x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
      style: simple
    QueryMarket:
      explode: true
      in: query
      name: market
      required: false
      schema:
        description: |
          An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
            If a country code is specified, only content that is available in that market will be returned.<br/>
            If a valid user access token is specified in the request header, the country associated with
            the user account will take priority over this parameter.<br/>
            _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
            Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
        example: ES
        title: Market
        type: string
        x-konfig-original-example: ES
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
      style: form
    QueryLimit:
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 20
        description: |
          The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
        example: 10
        maximum: 50
        minimum: 0
        title: Limit
        type: integer
        x-konfig-original-example: 10
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
      style: form
    QueryOffset:
      explode: true
      in: query
      name: offset
      required: false
      schema:
        default: 0
        description: |
          The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
        example: 5
        title: Offset
        type: integer
        x-konfig-original-example: 5
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
      style: form
    QueryAdditionalTypes:
      explode: true
      in: query
      name: additional_types
      required: false
      schema:
        description: |
          A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
          _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
          In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
        title: Additional Types
        type: string
      style: form
    QueryAlbumIds:
      explode: true
      in: query
      name: ids
      required: true
      schema:
        description: |
          A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs.
        example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
        title: Spotify Album IDs
        type: string
        x-konfig-original-example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAlbumIds-schema
      style: form
    PathArtistId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        description: |
          The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
        example: 0TnOYISbd1XYRBk9myaseg
        title: Spotify Artist ID
        type: string
        x-konfig-original-example: 0TnOYISbd1XYRBk9myaseg
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathArtistId-schema
      style: simple
    PathShowId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        description: |
          The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
          for the show.
        example: 38bS44xjbVVZ3No3ByF1dJ
        title: Spotify Show ID
        type: string
        x-konfig-original-example: 38bS44xjbVVZ3No3ByF1dJ
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathShowId-schema
      style: simple
    PathAudiobookId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        description: |
          The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
          for the audiobook.
        example: 7iHfbu1YPACw6oZPAFJtqe
        title: Spotify Audiobook ID
        type: string
        x-konfig-original-example: 7iHfbu1YPACw6oZPAFJtqe
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathAudiobookId-schema
      style: simple
    QueryAudiobookIds:
      explode: true
      in: query
      name: ids
      required: true
      schema:
        description: |
          A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ`. Maximum: 50 IDs.
        example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
        title: Spotify Audiobook IDs
        type: string
        x-konfig-original-example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAudiobookIds-schema
      style: form
    PathChapterId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        description: |
          The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
          for the chapter.
        example: 0D5wENdkdwbqlrHoaJ9g29
        title: Spotify Chapter ID
        type: string
        x-konfig-original-example: 0D5wENdkdwbqlrHoaJ9g29
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathChapterId-schema
      style: simple
    QueryChapterIds:
      explode: true
      in: query
      name: ids
      required: true
      schema:
        description: |
          A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU`. Maximum: 50 IDs.
        example: "0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU,0D5wENdkdwbqlrHoaJ9g29"
        title: Spotify Chapter IDs
        type: string
        x-konfig-original-example: "0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU,0D5wENdkdwbqlrHoaJ9g29"
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryChapterIds-schema
      style: form
    QueryTrackIds:
      explode: true
      in: query
      name: ids
      required: true
      schema:
        description: |
          A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.
        example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
        title: Spotify Track IDs
        type: string
        x-konfig-original-example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryTrackIds-schema
      style: form
    QueryIncludeGroups:
      explode: true
      in: query
      name: include_groups
      required: false
      schema:
        description: |
          A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>
          Valid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.
        example: "single,appears_on"
        title: "Groups to include (single, album, appears_on, compilation)"
        type: string
        x-konfig-original-example: "single,appears_on"
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryIncludeGroups-schema
      style: form
    QueryShowIds:
      explode: true
      in: query
      name: ids
      required: true
      schema:
        description: |
          A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs.
        example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
        title: Ids
        type: string
        x-konfig-original-example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryShowIds-schema
      style: form
    PathUserId:
      explode: false
      in: path
      name: user_id
      required: true
      schema:
        description: |
          The user's [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids).
        example: smedjan
        title: User ID
        type: string
        x-konfig-original-example: smedjan
        x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathUserId-schema
      style: simple
  responses:
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlbumsGetInformationResponse'
      description: |
        Bad or expired token. This can happen if the user revoked a token or
        the access token has expired. You should re-authenticate the user.
      x-do-not-generate: true
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlbumsGetInformation403Response'
      description: |
        Bad OAuth request (wrong consumer key, bad nonce, expired
        timestamp...). Unfortunately, re-authenticating the user won't help here.
      x-do-not-generate: true
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AudiobooksGetCatalogInfo404Response'
      description: |
        The requested resource cannot be found.
      x-do-not-generate: true
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AudiobooksGetCatalogInfoResponse'
      description: |
        The request contains malformed data in path, query parameters, or body.
      x-do-not-generate: true
    TooManyRequests:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlbumsGetInformation429Response'
      description: |
        The app has exceeded its rate limits.
      x-do-not-generate: true
    ManyAlbums:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlbumsListSeveralResponse'
      description: A set of albums
    ManyAudiobooks:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AudiobooksGetSeveralResponse'
      description: A set of audiobooks. If one of the requested audiobooks is unavailable
        then you'll find a `null` item in the `audiobooks` array where the audiobook
        object would otherwise be.
    ManyChapters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChaptersGetMultipleByIdsResponse'
      description: A set of chapters
    ManyDevices:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlayerGetAvailableDevicesResponse'
      description: A set of devices
    PagedAlbums:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlbumsGetNewReleasesResponse'
      description: A paged set of albums
    PagedPlaylists:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingPlaylistObject'
      description: A paged set of playlists
    PagedFeaturedPlaylists:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingFeaturedPlaylistObject'
      description: A paged set of playlists
    PagedCategories:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CategoriesListSeveralResponse'
      description: A paged set of categories
    CursorPagedArtists:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsersGetFollowedArtistsResponse'
      description: A paged set of artists
    CursorPagedPlayHistory:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CursorPagingPlayHistoryObject'
      description: A paged set of tracks
    ManyArtists:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArtistsGetCatalogInfoResponse'
      description: A set of artists
    ManyAudioFeatures:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TracksGetMultipleAudioFeaturesResponse'
      description: A set of audio features
    ManyEpisodes:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EpisodesGetSeveralResponse'
      description: A set of episodes
    ManyGenres:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenresGetAvailableSeedsResponse'
      description: A set of genres
    OneEpisode:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EpisodeObject'
      description: An episode
    OneChapter:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChapterObject'
      description: A Chapter
    OneAudiobook:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AudiobookObject'
      description: An Audiobook
    OneAlbum:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlbumObject'
      description: An album
    ArrayOfImages:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlaylistsGetCoverImageResponse'
      description: A set of images
    OnePrivateUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PrivateUserObject'
      description: A user
    OnePublicUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PublicUserObject'
      description: A user
    OneTrack:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrackObject'
      description: A track
    OneShow:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ShowObject'
      description: A show
    OneCategory:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CategoryObject'
      description: A category
    OnePlaylist:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlaylistObject'
      description: A playlist
    OneAudioFeatures:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AudioFeaturesObject'
      description: Audio features for one track
    OneAudioAnalysis:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AudioAnalysisObject'
      description: Audio analysis for one track
    OneArtist:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArtistObject'
      description: An artist
    ManyTracks:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArtistsGetTopTracksResponse'
      description: A set of tracks
    ManySimplifiedShows:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ShowsGetMultipleShowsInfoResponse'
      description: A set of shows
    PagingSimplifiedTrackObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSimplifiedTrackObject'
      description: Pages of tracks
    PagingSavedTrackObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSavedTrackObject'
      description: Pages of tracks
    PagingPlaylistTrackObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingPlaylistTrackObject'
      description: Pages of tracks
    PagingArtistDiscographyAlbumObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingArtistDiscographyAlbumObject'
      description: Pages of albums
    PagingSavedAlbumObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSavedAlbumObject'
      description: Pages of albums
    PagingSavedShowObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSavedShowObject'
      description: Pages of shows
    PagingSimplifiedEpisodeObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSimplifiedEpisodeObject'
      description: Pages of episodes
    PagingSavedEpisodeObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSavedEpisodeObject'
      description: Pages of episodes
    PagingSimplifiedAudiobookObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSimplifiedAudiobookObject'
      description: Pages of audiobooks
    PagingSimplifiedChapterObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagingSimplifiedChapterObject'
      description: Pages of chapters
    PagingArtistOrTrackObject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsersGetTopItemsResponse'
      description: Pages of artists or tracks
    SearchItems:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchSpotifyCatalogInfoResponse'
      description: Search response
    OneRecommendations:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RecommendationsObject'
      description: A set of recommendations
    ArrayOfBooleans:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AudiobooksCheckUserSavedResponse'
      description: Array of booleans
    Queue:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueueObject'
      description: Information about the queue
    OneCurrentlyPlaying:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CurrentlyPlayingContextObject'
      description: Information about playback
    OneCurrentlyPlayingTrack:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CurrentlyPlayingContextObject'
      description: Information about the currently playing track
    PlaylistSnapshotId:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlaylistsRemoveItemsResponse'
      description: A snapshot ID for the playlist
  schemas:
    LinkedTrackObject:
      properties:
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: |
            A link to the Web API endpoint providing full details of the track.
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          type: string
        type:
          description: |
            The object type: "track".
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          type: string
      type: object
      x-spotify-docs-type: LinkedTrackObject
      x-konfig-properties:
        external_urls:
          description: |
            Known external URLs for this track.
    TrackRestrictionObject:
      example:
        reason: reason
      properties:
        reason:
          description: |
            The reason for the restriction. Supported values:
            - `market` - The content item is not available in the given market.
            - `product` - The content item is not available for the user's subscription type.
            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.

            Additional reasons may be added in the future.
            **Note**: If you use this field, make sure that your application safely handles unknown values.
          type: string
      type: object
      x-spotify-docs-type: TrackRestrictionObject
    AlbumRestrictionObject:
      properties:
        reason:
          description: |
            The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.
            Additional reasons may be added in the future.
          enum:
          - market
          - product
          - explicit
          type: string
      type: object
      x-spotify-docs-type: AlbumRestrictionObject
    EpisodeRestrictionObject:
      properties:
        reason:
          description: |
            The reason for the restriction. Supported values:
            - `market` - The content item is not available in the given market.
            - `product` - The content item is not available for the user's subscription type.
            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.

            Additional reasons may be added in the future.
            **Note**: If you use this field, make sure that your application safely handles unknown values.
          type: string
      type: object
      x-spotify-docs-type: EpisodeRestrictionObject
    ChapterRestrictionObject:
      properties:
        reason:
          description: |
            The reason for the restriction. Supported values:
            - `market` - The content item is not available in the given market.
            - `product` - The content item is not available for the user's subscription type.
            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.
            - `payment_required` - Payment is required to play the content item.

            Additional reasons may be added in the future.
            **Note**: If you use this field, make sure that your application safely handles unknown values.
          type: string
      type: object
      x-spotify-docs-type: ChapterRestrictionObject
    ArtistObject:
      example:
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        followers:
          total: 0
          href: href
        genres:
        - Prog rock
        - Grunge
        popularity: 6
        name: name
        href: href
        id: id
        type: artist
        external_urls:
          spotify: spotify
        uri: uri
      properties:
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        followers:
          $ref: '#/components/schemas/FollowersObject'
        genres:
          description: |
            A list of the genres the artist is associated with. If not yet classified, the array is empty.
          example:
          - Prog rock
          - Grunge
          items:
            type: string
          type: array
          x-konfig-original-example:
          - Prog rock
          - Grunge
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ArtistObject-properties-genres
        href:
          description: |
            A link to the Web API endpoint providing full details of the artist.
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
          type: string
        images:
          description: |
            Images of the artist in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        name:
          description: |
            The name of the artist.
          type: string
        popularity:
          description: |
            The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.
          type: integer
        type:
          description: |
            The object type.
          enum:
          - artist
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
          type: string
      type: object
      x-spotify-docs-type: ArtistObject
      x-konfig-properties:
        external_urls:
          description: |
            Known external URLs for this artist.
        followers:
          description: |
            Information about the followers of the artist.
      x-konfig-is-used-in-successful-response: true
    SimplifiedArtistObject:
      properties:
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: |
            A link to the Web API endpoint providing full details of the artist.
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
          type: string
        name:
          description: |
            The name of the artist.
          type: string
        type:
          description: |
            The object type.
          enum:
          - artist
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
          type: string
      type: object
      x-spotify-docs-type: SimplifiedArtistObject
      x-konfig-properties:
        external_urls:
          description: |
            Known external URLs for this artist.
    PlayHistoryObject:
      properties:
        track:
          $ref: '#/components/schemas/TrackObject'
        played_at:
          description: The date and time the track was played.
          format: date-time
          type: string
          x-spotify-docs-type: Timestamp
        context:
          $ref: '#/components/schemas/ContextObject'
      type: object
      x-spotify-docs-type: PlayHistoryObject
      x-konfig-properties:
        track:
          description: The track the user listened to.
        context:
          description: The context the track was played from.
    PlaylistTrackObject:
      properties:
        added_at:
          description: |
            The date and time the track or episode was added. _**Note**: some very old playlists may return `null` in this field._
          format: date-time
          type: string
          x-spotify-docs-type: Timestamp
        added_by:
          $ref: '#/components/schemas/PlaylistUserObject'
        is_local:
          description: |
            Whether this track or episode is a [local file](/documentation/web-api/concepts/playlists/#local-files) or not.
          type: boolean
        track: {}
      type: object
      x-spotify-docs-type: PlaylistTrackObject
      x-konfig-properties:
        added_by:
          description: |
            The Spotify user who added the track or episode. _**Note**: some very old playlists may return `null` in this field._
    QueueObject:
      example:
        currently_playing: ""
        queue:
        - ""
        - ""
      properties:
        currently_playing: {}
        queue:
          description: The tracks or episodes in the queue. Can be empty.
          items: {}
          type: array
      type: object
      x-spotify-docs-type: QueueObject
      x-konfig-is-used-in-successful-response: true
    CurrentlyPlayingContextObject:
      example:
        item: ""
        currently_playing_type: currently_playing_type
        shuffle_state: true
        context:
          href: href
          type: type
          external_urls:
            spotify: spotify
          uri: uri
        is_playing: true
        progress_ms: 6
        device:
          is_active: true
          is_private_session: true
          is_restricted: true
          name: Kitchen speaker
          id: id
          type: computer
          supports_volume: true
          volume_percent: 59
        actions:
          toggling_shuffle: true
          transferring_playback: true
          skipping_next: true
          pausing: true
          resuming: true
          skipping_prev: true
          toggling_repeat_context: true
          interrupting_playback: true
          seeking: true
          toggling_repeat_track: true
        repeat_state: repeat_state
        timestamp: 0
      properties:
        device:
          $ref: '#/components/schemas/DeviceObject'
        repeat_state:
          description: "off, track, context"
          type: string
        shuffle_state:
          description: If shuffle is on or off.
          type: boolean
        context:
          $ref: '#/components/schemas/ContextObject'
        timestamp:
          description: Unix Millisecond Timestamp when data was fetched.
          type: integer
        progress_ms:
          description: Progress into the currently playing track or episode. Can be
            `null`.
          type: integer
        is_playing:
          description: "If something is currently playing, return `true`."
          type: boolean
        item: {}
        currently_playing_type:
          description: |
            The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.
          type: string
        actions:
          $ref: '#/components/schemas/DisallowsObject'
      type: object
      x-spotify-docs-type: CurrentlyPlayingContextObject
      x-konfig-properties:
        device:
          description: |
            The device that is currently active.
        context:
          description: A Context Object. Can be `null`.
        actions:
          description: |
            Allows to update the user interface based on which playback actions are available within the current context.
      x-konfig-is-used-in-successful-response: true
    DisallowsObject:
      example:
        toggling_shuffle: true
        transferring_playback: true
        skipping_next: true
        pausing: true
        resuming: true
        skipping_prev: true
        toggling_repeat_context: true
        interrupting_playback: true
        seeking: true
        toggling_repeat_track: true
      properties:
        interrupting_playback:
          description: Interrupting playback. Optional field.
          type: boolean
        pausing:
          description: Pausing. Optional field.
          type: boolean
        resuming:
          description: Resuming. Optional field.
          type: boolean
        seeking:
          description: Seeking playback location. Optional field.
          type: boolean
        skipping_next:
          description: Skipping to the next context. Optional field.
          type: boolean
        skipping_prev:
          description: Skipping to the previous context. Optional field.
          type: boolean
        toggling_repeat_context:
          description: Toggling repeat context flag. Optional field.
          type: boolean
        toggling_shuffle:
          description: Toggling shuffle flag. Optional field.
          type: boolean
        toggling_repeat_track:
          description: Toggling repeat track flag. Optional field.
          type: boolean
        transferring_playback:
          description: Transfering playback between devices. Optional field.
          type: boolean
      type: object
      x-spotify-docs-type: DisallowsObject
    ErrorObject:
      properties:
        status:
          description: |
            The HTTP status code (also returned in the response header; see [Response Status Codes](/documentation/web-api/concepts/api-calls#response-status-codes) for more information).
          maximum: 599
          minimum: 400
          type: integer
        message:
          description: |
            A short description of the cause of the error.
          type: string
      required:
      - message
      - status
      type: object
      x-spotify-docs-type: ErrorObject
    PrivateUserObject:
      example:
        country: country
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        product: product
        followers:
          total: 0
          href: href
        explicit_content:
          filter_locked: true
          filter_enabled: true
        href: href
        id: id
        display_name: display_name
        type: type
        external_urls:
          spotify: spotify
        uri: uri
        email: email
      properties:
        country:
          description: |
            The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
          type: string
        display_name:
          description: |
            The name displayed on the user's profile. `null` if not available.
          type: string
        email:
          description: |
            The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
          type: string
        explicit_content:
          $ref: '#/components/schemas/ExplicitContentSettingsObject'
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        followers:
          $ref: '#/components/schemas/FollowersObject'
        href:
          description: |
            A link to the Web API endpoint for this user.
          type: string
        id:
          description: |
            The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user.
          type: string
        images:
          description: The user's profile image.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        product:
          description: |
            The user's Spotify subscription level: "premium", "free", etc. (The subscription level "open" can be considered the same as "free".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
          type: string
        type:
          description: |
            The object type: "user"
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user.
          type: string
      type: object
      x-spotify-docs-type: PrivateUserObject
      x-konfig-properties:
        explicit_content:
          description: |
            The user's explicit content settings. _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
        external_urls:
          description: Known external URLs for this user.
        followers:
          description: Information about the followers of the user.
      x-konfig-is-used-in-successful-response: true
    PublicUserObject:
      example:
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        followers:
          total: 0
          href: href
        href: href
        id: id
        display_name: display_name
        type: user
        external_urls:
          spotify: spotify
        uri: uri
      properties:
        display_name:
          description: |
            The name displayed on the user's profile. `null` if not available.
          nullable: true
          type: string
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        followers:
          $ref: '#/components/schemas/FollowersObject'
        href:
          description: |
            A link to the Web API endpoint for this user.
          type: string
        id:
          description: |
            The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.
          type: string
        images:
          description: |
            The user's profile image.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        type:
          description: |
            The object type.
          enum:
          - user
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.
          type: string
      type: object
      x-spotify-docs-type: PublicUserObject
      x-konfig-properties:
        external_urls:
          description: |
            Known public external URLs for this user.
        followers:
          description: |
            Information about the followers of this user.
      x-konfig-is-used-in-successful-response: true
    AudioAnalysisObject:
      example:
        meta:
          detailed_status: OK
          status_code: 0
          analyzer_version: 4.0.0
          analysis_time: 6.93906
          input_process: libvorbisfile L+R 44100->22050
          platform: Linux
          timestamp: 1495193577
        beats:
        - duration: 2.18749
          confidence: 0.925
          start: 0.49567
        - duration: 2.18749
          confidence: 0.925
          start: 0.49567
        tatums:
        - duration: 2.18749
          confidence: 0.925
          start: 0.49567
        - duration: 2.18749
          confidence: 0.925
          start: 0.49567
        track:
          mode_confidence: 0.485
          loudness: -5.883
          tempo: 118.211
          key_confidence: 0.408
          codestring: codestring
          echoprint_version: 4.15
          offset_seconds: 0
          duration: 207.95985
          mode: 0
          tempo_confidence: 0.73
          window_seconds: 0
          start_of_fade_out: 201.13705
          synch_version: 1
          code_version: 3.15
          time_signature_confidence: 0.994
          analysis_channels: 1
          key: 9
          time_signature: 4
          sample_md5: sample_md5
          end_of_fade_in: 0
          echoprintstring: echoprintstring
          analysis_sample_rate: 22050
          synchstring: synchstring
          rhythmstring: rhythmstring
          rhythm_version: 1
          num_samples: 4585515
        bars:
        - duration: 2.18749
          confidence: 0.925
          start: 0.49567
        - duration: 2.18749
          confidence: 0.925
          start: 0.49567
        sections:
        - duration: 6.97092
          mode: 0.8008281904610115
          mode_confidence: 0.471
          tempo_confidence: 0.647
          confidence: 1
          loudness: -14.938
          start: 0
          tempo: 113.178
          time_signature_confidence: 1
          key_confidence: 0.297
          key: 9
          time_signature: 4
        - duration: 6.97092
          mode: 0.8008281904610115
          mode_confidence: 0.471
          tempo_confidence: 0.647
          confidence: 1
          loudness: -14.938
          start: 0
          tempo: 113.178
          time_signature_confidence: 1
          key_confidence: 0.297
          key: 9
          time_signature: 4
        segments:
        - duration: 0.19891
          timbre:
          - 42.115
          - 64.373
          - -0.233
          loudness_max: -14.25
          loudness_max_time: 0.07305
          confidence: 0.435
          start: 0.70154
          loudness_end: 0
          pitches:
          - 0.212
          - 0.141
          - 0.294
          loudness_start: -23.053
        - duration: 0.19891
          timbre:
          - 42.115
          - 64.373
          - -0.233
          loudness_max: -14.25
          loudness_max_time: 0.07305
          confidence: 0.435
          start: 0.70154
          loudness_end: 0
          pitches:
          - 0.212
          - 0.141
          - 0.294
          loudness_start: -23.053
      properties:
        meta:
          $ref: '#/components/schemas/AudioAnalysisObject_meta'
        track:
          $ref: '#/components/schemas/AudioAnalysisObject_track'
        bars:
          description: The time intervals of the bars throughout the track. A bar
            (or measure) is a segment of time defined as a given number of beats.
          items:
            $ref: '#/components/schemas/TimeIntervalObject'
          type: array
        beats:
          description: "The time intervals of beats throughout the track. A beat is\
            \ the basic time unit of a piece of music; for example, each tick of a\
            \ metronome. Beats are typically multiples of tatums."
          items:
            $ref: '#/components/schemas/TimeIntervalObject'
          type: array
        sections:
          description: "Sections are defined by large variations in rhythm or timbre,\
            \ e.g. chorus, verse, bridge, guitar solo, etc. Each section contains\
            \ its own descriptions of tempo, key, mode, time_signature, and loudness."
          items:
            $ref: '#/components/schemas/SectionObject'
          type: array
        segments:
          description: Each segment contains a roughly conisistent sound throughout
            its duration.
          items:
            $ref: '#/components/schemas/SegmentObject'
          type: array
        tatums:
          description: A tatum represents the lowest regular pulse train that a listener
            intuitively infers from the timing of perceived musical events (segments).
          items:
            $ref: '#/components/schemas/TimeIntervalObject'
          type: array
      type: object
      x-spotify-docs-type: AudioAnalysisObject
      x-konfig-is-used-in-successful-response: true
    TimeIntervalObject:
      example:
        duration: 2.18749
        confidence: 0.925
        start: 0.49567
      properties:
        start:
          description: The starting point (in seconds) of the time interval.
          example: 0.49567
          type: number
          x-konfig-original-example: 0.49567
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-TimeIntervalObject-properties-start
        duration:
          description: The duration (in seconds) of the time interval.
          example: 2.18749
          type: number
          x-konfig-original-example: 2.18749
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-TimeIntervalObject-properties-duration
        confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ interval."
          example: 0.925
          maximum: 1
          minimum: 0
          type: number
          x-konfig-original-example: 0.925
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-TimeIntervalObject-properties-confidence
      type: object
    SectionObject:
      example:
        duration: 6.97092
        mode: 0.8008281904610115
        mode_confidence: 0.471
        tempo_confidence: 0.647
        confidence: 1
        loudness: -14.938
        start: 0
        tempo: 113.178
        time_signature_confidence: 1
        key_confidence: 0.297
        key: 9
        time_signature: 4
      properties:
        start:
          description: The starting point (in seconds) of the section.
          example: 0
          type: number
          x-konfig-original-example: 0
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SectionObject-properties-start
        duration:
          description: The duration (in seconds) of the section.
          example: 6.97092
          type: number
          x-konfig-original-example: 6.97092
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SectionObject-properties-duration
        confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ section's \"designation\"."
          example: 1
          maximum: 1
          minimum: 0
          type: number
          x-konfig-original-example: 1
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SectionObject-properties-confidence
        loudness:
          description: The overall loudness of the section in decibels (dB). Loudness
            values are useful for comparing relative loudness of sections within tracks.
          example: -14.938
          type: number
          x-konfig-original-example: -14.938
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SectionObject-properties-loudness
        tempo:
          description: "The overall estimated tempo of the section in beats per minute\
            \ (BPM). In musical terminology, tempo is the speed or pace of a given\
            \ piece and derives directly from the average beat duration."
          example: 113.178
          type: number
          x-konfig-original-example: 113.178
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SectionObject-properties-tempo
        tempo_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ tempo. Some tracks contain tempo changes or sounds which don't contain\
            \ tempo (like pure speech) which would correspond to a low value in this\
            \ field."
          example: 0.647
          maximum: 1
          minimum: 0
          type: number
          x-konfig-original-example: 0.647
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SectionObject-properties-tempo_confidence
        key:
          description: "The estimated overall key of the section. The values in this\
            \ field ranging from 0 to 11 mapping to pitches using standard Pitch Class\
            \ notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected,\
            \ the value is -1."
          example: 9
          type: integer
          x-konfig-original-example: 9
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SectionObject-properties-key
        key_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ key. Songs with many key changes may correspond to low values in this\
            \ field."
          example: 0.297
          maximum: 1
          minimum: 0
          type: number
          x-konfig-original-example: 0.297
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SectionObject-properties-key_confidence
        mode:
          description: "Indicates the modality (major or minor) of a section, the\
            \ type of scale from which its melodic content is derived. This field\
            \ will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result.\
            \ Note that the major key (e.g. C major) could more likely be confused\
            \ with the minor key at 3 semitones lower (e.g. A minor) as both keys\
            \ carry the same pitches."
          enum:
          - -1
          - 0
          - 1
          type: number
        mode_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ `mode`."
          example: 0.471
          maximum: 1
          minimum: 0
          type: number
          x-konfig-original-example: 0.471
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SectionObject-properties-mode_confidence
        time_signature:
          description: "An estimated time signature. The time signature (meter) is\
            \ a notational convention to specify how many beats are in each bar (or\
            \ measure). The time signature ranges from 3 to 7 indicating time signatures\
            \ of \"3/4\", to \"7/4\"."
          example: 4
          maximum: 7
          minimum: 3
          type: integer
          x-konfig-original-example: 4
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-TimeSignature
        time_signature_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ `time_signature`. Sections with time signature changes may correspond\
            \ to low values in this field."
          example: 1
          maximum: 1
          minimum: 0
          type: number
          x-konfig-original-example: 1
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SectionObject-properties-time_signature_confidence
      type: object
    SegmentObject:
      example:
        duration: 0.19891
        timbre:
        - 42.115
        - 64.373
        - -0.233
        loudness_max: -14.25
        loudness_max_time: 0.07305
        confidence: 0.435
        start: 0.70154
        loudness_end: 0
        pitches:
        - 0.212
        - 0.141
        - 0.294
        loudness_start: -23.053
      properties:
        start:
          description: The starting point (in seconds) of the segment.
          example: 0.70154
          type: number
          x-konfig-original-example: 0.70154
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SegmentObject-properties-start
        duration:
          description: The duration (in seconds) of the segment.
          example: 0.19891
          type: number
          x-konfig-original-example: 0.19891
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SegmentObject-properties-duration
        confidence:
          description: |
            The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field.
          example: 0.435
          maximum: 1
          minimum: 0
          type: number
          x-konfig-original-example: 0.435
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SegmentObject-properties-confidence
        loudness_start:
          description: "The onset loudness of the segment in decibels (dB). Combined\
            \ with `loudness_max` and `loudness_max_time`, these components can be\
            \ used to describe the \"attack\" of the segment."
          example: -23.053
          type: number
          x-konfig-original-example: -23.053
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SegmentObject-properties-loudness_start
        loudness_max:
          description: "The peak loudness of the segment in decibels (dB). Combined\
            \ with `loudness_start` and `loudness_max_time`, these components can\
            \ be used to describe the \"attack\" of the segment."
          example: -14.25
          type: number
          x-konfig-original-example: -14.25
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SegmentObject-properties-loudness_max
        loudness_max_time:
          description: "The segment-relative offset of the segment peak loudness in\
            \ seconds. Combined with `loudness_start` and `loudness_max`, these components\
            \ can be used to desctibe the \"attack\" of the segment."
          example: 0.07305
          type: number
          x-konfig-original-example: 0.07305
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SegmentObject-properties-loudness_max_time
        loudness_end:
          description: The offset loudness of the segment in decibels (dB). This value
            should be equivalent to the loudness_start of the following segment.
          example: 0
          type: number
          x-konfig-original-example: 0
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SegmentObject-properties-loudness_end
        pitches:
          description: |
            Pitch content is given by a “chroma” vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).

            Vectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0.
            As can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies.
            ![pitch vector](https://developer.spotify.com/assets/audio/Pitch_vector.png)
          example:
          - 0.212
          - 0.141
          - 0.294
          items:
            maximum: 1
            minimum: 0
            type: number
          type: array
          x-konfig-original-example:
          - 0.212
          - 0.141
          - 0.294
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SegmentObject-properties-pitches
        timbre:
          description: |
            Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. It is a complex notion also referred to as sound color, texture, or tone quality, and is derived from the shape of a segment’s spectro-temporal surface, independently of pitch and loudness. The timbre feature is a vector that includes 12 unbounded values roughly centered around 0. Those values are high level abstractions of the spectral surface, ordered by degree of importance.

            For completeness however, the first dimension represents the average loudness of the segment; second emphasizes brightness; third is more closely correlated to the flatness of a sound; fourth to sounds with a stronger attack; etc. See an image below representing the 12 basis functions (i.e. template segments).
            ![timbre basis functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png)

            The actual timbre of the segment is best described as a linear combination of these 12 basis functions weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below. Timbre vectors are best used in comparison with each other.
          example:
          - 42.115
          - 64.373
          - -0.233
          items:
            type: number
          type: array
          x-konfig-original-example:
          - 42.115
          - 64.373
          - -0.233
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-SegmentObject-properties-timbre
      type: object
    TimeSignature:
      description: "An estimated time signature. The time signature (meter) is a notational\
        \ convention to specify how many beats are in each bar (or measure). The time\
        \ signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"\
        7/4\"."
      example: 4
      maximum: 7
      minimum: 3
      type: integer
      x-konfig-original-example: 4
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-TimeSignature
    Tempo:
      description: |
        The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
      example: 118.211
      format: float
      type: number
      x-spotify-docs-type: Float
      x-konfig-original-example: 118.211
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-Tempo
    Loudness:
      description: |
        The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.
      example: -5.883
      format: float
      type: number
      x-spotify-docs-type: Float
      x-konfig-original-example: -5.883
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-Loudness
    Key:
      description: |
        The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
      example: 9
      maximum: 11
      minimum: -1
      type: integer
      x-konfig-original-example: 9
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-Key
    Mode:
      description: |
        Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
      example: 0
      type: integer
      x-konfig-original-example: 0
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-Mode
    AudioFeaturesObject:
      example:
        track_href: |
          https://api.spotify.com/v1/tracks/2takcwOaAZWiXQijPHIx7B
        loudness: -5.883
        liveness: 0.0866
        tempo: 118.211
        valence: 0.428
        instrumentalness: 0.00686
        type: audio_features
        danceability: 0.585
        uri: spotify:track:2takcwOaAZWiXQijPHIx7B
        speechiness: 0.0556
        duration_ms: 237040
        mode: 0
        acousticness: 0.00242
        id: 2takcwOaAZWiXQijPHIx7B
        analysis_url: |
          https://api.spotify.com/v1/audio-analysis/2takcwOaAZWiXQijPHIx7B
        key: 9
        energy: 0.842
        time_signature: 4
      properties:
        acousticness:
          description: |
            A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.
          example: 0.00242
          format: float
          maximum: 1
          minimum: 0
          type: number
          x-spotify-docs-type: Float
          x-konfig-original-example: 0.00242
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-acousticness
        analysis_url:
          description: |
            A URL to access the full audio analysis of this track. An access token is required to access this data.
          example: |
            https://api.spotify.com/v1/audio-analysis/2takcwOaAZWiXQijPHIx7B
          type: string
          x-konfig-original-example: |
            https://api.spotify.com/v1/audio-analysis/2takcwOaAZWiXQijPHIx7B
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-analysis_url
        danceability:
          description: |
            Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
          example: 0.585
          format: float
          type: number
          x-spotify-docs-type: Float
          x-konfig-original-example: 0.585
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-danceability
        duration_ms:
          description: |
            The duration of the track in milliseconds.
          example: 237040
          type: integer
          x-konfig-original-example: 237040
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-duration_ms
        energy:
          description: |
            Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
          example: 0.842
          format: float
          type: number
          x-spotify-docs-type: Float
          x-konfig-original-example: 0.842
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-energy
        id:
          description: |
            The Spotify ID for the track.
          example: 2takcwOaAZWiXQijPHIx7B
          type: string
          x-konfig-original-example: 2takcwOaAZWiXQijPHIx7B
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-id
        instrumentalness:
          description: |
            Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
          example: 0.00686
          format: float
          type: number
          x-spotify-docs-type: Float
          x-konfig-original-example: 0.00686
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-instrumentalness
        key:
          description: |
            The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
          example: 9
          maximum: 11
          minimum: -1
          type: integer
          x-konfig-original-example: 9
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-Key
        liveness:
          description: |
            Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
          example: 0.0866
          format: float
          type: number
          x-spotify-docs-type: Float
          x-konfig-original-example: 0.0866
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-liveness
        loudness:
          description: |
            The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.
          example: -5.883
          format: float
          type: number
          x-spotify-docs-type: Float
          x-konfig-original-example: -5.883
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-Loudness
        mode:
          description: |
            Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
          example: 0
          type: integer
          x-konfig-original-example: 0
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-Mode
        speechiness:
          description: |
            Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
          example: 0.0556
          format: float
          type: number
          x-spotify-docs-type: Float
          x-konfig-original-example: 0.0556
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-speechiness
        tempo:
          description: |
            The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
          example: 118.211
          format: float
          type: number
          x-spotify-docs-type: Float
          x-konfig-original-example: 118.211
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-Tempo
        time_signature:
          description: "An estimated time signature. The time signature (meter) is\
            \ a notational convention to specify how many beats are in each bar (or\
            \ measure). The time signature ranges from 3 to 7 indicating time signatures\
            \ of \"3/4\", to \"7/4\"."
          example: 4
          maximum: 7
          minimum: 3
          type: integer
          x-konfig-original-example: 4
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-TimeSignature
        track_href:
          description: |
            A link to the Web API endpoint providing full details of the track.
          example: |
            https://api.spotify.com/v1/tracks/2takcwOaAZWiXQijPHIx7B
          type: string
          x-konfig-original-example: |
            https://api.spotify.com/v1/tracks/2takcwOaAZWiXQijPHIx7B
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-track_href
        type:
          description: |
            The object type.
          enum:
          - audio_features
          type: string
        uri:
          description: |
            The Spotify URI for the track.
          example: spotify:track:2takcwOaAZWiXQijPHIx7B
          type: string
          x-konfig-original-example: spotify:track:2takcwOaAZWiXQijPHIx7B
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-uri
        valence:
          description: |
            A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
          example: 0.428
          format: float
          maximum: 1
          minimum: 0
          type: number
          x-spotify-docs-type: Float
          x-konfig-original-example: 0.428
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-valence
      type: object
      x-spotify-docs-type: AudioFeaturesObject
      x-konfig-is-used-in-successful-response: true
    SimplifiedTrackObject:
      properties:
        artists:
          description: The artists who performed the track. Each artist object includes
            a link in `href` to more detailed information about the artist.
          items:
            $ref: '#/components/schemas/SimplifiedArtistObject'
          type: array
        available_markets:
          description: |
            A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          type: array
        disc_number:
          description: The disc number (usually `1` unless the album consists of more
            than one disc).
          type: integer
        duration_ms:
          description: The track length in milliseconds.
          type: integer
        explicit:
          description: Whether or not the track has explicit lyrics ( `true` = yes
            it does; `false` = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: A link to the Web API endpoint providing full details of the
            track.
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          type: string
        is_playable:
          description: |
            Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.
          type: boolean
        linked_from:
          $ref: '#/components/schemas/LinkedTrackObject'
        restrictions:
          $ref: '#/components/schemas/TrackRestrictionObject'
        name:
          description: The name of the track.
          type: string
        preview_url:
          description: |
            A URL to a 30 second preview (MP3 format) of the track.
          nullable: true
          type: string
          x-spotify-policy-list:
          - $ref: '#/components/x-spotify-policy/policies/StandalonePreview'
        track_number:
          description: |
            The number of the track. If an album has several discs, the track number is the number on the specified disc.
          type: integer
        type:
          description: |
            The object type: "track".
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          type: string
        is_local:
          description: |
            Whether or not the track is from a local file.
          type: boolean
      type: object
      x-spotify-docs-type: SimplifiedTrackObject
      x-konfig-properties:
        external_urls:
          description: |
            External URLs for this track.
        linked_from:
          description: "Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/)\
            \ is applied and is only part of the response if the track linking, in\
            \ fact, exists. The requested track has been replaced with a different\
            \ track. The track in the `linked_from` object contains information about\
            \ the originally requested track."
        restrictions:
          description: |
            Included in the response when a content restriction is applied.
    DeviceObject:
      example:
        is_active: true
        is_private_session: true
        is_restricted: true
        name: Kitchen speaker
        id: id
        type: computer
        supports_volume: true
        volume_percent: 59
      properties:
        id:
          description: "The device ID. This ID is unique and persistent to some extent.\
            \ However, this is not guaranteed and any cached `device_id` should periodically\
            \ be cleared out and refetched as necessary."
          nullable: true
          type: string
        is_active:
          description: If this device is the currently active device.
          type: boolean
        is_private_session:
          description: If this device is currently in a private session.
          type: boolean
        is_restricted:
          description: Whether controlling this device is restricted. At present if
            this is "true" then no Web API commands will be accepted by this device.
          type: boolean
        name:
          description: A human-readable name for the device. Some devices have a name
            that the user can configure (e.g. \"Loudest speaker\") and some devices
            have a generic name associated with the manufacturer or device model.
          example: Kitchen speaker
          type: string
          x-konfig-original-example: Kitchen speaker
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-DeviceObject-properties-name
        type:
          description: "Device type, such as \"computer\", \"smartphone\" or \"speaker\"\
            ."
          example: computer
          type: string
          x-konfig-original-example: computer
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-DeviceObject-properties-type
        volume_percent:
          description: The current volume in percent.
          example: 59
          maximum: 100
          minimum: 0
          nullable: true
          type: integer
          x-konfig-original-example: 59
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-DeviceObject-properties-volume_percent
        supports_volume:
          description: If this device can be used to set the volume.
          type: boolean
      type: object
      x-spotify-docs-type: DeviceObject
    CursorObject:
      properties:
        after:
          description: The cursor to use as key to find the next page of items.
          type: string
        before:
          description: The cursor to use as key to find the previous page of items.
          type: string
      type: object
      x-spotify-docs-type: CursorObject
    CursorPagingObject:
      properties:
        href:
          description: A link to the Web API endpoint returning the full result of
            the request.
          type: string
        limit:
          description: The maximum number of items in the response (as set in the
            query or by default).
          type: integer
        next:
          description: URL to the next page of items. ( `null` if none)
          type: string
        cursors:
          $ref: '#/components/schemas/CursorObject'
        total:
          description: The total number of items available to return.
          type: integer
      type: object
      x-spotify-docs-type: CursorPagingObject
      x-konfig-properties:
        cursors:
          description: The cursors used to find the next set of items.
    CursorPagingPlayHistoryObject:
      allOf:
      - $ref: '#/components/schemas/CursorPagingObject'
      - $ref: '#/components/schemas/CursorPagingPlayHistoryObject_allOf'
      type: object
      x-spotify-docs-type: PagingTrackObject
      x-konfig-is-used-in-successful-response: true
    CursorPagingSimplifiedArtistObject:
      allOf:
      - $ref: '#/components/schemas/CursorPagingObject'
      - $ref: '#/components/schemas/CursorPagingSimplifiedArtistObject_allOf'
      type: object
      x-spotify-docs-type: PagingArtistObject
    PagingObject:
      properties:
        href:
          description: |
            A link to the Web API endpoint returning the full result of the request
          example: |
            https://api.spotify.com/v1/me/shows?offset=0&limit=20
          type: string
          x-konfig-original-example: |
            https://api.spotify.com/v1/me/shows?offset=0&limit=20
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PagingObject-properties-href
        limit:
          description: |
            The maximum number of items in the response (as set in the query or by default).
          example: 20
          type: integer
          x-konfig-original-example: 20
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PagingObject-properties-limit
        next:
          description: |
            URL to the next page of items. ( `null` if none)
          example: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          nullable: true
          type: string
          x-konfig-original-example: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PagingObject-properties-next
        offset:
          description: |
            The offset of the items returned (as set in the query or by default)
          example: 0
          type: integer
          x-konfig-original-example: 0
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PagingObject-properties-offset
        previous:
          description: |
            URL to the previous page of items. ( `null` if none)
          example: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          nullable: true
          type: string
          x-konfig-original-example: https://api.spotify.com/v1/me/shows?offset=1&limit=1
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PagingObject-properties-previous
        total:
          description: |
            The total number of items available to return.
          example: 4
          type: integer
          x-konfig-original-example: 4
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PagingObject-properties-total
      required:
      - href
      - items
      - limit
      - next
      - offset
      - previous
      - total
      type: object
      x-spotify-docs-type: PagingObject
    PagingPlaylistObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/PagingPlaylistObject_allOf'
      type: object
      x-spotify-docs-type: PagingPlaylistObject
      x-konfig-is-used-in-successful-response: true
    PagingFeaturedPlaylistObject:
      example:
        playlists: null
        message: Popular Playlists
      properties:
        message:
          description: |
            The localized message of a playlist.
          example: Popular Playlists
          type: string
          x-konfig-original-example: Popular Playlists
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PagingFeaturedPlaylistObject-properties-message
        playlists:
          $ref: '#/components/schemas/PagingPlaylistObject'
      type: object
      x-spotify-docs-type: PagingFeaturedPlaylistObject
      x-konfig-is-used-in-successful-response: true
    PagingArtistDiscographyAlbumObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/PagingArtistDiscographyAlbumObject_allOf'
      type: object
      x-spotify-docs-type: PagingArtistDiscographyAlbumObject
      x-konfig-is-used-in-successful-response: true
    PagingSimplifiedAlbumObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/PagingSimplifiedAlbumObject_allOf'
      type: object
      x-spotify-docs-type: PagingAlbumObject
    PagingSavedAlbumObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/PagingSavedAlbumObject_allOf'
      type: object
      x-spotify-docs-type: PagingSavedAlbumObject
      x-konfig-is-used-in-successful-response: true
    PagingSimplifiedTrackObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/PagingSimplifiedTrackObject_allOf'
      type: object
      x-spotify-docs-type: PagingTrackObject
      x-konfig-is-used-in-successful-response: true
    PagingSavedTrackObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/PagingSavedTrackObject_allOf'
      type: object
      x-spotify-docs-type: PagingTrackObject
      x-konfig-is-used-in-successful-response: true
    PagingTrackObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/PagingTrackObject_allOf'
      type: object
      x-spotify-docs-type: PagingTrackObject
    PagingPlaylistTrackObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/PagingPlaylistTrackObject_allOf'
      type: object
      x-spotify-docs-type: PagingPlaylistTrackObject
      x-konfig-is-used-in-successful-response: true
    PagingSimplifiedShowObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/PagingSimplifiedShowObject_allOf'
      type: object
      x-spotify-docs-type: PagingShowObject
    PagingSavedShowObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/PagingSavedShowObject_allOf'
      type: object
      x-spotify-docs-type: PagingShowObject
      x-konfig-is-used-in-successful-response: true
    PagingSimplifiedEpisodeObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/PagingSimplifiedEpisodeObject_allOf'
      type: object
      x-spotify-docs-type: PagingEpisodeObject
      x-konfig-is-used-in-successful-response: true
    PagingSavedEpisodeObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/PagingSavedEpisodeObject_allOf'
      type: object
      x-spotify-docs-type: PagingEpisodeObject
      x-konfig-is-used-in-successful-response: true
    PagingSimplifiedAudiobookObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/PagingSimplifiedAudiobookObject_allOf'
      type: object
      x-spotify-docs-type: PagingAudiobookObject
      x-konfig-is-used-in-successful-response: true
    PagingArtistObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/CursorPagingSimplifiedArtistObject_allOf'
      type: object
      x-spotify-docs-type: PagingArtistObject
    PagingSimplifiedChapterObject:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/PagingSimplifiedChapterObject_allOf'
      type: object
      x-spotify-docs-type: PagingSimplifiedChapterObject
      x-konfig-is-used-in-successful-response: true
    RecommendationsObject:
      example:
        seeds:
        - href: href
          id: id
          type: type
          afterRelinkingSize: 6
          initialPoolSize: 1
          afterFilteringSize: 0
        - href: href
          id: id
          type: type
          afterRelinkingSize: 6
          initialPoolSize: 1
          afterFilteringSize: 0
        tracks:
        - disc_number: 0
          album: null
          available_markets:
          - available_markets
          - available_markets
          restrictions:
            reason: reason
          type: track
          external_ids:
            ean: ean
            upc: upc
            isrc: isrc
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers:
              total: 0
              href: href
            genres:
            - Prog rock
            - Grunge
            popularity: 6
            name: name
            href: href
            id: id
            type: artist
            external_urls:
              spotify: spotify
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers:
              total: 0
              href: href
            genres:
            - Prog rock
            - Grunge
            popularity: 6
            name: name
            href: href
            id: id
            type: artist
            external_urls:
              spotify: spotify
            uri: uri
          linked_from: "{}"
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls:
            spotify: spotify
        - disc_number: 0
          album: null
          available_markets:
          - available_markets
          - available_markets
          restrictions:
            reason: reason
          type: track
          external_ids:
            ean: ean
            upc: upc
            isrc: isrc
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers:
              total: 0
              href: href
            genres:
            - Prog rock
            - Grunge
            popularity: 6
            name: name
            href: href
            id: id
            type: artist
            external_urls:
              spotify: spotify
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers:
              total: 0
              href: href
            genres:
            - Prog rock
            - Grunge
            popularity: 6
            name: name
            href: href
            id: id
            type: artist
            external_urls:
              spotify: spotify
            uri: uri
          linked_from: "{}"
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls:
            spotify: spotify
      properties:
        seeds:
          description: |
            An array of recommendation seed objects.
          items:
            $ref: '#/components/schemas/RecommendationSeedObject'
          type: array
        tracks:
          description: |
            An array of track object (simplified) ordered according to the parameters supplied.
          items:
            $ref: '#/components/schemas/TrackObject'
          type: array
      required:
      - seeds
      - tracks
      type: object
      x-spotify-docs-type: RecommendationsObject
      x-konfig-is-used-in-successful-response: true
    RecommendationSeedObject:
      example:
        href: href
        id: id
        type: type
        afterRelinkingSize: 6
        initialPoolSize: 1
        afterFilteringSize: 0
      properties:
        afterFilteringSize:
          description: |
            The number of tracks available after min\_\* and max\_\* filters have been applied.
          type: integer
        afterRelinkingSize:
          description: |
            The number of tracks available after relinking for regional availability.
          type: integer
        href:
          description: |
            A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be `null`.
          type: string
        id:
          description: |
            The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter.
          type: string
        initialPoolSize:
          description: |
            The number of recommended tracks available for this seed.
          type: integer
        type:
          description: |
            The entity type of this seed. One of `artist`, `track` or `genre`.
          type: string
      type: object
      x-spotify-docs-type: RecommendationSeedObject
    SavedAlbumObject:
      properties:
        added_at:
          description: |
            The date and time the album was saved
            Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
            If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
          format: date-time
          type: string
          x-spotify-docs-type: Timestamp
        album:
          $ref: '#/components/schemas/AlbumObject'
      type: object
      x-spotify-docs-type: SavedAlbumObject
      x-konfig-properties:
        album:
          description: Information about the album.
    SavedTrackObject:
      properties:
        added_at:
          description: |
            The date and time the track was saved.
            Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
            If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
          format: date-time
          type: string
          x-spotify-docs-type: Timestamp
        track:
          $ref: '#/components/schemas/TrackObject'
      type: object
      x-spotify-docs-type: SavedTrackObject
      x-konfig-properties:
        track:
          description: Information about the track.
    SavedEpisodeObject:
      properties:
        added_at:
          description: |
            The date and time the episode was saved.
            Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
          format: date-time
          type: string
          x-spotify-docs-type: Timestamp
        episode:
          $ref: '#/components/schemas/EpisodeObject'
      type: object
      x-spotify-docs-type: SavedEpisodeObject
      x-konfig-properties:
        episode:
          description: Information about the episode.
    SavedShowObject:
      properties:
        added_at:
          description: |
            The date and time the show was saved.
            Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
            If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
          format: date-time
          type: string
          x-spotify-docs-type: Timestamp
        show:
          $ref: '#/components/schemas/SimplifiedShowObject'
      type: object
      x-spotify-docs-type: SavedShowObject
      x-konfig-properties:
        show:
          description: Information about the show.
    PlaylistObject:
      example:
        owner: null
        images:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        snapshot_id: snapshot_id
        collaborative: true
        description: description
        type: type
        uri: uri
        tracks: null
        followers:
          total: 0
          href: href
        public: true
        name: name
        href: href
        id: id
        external_urls:
          spotify: spotify
      properties:
        description:
          description: |
            The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
          nullable: true
          type: string
        collaborative:
          description: |
            `true` if the owner allows other users to modify the playlist.
          type: boolean
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        followers:
          $ref: '#/components/schemas/FollowersObject'
        href:
          description: |
            A link to the Web API endpoint providing full details of the playlist.
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
          type: string
        images:
          description: |
            Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        name:
          description: |
            The name of the playlist.
          type: string
        owner:
          $ref: '#/components/schemas/PlaylistOwnerObject'
        public:
          description: |
            The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)
          type: boolean
        snapshot_id:
          description: |
            The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
          type: string
        tracks:
          $ref: '#/components/schemas/PagingPlaylistTrackObject'
        type:
          description: |
            The object type: "playlist"
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
          type: string
      type: object
      x-spotify-docs-type: PlaylistObject
      x-konfig-properties:
        external_urls:
          description: |
            Known external URLs for this playlist.
        followers:
          description: Information about the followers of the playlist.
        owner:
          description: |
            The user who owns the playlist
        tracks:
          description: |
            The tracks of the playlist.
          type: object
      x-konfig-is-used-in-successful-response: true
    SimplifiedPlaylistObject:
      properties:
        description:
          description: |
            The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
          type: string
        collaborative:
          description: |
            `true` if the owner allows other users to modify the playlist.
          type: boolean
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: |
            A link to the Web API endpoint providing full details of the playlist.
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
          type: string
        images:
          description: |
            Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        name:
          description: |
            The name of the playlist.
          type: string
        owner:
          $ref: '#/components/schemas/PlaylistOwnerObject'
        public:
          description: |
            The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)
          type: boolean
        snapshot_id:
          description: |
            The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
          type: string
        tracks:
          $ref: '#/components/schemas/PlaylistTracksRefObject'
        type:
          description: |
            The object type: "playlist"
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
          type: string
      type: object
      x-spotify-docs-type: SimplifiedPlaylistObject
      x-konfig-properties:
        external_urls:
          description: |
            Known external URLs for this playlist.
        owner:
          description: |
            The user who owns the playlist
        tracks:
          description: |
            A collection containing a link ( `href` ) to the Web API endpoint where full details of the playlist's tracks can be retrieved, along with the `total` number of tracks in the playlist. Note, a track object may be `null`. This can happen if a track is no longer available.
    PlaylistTracksRefObject:
      properties:
        href:
          description: |
            A link to the Web API endpoint where full details of the playlist's tracks can be retrieved.
          type: string
        total:
          description: |
            Number of tracks in the playlist.
          type: integer
      type: object
      x-spotify-docs-type: PlaylistTracksRefObject
    PlaylistUserObject:
      properties:
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        followers:
          $ref: '#/components/schemas/FollowersObject'
        href:
          description: |
            A link to the Web API endpoint for this user.
          type: string
        id:
          description: |
            The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.
          type: string
        type:
          description: |
            The object type.
          enum:
          - user
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.
          type: string
      type: object
      x-spotify-docs-type: PlaylistUserObject
      x-konfig-properties:
        external_urls:
          description: |
            Known public external URLs for this user.
        followers:
          description: |
            Information about the followers of this user.
    PlaylistOwnerObject:
      allOf:
      - $ref: '#/components/schemas/PlaylistUserObject'
      - $ref: '#/components/schemas/PlaylistOwnerObject_allOf'
    CategoryObject:
      example:
        name: EQUAL
        href: href
        id: equal
        icons:
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
        - width: 300
          url: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          height: 300
      properties:
        href:
          description: |
            A link to the Web API endpoint returning full details of the category.
          type: string
        icons:
          description: |
            The category icon, in various sizes.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        id:
          description: |
            The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) of the category.
          example: equal
          type: string
          x-konfig-original-example: equal
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-CategoryObject-properties-id
        name:
          description: |
            The name of the category.
          example: EQUAL
          type: string
          x-konfig-original-example: EQUAL
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-CategoryObject-properties-name
      required:
      - href
      - icons
      - id
      - name
      type: object
      x-spotify-docs-type: CategoryObject
      x-konfig-is-used-in-successful-response: true
    TrackObject:
      example:
        disc_number: 0
        album: null
        available_markets:
        - available_markets
        - available_markets
        restrictions:
          reason: reason
        type: track
        external_ids:
          ean: ean
          upc: upc
          isrc: isrc
        uri: uri
        duration_ms: 6
        explicit: true
        is_playable: true
        artists:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          followers:
            total: 0
            href: href
          genres:
          - Prog rock
          - Grunge
          popularity: 6
          name: name
          href: href
          id: id
          type: artist
          external_urls:
            spotify: spotify
          uri: uri
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          followers:
            total: 0
            href: href
          genres:
          - Prog rock
          - Grunge
          popularity: 6
          name: name
          href: href
          id: id
          type: artist
          external_urls:
            spotify: spotify
          uri: uri
        linked_from: "{}"
        preview_url: preview_url
        popularity: 1
        name: name
        track_number: 5
        href: href
        id: id
        is_local: true
        external_urls:
          spotify: spotify
      properties:
        album:
          $ref: '#/components/schemas/SimplifiedAlbumObject'
        artists:
          description: |
            The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
          items:
            $ref: '#/components/schemas/ArtistObject'
          type: array
        available_markets:
          description: |
            A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          type: array
        disc_number:
          description: |
            The disc number (usually `1` unless the album consists of more than one disc).
          type: integer
        duration_ms:
          description: |
            The track length in milliseconds.
          type: integer
        explicit:
          description: |
            Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
          type: boolean
        external_ids:
          $ref: '#/components/schemas/ExternalIdObject'
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: |
            A link to the Web API endpoint providing full details of the track.
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          type: string
        is_playable:
          description: |
            Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`.
          type: boolean
        linked_from:
          description: |
            Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track.
          type: object
        restrictions:
          $ref: '#/components/schemas/TrackRestrictionObject'
        name:
          description: |
            The name of the track.
          type: string
        popularity:
          description: |
            The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._
          type: integer
        preview_url:
          description: |
            A link to a 30 second preview (MP3 format) of the track. Can be `null`
          nullable: true
          type: string
          x-spotify-policy-list:
          - $ref: '#/components/x-spotify-policy/policies/StandalonePreview'
        track_number:
          description: |
            The number of the track. If an album has several discs, the track number is the number on the specified disc.
          type: integer
        type:
          description: |
            The object type: "track".
          enum:
          - track
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          type: string
        is_local:
          description: |
            Whether or not the track is from a local file.
          type: boolean
      type: object
      x-spotify-docs-type: TrackObject
      x-konfig-properties:
        album:
          description: |
            The album on which the track appears. The album object includes a link in `href` to full information about the album.
        external_ids:
          description: |
            Known external IDs for the track.
        external_urls:
          description: |
            Known external URLs for this track.
        restrictions:
          description: |
            Included in the response when a content restriction is applied.
      x-konfig-is-used-in-successful-response: true
    EpisodeObject:
      allOf:
      - $ref: '#/components/schemas/EpisodeBase'
      - $ref: '#/components/schemas/EpisodeObject_allOf'
      type: object
      x-spotify-docs-type: EpisodeObject
      x-konfig-is-used-in-successful-response: true
    SimplifiedEpisodeObject:
      allOf:
      - $ref: '#/components/schemas/EpisodeBase'
      - type: object
      type: object
      x-spotify-docs-type: SimplifiedEpisodeObject
    EpisodeBase:
      properties:
        description:
          description: |
            A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
          example: |
            A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
          type: string
          x-konfig-original-example: |
            A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-EpisodeBase-properties-description
        audio_preview_url:
          description: |
            A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
          example: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
          nullable: true
          type: string
          x-spotify-policy-list:
          - $ref: '#/components/x-spotify-policy/policies/StandalonePreview'
          x-konfig-original-example: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-EpisodeBase-properties-audio_preview_url
        html_description:
          description: |
            A description of the episode. This field may contain HTML tags.
          example: |
            <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
          type: string
          x-konfig-original-example: |
            <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-EpisodeBase-properties-html_description
        duration_ms:
          description: |
            The episode length in milliseconds.
          example: 1686230
          type: integer
          x-konfig-original-example: 1686230
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-EpisodeBase-properties-duration_ms
        explicit:
          description: |
            Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: |
            A link to the Web API endpoint providing full details of the episode.
          example: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
          type: string
          x-konfig-original-example: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-EpisodeBase-properties-href
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
          example: 5Xt5DXGzch68nYYamXrNxZ
          type: string
          x-konfig-original-example: 5Xt5DXGzch68nYYamXrNxZ
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-EpisodeBase-properties-id
        images:
          description: |
            The cover art for the episode in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        is_externally_hosted:
          description: |
            True if the episode is hosted outside of Spotify's CDN.
          type: boolean
        is_playable:
          description: |
            True if the episode is playable in the given market. Otherwise false.
          type: boolean
        language:
          deprecated: true
          description: |
            The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead.
          example: en
          type: string
          x-konfig-original-example: en
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-EpisodeBase-properties-language
        languages:
          description: |
            A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.
          example:
          - fr
          - en
          items:
            type: string
          type: array
          x-konfig-original-example:
          - fr
          - en
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-EpisodeBase-properties-languages
        name:
          description: |
            The name of the episode.
          example: |
            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
          type: string
          x-konfig-original-example: |
            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-EpisodeBase-properties-name
        release_date:
          description: |
            The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`.
          example: 1981-12-15
          type: string
          x-konfig-original-example: 1981-12-15
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-EpisodeBase-properties-release_date
        release_date_precision:
          description: |
            The precision with which `release_date` value is known.
          enum:
          - year
          - month
          - day
          example: day
          type: string
          x-konfig-original-example: day
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-EpisodeBase-properties-release_date_precision
        resume_point:
          $ref: '#/components/schemas/ResumePointObject'
        type:
          description: |
            The object type.
          enum:
          - episode
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
          example: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
          type: string
          x-konfig-original-example: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-EpisodeBase-properties-uri
        restrictions:
          $ref: '#/components/schemas/EpisodeRestrictionObject'
      required:
      - audio_preview_url
      - description
      - duration_ms
      - explicit
      - external_urls
      - href
      - html_description
      - id
      - images
      - is_externally_hosted
      - is_playable
      - languages
      - name
      - release_date
      - release_date_precision
      - resume_point
      - type
      - uri
      type: object
      x-konfig-properties:
        external_urls:
          description: |
            External URLs for this episode.
        resume_point:
          description: |
            The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.
        restrictions:
          description: |
            Included in the response when a content restriction is applied.
    ResumePointObject:
      properties:
        fully_played:
          description: |
            Whether or not the episode has been fully played by the user.
          type: boolean
        resume_position_ms:
          description: |
            The user's most recent position in the episode in milliseconds.
          type: integer
      type: object
      x-spotify-docs-type: ResumePointObject
    ShowBase:
      properties:
        description:
          description: |
            A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
          type: string
        available_markets:
          description: |
            A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          type: array
        copyrights:
          description: |
            The copyright statements of the show.
          items:
            $ref: '#/components/schemas/CopyrightObject'
          type: array
        html_description:
          description: |
            A description of the show. This field may contain HTML tags.
          type: string
        explicit:
          description: |
            Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: |
            A link to the Web API endpoint providing full details of the show.
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show.
          type: string
        images:
          description: |
            The cover art for the show in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        is_externally_hosted:
          description: |
            True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.
          type: boolean
        languages:
          description: |
            A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
          items:
            type: string
          type: array
        media_type:
          description: |
            The media type of the show.
          type: string
        name:
          description: |
            The name of the episode.
          type: string
        publisher:
          description: |
            The publisher of the show.
          type: string
        type:
          description: |
            The object type.
          enum:
          - show
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show.
          type: string
        total_episodes:
          description: |
            The total number of episodes in the show.
          type: integer
      required:
      - available_markets
      - copyrights
      - description
      - explicit
      - external_urls
      - href
      - html_description
      - id
      - images
      - is_externally_hosted
      - languages
      - media_type
      - name
      - publisher
      - total_episodes
      - type
      - uri
      type: object
      x-konfig-properties:
        external_urls:
          description: |
            External URLs for this show.
    ShowObject:
      allOf:
      - $ref: '#/components/schemas/ShowBase'
      - $ref: '#/components/schemas/ShowObject_allOf'
      x-spotify-docs-type: ShowObject
      x-konfig-is-used-in-successful-response: true
    SimplifiedShowObject:
      allOf:
      - $ref: '#/components/schemas/ShowBase'
      - type: object
      x-spotify-docs-type: SimplifiedShowObject
    AudiobookBase:
      properties:
        description:
          description: |
            A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
          type: string
        authors:
          description: |
            The author(s) for the audiobook.
          items:
            $ref: '#/components/schemas/AuthorObject'
          type: array
        available_markets:
          description: |
            A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          type: array
        copyrights:
          description: |
            The copyright statements of the audiobook.
          items:
            $ref: '#/components/schemas/CopyrightObject'
          type: array
        html_description:
          description: |
            A description of the audiobook. This field may contain HTML tags.
          type: string
        edition:
          description: |
            The edition of the audiobook.
          example: Unabridged
          type: string
          x-konfig-original-example: Unabridged
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudiobookBase-properties-edition
        explicit:
          description: |
            Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: |
            A link to the Web API endpoint providing full details of the audiobook.
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
          type: string
        images:
          description: |
            The cover art for the audiobook in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        languages:
          description: |
            A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
          items:
            type: string
          type: array
        media_type:
          description: |
            The media type of the audiobook.
          type: string
        name:
          description: |
            The name of the audiobook.
          type: string
        narrators:
          description: |
            The narrator(s) for the audiobook.
          items:
            $ref: '#/components/schemas/NarratorObject'
          type: array
        publisher:
          description: |
            The publisher of the audiobook.
          type: string
        type:
          description: |
            The object type.
          enum:
          - audiobook
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
          type: string
        total_chapters:
          description: |
            The number of chapters in this audiobook.
          type: integer
      required:
      - authors
      - available_markets
      - copyrights
      - description
      - explicit
      - external_urls
      - href
      - html_description
      - id
      - images
      - languages
      - media_type
      - name
      - narrators
      - publisher
      - total_chapters
      - type
      - uri
      type: object
      x-konfig-properties:
        external_urls:
          description: |
            External URLs for this audiobook.
    AudiobookObject:
      allOf:
      - $ref: '#/components/schemas/AudiobookBase'
      - $ref: '#/components/schemas/AudiobookObject_allOf'
      x-spotify-docs-type: AudiobookObject
      x-konfig-is-used-in-successful-response: true
    SimplifiedAudiobookObject:
      allOf:
      - $ref: '#/components/schemas/AudiobookBase'
      - type: object
      x-spotify-docs-type: SimplifiedAudiobookObject
    AlbumBase:
      properties:
        album_type:
          description: |
            The type of the album.
          enum:
          - album
          - single
          - compilation
          example: compilation
          type: string
          x-konfig-original-example: compilation
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AlbumBase-properties-album_type
        total_tracks:
          description: The number of tracks in the album.
          example: 9
          type: integer
          x-konfig-original-example: 9
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AlbumBase-properties-total_tracks
        available_markets:
          description: |
            The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._
          example:
          - CA
          - BR
          - IT
          items:
            type: string
          type: array
          x-konfig-original-example:
          - CA
          - BR
          - IT
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AlbumBase-properties-available_markets
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: |
            A link to the Web API endpoint providing full details of the album.
          type: string
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album.
          example: 2up3OPMp9Tb4dAKM2erWXQ
          type: string
          x-konfig-original-example: 2up3OPMp9Tb4dAKM2erWXQ
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AlbumBase-properties-id
        images:
          description: |
            The cover art for the album in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        name:
          description: |
            The name of the album. In case of an album takedown, the value may be an empty string.
          type: string
        release_date:
          description: |
            The date the album was first released.
          example: 1981-12
          type: string
          x-konfig-original-example: 1981-12
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AlbumBase-properties-release_date
        release_date_precision:
          description: |
            The precision with which `release_date` value is known.
          enum:
          - year
          - month
          - day
          example: year
          type: string
          x-konfig-original-example: year
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AlbumBase-properties-release_date_precision
        restrictions:
          $ref: '#/components/schemas/AlbumRestrictionObject'
        type:
          description: |
            The object type.
          enum:
          - album
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album.
          example: spotify:album:2up3OPMp9Tb4dAKM2erWXQ
          type: string
          x-konfig-original-example: spotify:album:2up3OPMp9Tb4dAKM2erWXQ
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AlbumBase-properties-uri
      required:
      - album_type
      - available_markets
      - external_urls
      - href
      - id
      - images
      - name
      - release_date
      - release_date_precision
      - total_tracks
      - type
      - uri
      type: object
      x-konfig-properties:
        external_urls:
          description: |
            Known external URLs for this album.
        restrictions:
          description: |
            Included in the response when a content restriction is applied.
    SimplifiedAlbumObject:
      allOf:
      - $ref: '#/components/schemas/AlbumBase'
      - $ref: '#/components/schemas/SimplifiedAlbumObject_allOf'
      x-spotify-docs-type: SimplifiedAlbumObject
    ArtistDiscographyAlbumObject:
      allOf:
      - $ref: '#/components/schemas/SimplifiedAlbumObject'
      - $ref: '#/components/schemas/ArtistDiscographyAlbumObject_allOf'
      x-spotify-docs-type: ArtistDiscographyAlbumObject
    ChapterObject:
      allOf:
      - $ref: '#/components/schemas/ChapterBase'
      - $ref: '#/components/schemas/ChapterObject_allOf'
      type: object
      x-spotify-docs-type: ChapterObject
      x-konfig-is-used-in-successful-response: true
    SimplifiedChapterObject:
      allOf:
      - $ref: '#/components/schemas/ChapterBase'
      - type: object
      type: object
      x-spotify-docs-type: SimplifiedChapterObject
    ChapterBase:
      properties:
        description:
          description: |
            A description of the chapter. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
          example: |
            We kept on ascending, with occasional periods of quick descent, but in the main always ascending. Suddenly, I became conscious of the fact that the driver was in the act of pulling up the horses in the courtyard of a vast ruined castle, from whose tall black windows came no ray of light, and whose broken battlements showed a jagged line against the moonlit sky.
          type: string
          x-konfig-original-example: |
            We kept on ascending, with occasional periods of quick descent, but in the main always ascending. Suddenly, I became conscious of the fact that the driver was in the act of pulling up the horses in the courtyard of a vast ruined castle, from whose tall black windows came no ray of light, and whose broken battlements showed a jagged line against the moonlit sky.
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ChapterBase-properties-description
        audio_preview_url:
          description: |
            A URL to a 30 second preview (MP3 format) of the chapter. `null` if not available.
          example: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
          nullable: true
          type: string
          x-spotify-policy-list:
          - $ref: '#/components/x-spotify-policy/policies/StandalonePreview'
          x-konfig-original-example: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ChapterBase-properties-audio_preview_url
        available_markets:
          description: |
            A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          type: array
        chapter_number:
          description: |
            The number of the chapter
          example: 1
          type: integer
          x-konfig-original-example: 1
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ChapterBase-properties-chapter_number
        html_description:
          description: |
            A description of the chapter. This field may contain HTML tags.
          example: |
            <p>We kept on ascending, with occasional periods of quick descent, but in the main always ascending. Suddenly, I became conscious of the fact that the driver was in the act of pulling up the horses in the courtyard of a vast ruined castle, from whose tall black windows came no ray of light, and whose broken battlements showed a jagged line against the moonlit sky.</p>
          type: string
          x-konfig-original-example: |
            <p>We kept on ascending, with occasional periods of quick descent, but in the main always ascending. Suddenly, I became conscious of the fact that the driver was in the act of pulling up the horses in the courtyard of a vast ruined castle, from whose tall black windows came no ray of light, and whose broken battlements showed a jagged line against the moonlit sky.</p>
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ChapterBase-properties-html_description
        duration_ms:
          description: |
            The chapter length in milliseconds.
          example: 1686230
          type: integer
          x-konfig-original-example: 1686230
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ChapterBase-properties-duration_ms
        explicit:
          description: |
            Whether or not the chapter has explicit content (true = yes it does; false = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: |
            A link to the Web API endpoint providing full details of the chapter.
          example: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
          type: string
          x-konfig-original-example: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ChapterBase-properties-href
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the chapter.
          example: 5Xt5DXGzch68nYYamXrNxZ
          type: string
          x-konfig-original-example: 5Xt5DXGzch68nYYamXrNxZ
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ChapterBase-properties-id
        images:
          description: |
            The cover art for the chapter in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        is_playable:
          description: |
            True if the chapter is playable in the given market. Otherwise false.
          type: boolean
        languages:
          description: |
            A list of the languages used in the chapter, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.
          example:
          - fr
          - en
          items:
            type: string
          type: array
          x-konfig-original-example:
          - fr
          - en
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ChapterBase-properties-languages
        name:
          description: |
            The name of the chapter.
          example: |
            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
          type: string
          x-konfig-original-example: |
            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ChapterBase-properties-name
        release_date:
          description: |
            The date the chapter was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`.
          example: 1981-12-15
          type: string
          x-konfig-original-example: 1981-12-15
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ChapterBase-properties-release_date
        release_date_precision:
          description: |
            The precision with which `release_date` value is known.
          enum:
          - year
          - month
          - day
          example: day
          type: string
          x-konfig-original-example: day
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ChapterBase-properties-release_date_precision
        resume_point:
          $ref: '#/components/schemas/ResumePointObject'
        type:
          description: |
            The object type.
          enum:
          - episode
          type: string
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the chapter.
          example: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
          type: string
          x-konfig-original-example: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ChapterBase-properties-uri
        restrictions:
          $ref: '#/components/schemas/ChapterRestrictionObject'
      required:
      - audio_preview_url
      - chapter_number
      - description
      - duration_ms
      - explicit
      - external_urls
      - href
      - html_description
      - id
      - images
      - is_playable
      - languages
      - name
      - release_date
      - release_date_precision
      - resume_point
      - type
      - uri
      type: object
      x-konfig-properties:
        external_urls:
          description: |
            External URLs for this chapter.
        resume_point:
          description: |
            The user's most recent position in the chapter. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.
        restrictions:
          description: |
            Included in the response when a content restriction is applied.
    AlbumObject:
      allOf:
      - $ref: '#/components/schemas/AlbumBase'
      - $ref: '#/components/schemas/AlbumObject_allOf'
      required:
      - artists
      - copyrights
      - external_ids
      - genres
      - label
      - popularity
      - tracks
      x-spotify-docs-type: AlbumObject
      x-konfig-is-used-in-successful-response: true
    ContextObject:
      example:
        href: href
        type: type
        external_urls:
          spotify: spotify
        uri: uri
      properties:
        type:
          description: |
            The object type, e.g. "artist", "playlist", "album", "show".
          type: string
        href:
          description: A link to the Web API endpoint providing full details of the
            track.
          type: string
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        uri:
          description: |
            The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the context.
          type: string
      type: object
      x-spotify-docs-type: ContextObject
      x-konfig-properties:
        external_urls:
          description: External URLs for this context.
    CopyrightObject:
      properties:
        text:
          description: |
            The copyright text for this content.
          type: string
        type:
          description: |
            The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright.
          type: string
      type: object
      x-spotify-docs-type: CopyrightObject
    AuthorObject:
      properties:
        name:
          description: |
            The name of the author.
          type: string
      type: object
      x-spotify-docs-type: AuthorObject
    NarratorObject:
      properties:
        name:
          description: |
            The name of the Narrator.
          type: string
      type: object
      x-spotify-docs-type: NarratorObject
    ExternalIdObject:
      example:
        ean: ean
        upc: upc
        isrc: isrc
      properties:
        isrc:
          description: |
            [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)
          type: string
        ean:
          description: |
            [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)
          type: string
        upc:
          description: |
            [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)
          type: string
      type: object
      x-spotify-docs-type: ExternalIdObject
    ExternalUrlObject:
      example:
        spotify: spotify
      properties:
        spotify:
          description: |
            The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.
          type: string
      type: object
      x-spotify-docs-type: ExternalUrlObject
    FollowersObject:
      example:
        total: 0
        href: href
      properties:
        href:
          description: |
            This will always be set to null, as the Web API does not support it at the moment.
          nullable: true
          type: string
        total:
          description: |
            The total number of followers.
          type: integer
      type: object
      x-spotify-docs-type: FollowersObject
    ImageObject:
      example:
        width: 300
        url: |
          https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
        height: 300
      properties:
        url:
          description: |
            The source URL of the image.
          example: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          type: string
          x-konfig-original-example: |
            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ImageObject-properties-url
        height:
          description: |
            The image height in pixels.
          example: 300
          nullable: true
          type: integer
          x-konfig-original-example: 300
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ImageObject-properties-height
        width:
          description: |
            The image width in pixels.
          example: 300
          nullable: true
          type: integer
          x-konfig-original-example: 300
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ImageObject-properties-width
      required:
      - height
      - url
      - width
      type: object
      x-spotify-docs-type: ImageObject
    ExplicitContentSettingsObject:
      example:
        filter_locked: true
        filter_enabled: true
      properties:
        filter_enabled:
          description: |
            When `true`, indicates that explicit content should not be played.
          type: boolean
        filter_locked:
          description: |
            When `true`, indicates that the explicit content setting is locked and can't be changed by the user.
          type: boolean
      type: object
      x-spotify-docs-type: ExplicitContentSettingsObject
    PlaylistsUpdateDetailsRequest:
      additionalProperties: true
      example:
        description: Updated playlist description
        name: Updated Playlist Name
        public: false
      properties:
        description:
          description: |
            Value for playlist description as displayed in Spotify Clients and in the Web API.
          example: Updated playlist description
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsUpdateDetailsRequest-properties-description
        name:
          description: |
            The new name for the playlist, for example `"My New Playlist Title"`
          example: Updated Playlist Name
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsUpdateDetailsRequest-properties-name
        public:
          description: |
            If `true` the playlist will be public, if `false` it will be private.
          example: false
          type: boolean
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsUpdateDetailsRequest-properties-public
        collaborative:
          description: |
            If `true`, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. <br/>
            _**Note**: You can only set `collaborative` to `true` on non-public playlists._
          type: boolean
      type: object
      x-konfig-original-example:
        description: Updated playlist description
        name: Updated Playlist Name
        public: false
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsUpdateDetailsRequest
    PlaylistsRemoveItemsRequest:
      example:
        snapshot_id: snapshot_id
        tracks:
        - uri: uri
        - uri: uri
      properties:
        tracks:
          description: |
            An array of objects containing [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) of the tracks or episodes to remove.
            For example: `{ "tracks": [{ "uri": "spotify:track:4iV5W9uYEdYUVa79Axb7Rh" },{ "uri": "spotify:track:1301WleyT98MSxVHPZCA6M" }] }`. A maximum of 100 objects can be sent at once.
          items:
            $ref: '#/components/schemas/PlaylistsRemoveItemsRequest_tracks_inner'
          type: array
        snapshot_id:
          description: |
            The playlist's snapshot ID against which you want to make the changes.
            The API will validate that the specified items exist and in the specified positions and make the changes,
            even if more recent changes have been made to the playlist.
          type: string
      required:
      - tracks
      type: object
    PlaylistsAddItemsRequest:
      additionalProperties: true
      properties:
        uris:
          description: |
            A JSON array of the [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to add. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M", "spotify:episode:512ojhOuo1ktJprKbVcKyQ"]}`<br/>A maximum of 100 items can be added in one request. _**Note**: if the `uris` parameter is present in the query string, any URIs listed here in the body will be ignored._
          items:
            type: string
          type: array
        position:
          description: |
            The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0` ; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M"], "position": 3}`
          type: integer
      type: object
    PlaylistsUpdatePlaylistItemsRequest:
      additionalProperties: true
      example:
        range_start: 1
        insert_before: 3
        range_length: 2
      properties:
        uris:
          items:
            type: string
          type: array
        range_start:
          description: |
            The position of the first item to be reordered.
          example: 1
          type: integer
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsUpdatePlaylistItemsRequest-properties-range_start
        insert_before:
          description: |
            The position where the items should be inserted.<br/>To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.<br/>Examples:<br/>To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.<br/>To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0.
          example: 3
          type: integer
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsUpdatePlaylistItemsRequest-properties-insert_before
        range_length:
          description: |
            The amount of items to be reordered. Defaults to 1 if not set.<br/>The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.<br/>Example:<br/>To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2.
          example: 2
          type: integer
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsUpdatePlaylistItemsRequest-properties-range_length
        snapshot_id:
          description: |
            The playlist's snapshot ID against which you want to make the changes.
          type: string
      type: object
      x-konfig-original-example:
        range_start: 1
        insert_before: 3
        range_length: 2
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsUpdatePlaylistItemsRequest
    AlbumsRemoveSavedRequest:
      additionalProperties: true
      properties:
        ids:
          description: |
            A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
          items:
            type: string
          type: array
      type: object
    AlbumsSaveCurrentUserLibraryRequest:
      additionalProperties: true
      properties:
        ids:
          description: |
            A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
          items:
            type: string
          type: array
      type: object
    TracksRemoveFromLibraryRequest:
      additionalProperties: true
      properties:
        ids:
          description: |
            A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
          items:
            type: string
          type: array
      type: object
    TracksSaveForCurrentUserRequest:
      additionalProperties: true
      properties:
        ids:
          description: |
            A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
          items:
            type: string
          type: array
      required:
      - uris
      type: object
    EpisodesRemoveFromLibraryRequest:
      additionalProperties: true
      properties:
        ids:
          description: |
            A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
          items:
            type: string
          type: array
      type: object
    EpisodesSaveCurrentUserLibraryRequest:
      additionalProperties: true
      properties:
        ids:
          description: |
            A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
          items:
            type: string
          type: array
      required:
      - uris
      type: object
    PlaylistsCreatePlaylistRequest:
      additionalProperties: true
      example:
        description: New playlist description
        name: New Playlist
        public: false
      properties:
        description:
          description: |
            value for playlist description as displayed in Spotify Clients and in the Web API.
          example: New playlist description
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsCreatePlaylistRequest-properties-description
        name:
          description: |
            The name for the new playlist, for example `"Your Coolest Playlist"`. This name does not need to be unique; a user may have several playlists with the same name.
          example: New Playlist
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsCreatePlaylistRequest-properties-name
        public:
          description: |
            Defaults to `true`. If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](/documentation/web-api/concepts/scopes/#list-of-scopes)
          example: false
          type: boolean
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsCreatePlaylistRequest-properties-public
        collaborative:
          description: |
            Defaults to `false`. If `true` the playlist will be collaborative. _**Note**: to create a collaborative playlist you must also set `public` to `false`. To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](/documentation/web-api/concepts/scopes/#list-of-scopes)._
          type: boolean
      required:
      - name
      type: object
      x-konfig-original-example:
        description: New playlist description
        name: New Playlist
        public: false
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsCreatePlaylistRequest
    UsersFollowPlaylistRequest:
      additionalProperties: true
      example:
        public: false
      properties:
        public:
          description: |
            Defaults to `true`. If `true` the playlist will be included in user's public playlists, if `false` it will remain private.
          example: false
          type: boolean
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-UsersFollowPlaylistRequest-properties-public
      type: object
      x-konfig-original-example:
        public: false
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-UsersFollowPlaylistRequest
    PlaylistsReplaceCoverImageRequest:
      description: "Base64 encoded JPEG image data, maximum payload size is 256 KB."
      example: !!binary |-
        LzlqLzJ3Q0VBQm9aR1NjY0p6NGxKVDVDTHk4dlFrYzlPenM5UjBkSFIwZEhSMGRIUjBkSFIwZEhS
        MGRIUjBkSFIwZEhSMGRIUjBkSFIwZEhSMGRIUjBkSFIwZEhSMGNCSENjbk15WXpQU1ltUFVjOU1q
        MUhSMGRFUkVkSFIwZEhSMGRIUjBkSFIwZEhSMGRIUjBkSFIwZEhSMGRIUjBkSFIwZEhSMGRIUjBk
        SFIwZEhSMGRIUi8vZEFBUUFBZi91QUE1QlpHOWlaUUJrd0FBQUFBSC93QUFSQ0FBQkFBRURBQ0lB
        QVJFQkFoRUIvOFFBU3dBQkFRQUFBQUFBQUFBQUFBQUFBQUFBQUFZQkFRQUFBQUFBQUFBQUFBQUFB
        QUFBQUFBUUFRQUFBQUFBQUFBQUFBQUFBQUFBQUFBUkFRQUFBQUFBQUFBQUFBQUFBQUFBQUFELzJn
        QU1Bd0FBQVJFQ0VRQS9BSmdBSC8vWg==
      format: byte
      type: string
      x-konfig-original-example: /9j/2wCEABoZGSccJz4lJT5CLy8vQkc9Ozs9R0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0cBHCcnMyYzPSYmPUc9Mj1HR0dEREdHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR//dAAQAAf/uAA5BZG9iZQBkwAAAAAH/wAARCAABAAEDACIAAREBAhEB/8QASwABAQAAAAAAAAAAAAAAAAAAAAYBAQAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAARAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwAAARECEQA/AJgAH//Z
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsReplaceCoverImageRequest
    UsersUnfollowArtistsUsersRequest:
      additionalProperties: true
      properties:
        ids:
          description: |
            A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `{ids:["74ASZWbe4lXaubB36ztrGX", "08td7MxkoHQkXnWAYD8d6Q"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
          items:
            type: string
          type: array
      type: object
    UsersFollowArtistsOrUsersRequest:
      additionalProperties: true
      properties:
        ids:
          description: |
            A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids).
            For example: `{ids:["74ASZWbe4lXaubB36ztrGX", "08td7MxkoHQkXnWAYD8d6Q"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
          items:
            type: string
          type: array
      required:
      - ids
      type: object
    PlayerTransferPlaybackToNewDeviceRequest:
      additionalProperties: true
      example:
        device_ids:
        - 74ASZWbe4lXaubB36ztrGX
      properties:
        device_ids:
          description: |
            A JSON array containing the ID of the device on which playback should be started/transferred.<br/>For example:`{device_ids:["74ASZWbe4lXaubB36ztrGX"]}`<br/>_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`_
          items:
            type: string
          type: array
        play:
          additionalProperties: true
          description: |
            **true**: ensure playback happens on new device.<br/>**false** or not provided: keep the current playback state.
          type: object
      required:
      - device_ids
      type: object
      x-konfig-original-example:
        device_ids:
        - 74ASZWbe4lXaubB36ztrGX
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlayerTransferPlaybackToNewDeviceRequest
    PlayerStartPlaybackRequest:
      additionalProperties: true
      example:
        context_uri: spotify:album:5ht7ItJgpBH7W6vJ5BqpPr
        offset:
          position: 5
        position_ms: 0
      properties:
        context_uri:
          additionalProperties: true
          description: |
            Optional. Spotify URI of the context to play.
            Valid contexts are albums, artists & playlists.
            `{context_uri:"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT"}`
          example: spotify:album:5ht7ItJgpBH7W6vJ5BqpPr
          type: object
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlayerStartPlaybackRequest-properties-context_uri
        uris:
          description: |
            Optional. A JSON array of the Spotify track URIs to play.
            For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh", "spotify:track:1301WleyT98MSxVHPZCA6M"]}`
          items:
            type: string
          type: array
        offset:
          additionalProperties: true
          description: |
            Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object
            "position" is zero based and can’t be negative. Example: `"offset": {"position": 5}`
            "uri" is a string representing the uri of the item to start at. Example: `"offset": {"uri": "spotify:track:1301WleyT98MSxVHPZCA6M"}`
          type: object
        position_ms:
          additionalProperties: true
          description: integer
          example: 0
          type: object
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlayerStartPlaybackRequest-properties-position_ms
      type: object
      x-konfig-original-example:
        context_uri: spotify:album:5ht7ItJgpBH7W6vJ5BqpPr
        offset:
          position: 5
        position_ms: 0
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlayerStartPlaybackRequest
    AlbumsGetInformationResponse:
      properties:
        error:
          $ref: '#/components/schemas/ErrorObject'
      required:
      - error
      type: object
      x-konfig-is-used-in-non-successful-response: true
      x-do-not-generate: true
    AlbumsGetInformation403Response:
      properties:
        error:
          $ref: '#/components/schemas/ErrorObject'
      required:
      - error
      type: object
      x-konfig-is-used-in-non-successful-response: true
      x-do-not-generate: true
    AlbumsGetInformation429Response:
      properties:
        error:
          $ref: '#/components/schemas/ErrorObject'
      required:
      - error
      type: object
      x-konfig-is-used-in-non-successful-response: true
      x-do-not-generate: true
    AlbumsListSeveralResponse:
      example:
        albums:
        - null
        - null
      properties:
        albums:
          items:
            $ref: '#/components/schemas/AlbumObject'
          type: array
      required:
      - albums
      type: object
      x-konfig-is-used-in-successful-response: true
    ArtistsGetCatalogInfoResponse:
      example:
        artists:
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          followers:
            total: 0
            href: href
          genres:
          - Prog rock
          - Grunge
          popularity: 6
          name: name
          href: href
          id: id
          type: artist
          external_urls:
            spotify: spotify
          uri: uri
        - images:
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          - width: 300
            url: |
              https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
            height: 300
          followers:
            total: 0
            href: href
          genres:
          - Prog rock
          - Grunge
          popularity: 6
          name: name
          href: href
          id: id
          type: artist
          external_urls:
            spotify: spotify
          uri: uri
      properties:
        artists:
          items:
            $ref: '#/components/schemas/ArtistObject'
          type: array
      required:
      - artists
      type: object
      x-konfig-is-used-in-successful-response: true
    ArtistsGetTopTracksResponse:
      example:
        tracks:
        - disc_number: 0
          album: null
          available_markets:
          - available_markets
          - available_markets
          restrictions:
            reason: reason
          type: track
          external_ids:
            ean: ean
            upc: upc
            isrc: isrc
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers:
              total: 0
              href: href
            genres:
            - Prog rock
            - Grunge
            popularity: 6
            name: name
            href: href
            id: id
            type: artist
            external_urls:
              spotify: spotify
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers:
              total: 0
              href: href
            genres:
            - Prog rock
            - Grunge
            popularity: 6
            name: name
            href: href
            id: id
            type: artist
            external_urls:
              spotify: spotify
            uri: uri
          linked_from: "{}"
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls:
            spotify: spotify
        - disc_number: 0
          album: null
          available_markets:
          - available_markets
          - available_markets
          restrictions:
            reason: reason
          type: track
          external_ids:
            ean: ean
            upc: upc
            isrc: isrc
          uri: uri
          duration_ms: 6
          explicit: true
          is_playable: true
          artists:
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers:
              total: 0
              href: href
            genres:
            - Prog rock
            - Grunge
            popularity: 6
            name: name
            href: href
            id: id
            type: artist
            external_urls:
              spotify: spotify
            uri: uri
          - images:
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            - width: 300
              url: |
                https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
              height: 300
            followers:
              total: 0
              href: href
            genres:
            - Prog rock
            - Grunge
            popularity: 6
            name: name
            href: href
            id: id
            type: artist
            external_urls:
              spotify: spotify
            uri: uri
          linked_from: "{}"
          preview_url: preview_url
          popularity: 1
          name: name
          track_number: 5
          href: href
          id: id
          is_local: true
          external_urls:
            spotify: spotify
      properties:
        tracks:
          items:
            $ref: '#/components/schemas/TrackObject'
          type: array
      required:
      - tracks
      type: object
      x-konfig-is-used-in-successful-response: true
    ShowsGetMultipleShowsInfoResponse:
      example:
        shows:
        - null
        - null
      properties:
        shows:
          items:
            $ref: '#/components/schemas/SimplifiedShowObject'
          type: array
      required:
      - shows
      type: object
      x-konfig-is-used-in-successful-response: true
    EpisodesGetSeveralResponse:
      example:
        episodes:
        - null
        - null
      properties:
        episodes:
          items:
            $ref: '#/components/schemas/EpisodeObject'
          type: array
      required:
      - episodes
      type: object
      x-konfig-is-used-in-successful-response: true
    AudiobooksGetCatalogInfoResponse:
      properties:
        error:
          $ref: '#/components/schemas/ErrorObject'
      required:
      - error
      type: object
      x-konfig-is-used-in-non-successful-response: true
      x-do-not-generate: true
    AudiobooksGetCatalogInfo404Response:
      properties:
        error:
          $ref: '#/components/schemas/ErrorObject'
      required:
      - error
      type: object
      x-konfig-is-used-in-non-successful-response: true
      x-do-not-generate: true
    AudiobooksGetSeveralResponse:
      example:
        audiobooks:
        - null
        - null
      properties:
        audiobooks:
          items:
            $ref: '#/components/schemas/AudiobookObject'
          type: array
      required:
      - audiobooks
      type: object
      x-konfig-is-used-in-successful-response: true
    AudiobooksCheckUserSavedResponse:
      example:
      - false
      - true
      items:
        type: boolean
      type: array
      x-konfig-original-example:
      - false
      - true
      x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudiobooksCheckUserSavedResponse
      x-konfig-is-used-in-successful-response: true
    ChaptersGetMultipleByIdsResponse:
      example:
        chapters:
        - null
        - null
      properties:
        chapters:
          items:
            $ref: '#/components/schemas/ChapterObject'
          type: array
      required:
      - chapters
      type: object
      x-konfig-is-used-in-successful-response: true
    SearchSpotifyCatalogInfoResponse:
      example:
        albums: null
        shows: null
        artists: null
        audiobooks: null
        playlists: null
        tracks: null
        episodes: null
      properties:
        tracks:
          $ref: '#/components/schemas/PagingTrackObject'
        artists:
          $ref: '#/components/schemas/PagingArtistObject'
        albums:
          $ref: '#/components/schemas/PagingSimplifiedAlbumObject'
        playlists:
          $ref: '#/components/schemas/PagingPlaylistObject'
        shows:
          $ref: '#/components/schemas/PagingSimplifiedShowObject'
        episodes:
          $ref: '#/components/schemas/PagingSimplifiedEpisodeObject'
        audiobooks:
          $ref: '#/components/schemas/PagingSimplifiedAudiobookObject'
      type: object
      x-konfig-is-used-in-successful-response: true
    PlaylistsRemoveItemsResponse:
      example:
        snapshot_id: abc
      properties:
        snapshot_id:
          example: abc
          type: string
          x-konfig-original-example: abc
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsRemoveItemsResponse-properties-snapshot_id
      type: object
      x-konfig-is-used-in-successful-response: true
    UsersGetTopItemsResponse:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/UsersGetTopItemsResponse_allOf'
      type: object
      x-konfig-is-used-in-successful-response: true
    CategoriesListSeveralResponse:
      example:
        categories: null
      properties:
        categories:
          $ref: '#/components/schemas/CategoriesListSeveralResponse_categories'
      required:
      - categories
      type: object
      x-konfig-is-used-in-successful-response: true
    PlaylistsGetCoverImageResponse:
      items:
        $ref: '#/components/schemas/ImageObject'
      type: array
      x-konfig-is-used-in-successful-response: true
    AlbumsGetNewReleasesResponse:
      example:
        albums: null
      properties:
        albums:
          $ref: '#/components/schemas/PagingSimplifiedAlbumObject'
      required:
      - albums
      type: object
      x-konfig-is-used-in-successful-response: true
    UsersGetFollowedArtistsResponse:
      example:
        artists: null
      properties:
        artists:
          $ref: '#/components/schemas/CursorPagingSimplifiedArtistObject'
      required:
      - artists
      type: object
      x-konfig-is-used-in-successful-response: true
    TracksGetMultipleAudioFeaturesResponse:
      example:
        audio_features:
        - track_href: |
            https://api.spotify.com/v1/tracks/2takcwOaAZWiXQijPHIx7B
          loudness: -5.883
          liveness: 0.0866
          tempo: 118.211
          valence: 0.428
          instrumentalness: 0.00686
          type: audio_features
          danceability: 0.585
          uri: spotify:track:2takcwOaAZWiXQijPHIx7B
          speechiness: 0.0556
          duration_ms: 237040
          mode: 0
          acousticness: 0.00242
          id: 2takcwOaAZWiXQijPHIx7B
          analysis_url: |
            https://api.spotify.com/v1/audio-analysis/2takcwOaAZWiXQijPHIx7B
          key: 9
          energy: 0.842
          time_signature: 4
        - track_href: |
            https://api.spotify.com/v1/tracks/2takcwOaAZWiXQijPHIx7B
          loudness: -5.883
          liveness: 0.0866
          tempo: 118.211
          valence: 0.428
          instrumentalness: 0.00686
          type: audio_features
          danceability: 0.585
          uri: spotify:track:2takcwOaAZWiXQijPHIx7B
          speechiness: 0.0556
          duration_ms: 237040
          mode: 0
          acousticness: 0.00242
          id: 2takcwOaAZWiXQijPHIx7B
          analysis_url: |
            https://api.spotify.com/v1/audio-analysis/2takcwOaAZWiXQijPHIx7B
          key: 9
          energy: 0.842
          time_signature: 4
      properties:
        audio_features:
          items:
            $ref: '#/components/schemas/AudioFeaturesObject'
          type: array
      required:
      - audio_features
      type: object
      x-konfig-is-used-in-successful-response: true
    GenresGetAvailableSeedsResponse:
      example:
        genres:
        - alternative
        - samba
      properties:
        genres:
          example:
          - alternative
          - samba
          items:
            type: string
          type: array
          x-konfig-original-example:
          - alternative
          - samba
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-GenresGetAvailableSeedsResponse-properties-genres
      required:
      - genres
      type: object
      x-konfig-is-used-in-successful-response: true
    PlayerGetAvailableDevicesResponse:
      example:
        devices:
        - is_active: true
          is_private_session: true
          is_restricted: true
          name: Kitchen speaker
          id: id
          type: computer
          supports_volume: true
          volume_percent: 59
        - is_active: true
          is_private_session: true
          is_restricted: true
          name: Kitchen speaker
          id: id
          type: computer
          supports_volume: true
          volume_percent: 59
      properties:
        devices:
          items:
            $ref: '#/components/schemas/DeviceObject'
          type: array
      required:
      - devices
      type: object
      x-konfig-is-used-in-successful-response: true
    MarketsListAvailableResponse:
      example:
        markets:
        - CA
        - BR
        - IT
      properties:
        markets:
          example:
          - CA
          - BR
          - IT
          items:
            type: string
          type: array
          x-konfig-original-example:
          - CA
          - BR
          - IT
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-MarketsListAvailableResponse-properties-markets
      type: object
      x-konfig-is-used-in-successful-response: true
    konfig-generated-schema-paths--artists-get-parameters-0-schema:
      example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--episodes-id-get-parameters-0-schema:
      example: 512ojhOuo1ktJprKbVcKyQ
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--episodes-get-parameters-0-schema:
      example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--tracks-id-get-parameters-0-schema:
      example: 11dFghVXANMlKmJXsNCbNl
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--tracks-get-parameters-1-schema:
      example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--search-get-parameters-0-schema:
      example: remaster%20track:Doxy%20artist:Miles%20Davis
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--search-get-parameters-3-schema:
      example: 10
      type: number
      x-do-not-generate: true
    konfig-generated-schema-paths--search-get-parameters-4-schema:
      example: 5
      type: number
      x-do-not-generate: true
    konfig-generated-schema-paths--playlists-playlist_id-get-parameters-2-schema:
      example: "items(added_by.id,track(name,href,album(name,href)))"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--playlists-playlist_id-tracks-get-parameters-2-schema:
      example: "items(added_by.id,track(name,href,album(name,href)))"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--playlists-playlist_id-tracks-post-parameters-1-schema:
      example: 0
      type: number
      x-do-not-generate: true
    konfig-generated-schema-paths--playlists-playlist_id-tracks-post-parameters-2-schema:
      example: "spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-playlists-get-parameters-1-schema:
      example: 5
      type: number
      x-do-not-generate: true
    konfig-generated-schema-paths--me-episodes-put-parameters-0-schema:
      example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-episodes-contains-get-parameters-0-schema:
      example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-top-type-get-parameters-1-schema:
      example: medium_term
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--users-user_id-playlists-get-parameters-2-schema:
      example: 5
      type: number
      x-do-not-generate: true
    konfig-generated-schema-paths--browse-featured-playlists-get-parameters-0-schema:
      example: sv_SE
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--browse-categories-get-parameters-0-schema:
      example: sv_SE
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--browse-categories-category_id-get-parameters-0-schema:
      example: dinner
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--browse-categories-category_id-get-parameters-1-schema:
      example: sv_SE
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--browse-categories-category_id-playlists-get-parameters-0-schema:
      example: dinner
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-following-get-parameters-0-schema:
      example: artist
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-following-get-parameters-1-schema:
      example: 0I2XqVXqHScXjHhk6AYYRe
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-following-get-parameters-2-schema:
      example: 10
      type: number
      x-do-not-generate: true
    konfig-generated-schema-paths--me-following-put-parameters-0-schema:
      example: artist
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-following-put-parameters-1-schema:
      example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-following-delete-parameters-0-schema:
      example: artist
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-following-delete-parameters-1-schema:
      example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-following-contains-get-parameters-0-schema:
      example: artist
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-following-contains-get-parameters-1-schema:
      example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--playlists-playlist_id-followers-contains-get-parameters-1-schema:
      example: "jmperezperez,thelinmichael,wizzler"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--audio-features-get-parameters-0-schema:
      example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--audio-features-id-get-parameters-0-schema:
      example: 11dFghVXANMlKmJXsNCbNl
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--audio-analysis-id-get-parameters-0-schema:
      example: 11dFghVXANMlKmJXsNCbNl
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--recommendations-get-parameters-0-schema:
      example: 10
      type: number
      x-do-not-generate: true
    konfig-generated-schema-paths--recommendations-get-parameters-2-schema:
      example: 4NHQUGzhtTLFvgF5SZesLK
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--recommendations-get-parameters-3-schema:
      example: "classical,country"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--recommendations-get-parameters-4-schema:
      example: 0c6xIDDpzE81m2q797ordA
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-play-put-parameters-0-schema:
      example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-pause-put-parameters-0-schema:
      example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-next-post-parameters-0-schema:
      example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-previous-post-parameters-0-schema:
      example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-seek-put-parameters-0-schema:
      example: 25000
      type: number
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-seek-put-parameters-1-schema:
      example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-repeat-put-parameters-0-schema:
      example: context
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-repeat-put-parameters-1-schema:
      example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-volume-put-parameters-0-schema:
      example: 50
      type: number
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-volume-put-parameters-1-schema:
      example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-shuffle-put-parameters-0-schema:
      example: true
      type: boolean
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-shuffle-put-parameters-1-schema:
      example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-recently-played-get-parameters-0-schema:
      example: 10
      type: number
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-recently-played-get-parameters-1-schema:
      example: 1484811043508
      type: number
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-queue-post-parameters-0-schema:
      example: spotify:track:4iV5W9uYEdYUVa79Axb7Rh
      type: string
      x-do-not-generate: true
    konfig-generated-schema-paths--me-player-queue-post-parameters-1-schema:
      example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-PathAlbumId-schema:
      example: 4aawyAB9vmqN3uQ7FjRGTy
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-PathPlaylistId-schema:
      example: 3cEYpjA9oz9GiPac4AsH4n
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-QueryMarket-schema:
      example: ES
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-QueryLimit-schema:
      example: 10
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-QueryOffset-schema:
      example: 5
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-QueryAlbumIds-schema:
      example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-PathArtistId-schema:
      example: 0TnOYISbd1XYRBk9myaseg
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-PathShowId-schema:
      example: 38bS44xjbVVZ3No3ByF1dJ
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-PathAudiobookId-schema:
      example: 7iHfbu1YPACw6oZPAFJtqe
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-QueryAudiobookIds-schema:
      example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-PathChapterId-schema:
      example: 0D5wENdkdwbqlrHoaJ9g29
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-QueryChapterIds-schema:
      example: "0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU,0D5wENdkdwbqlrHoaJ9g29"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-QueryTrackIds-schema:
      example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-QueryIncludeGroups-schema:
      example: "single,appears_on"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-QueryShowIds-schema:
      example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-parameters-PathUserId-schema:
      example: smedjan
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ArtistObject-properties-genres:
      example:
      - Prog rock
      - Grunge
      items:
        example: Prog rock
        type: string
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-meta-properties-analyzer_version:
      example: 4.0.0
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-meta-properties-platform:
      example: Linux
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-meta-properties-detailed_status:
      example: OK
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-meta-properties-status_code:
      example: 0
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-meta-properties-timestamp:
      example: 1495193577
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-meta-properties-analysis_time:
      example: 6.93906
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-meta-properties-input_process:
      example: libvorbisfile L+R 44100->22050
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-num_samples:
      example: 4585515
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-duration:
      example: 207.95985
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-offset_seconds:
      example: 0
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-window_seconds:
      example: 0
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-analysis_sample_rate:
      example: 22050
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-analysis_channels:
      example: 1
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-end_of_fade_in:
      example: 0
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-start_of_fade_out:
      example: 201.13705
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-tempo_confidence:
      example: 0.73
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-time_signature_confidence:
      example: 0.994
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-key_confidence:
      example: 0.408
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-mode_confidence:
      example: 0.485
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-code_version:
      example: 3.15
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-echoprint_version:
      example: 4.15
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-synch_version:
      example: 1
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-rhythm_version:
      example: 1
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-TimeIntervalObject-properties-start:
      example: 0.49567
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-TimeIntervalObject-properties-duration:
      example: 2.18749
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-TimeIntervalObject-properties-confidence:
      example: 0.925
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SectionObject-properties-start:
      example: 0
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SectionObject-properties-duration:
      example: 6.97092
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SectionObject-properties-confidence:
      example: 1
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SectionObject-properties-loudness:
      example: -14.938
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SectionObject-properties-tempo:
      example: 113.178
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SectionObject-properties-tempo_confidence:
      example: 0.647
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SectionObject-properties-key:
      example: 9
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SectionObject-properties-key_confidence:
      example: 0.297
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SectionObject-properties-mode_confidence:
      example: 0.471
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SectionObject-properties-time_signature_confidence:
      example: 1
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SegmentObject-properties-start:
      example: 0.70154
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SegmentObject-properties-duration:
      example: 0.19891
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SegmentObject-properties-confidence:
      example: 0.435
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SegmentObject-properties-loudness_start:
      example: -23.053
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SegmentObject-properties-loudness_max:
      example: -14.25
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SegmentObject-properties-loudness_max_time:
      example: 0.07305
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SegmentObject-properties-loudness_end:
      example: 0
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SegmentObject-properties-pitches:
      example:
      - 0.212
      - 0.141
      - 0.294
      items:
        example: 0.212
        type: number
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-SegmentObject-properties-timbre:
      example:
      - 42.115
      - 64.373
      - -0.233
      items:
        example: 42.115
        type: number
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-TimeSignature:
      example: 4
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-Tempo:
      example: 118.211
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-Loudness:
      example: -5.883
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-Key:
      example: 9
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-Mode:
      example: 0
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-acousticness:
      example: 0.00242
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-analysis_url:
      example: |
        https://api.spotify.com/v1/audio-analysis/2takcwOaAZWiXQijPHIx7B
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-danceability:
      example: 0.585
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-duration_ms:
      example: 237040
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-energy:
      example: 0.842
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-id:
      example: 2takcwOaAZWiXQijPHIx7B
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-instrumentalness:
      example: 0.00686
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-liveness:
      example: 0.0866
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-speechiness:
      example: 0.0556
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-track_href:
      example: |
        https://api.spotify.com/v1/tracks/2takcwOaAZWiXQijPHIx7B
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-uri:
      example: spotify:track:2takcwOaAZWiXQijPHIx7B
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudioFeaturesObject-properties-valence:
      example: 0.428
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-DeviceObject-properties-name:
      example: Kitchen speaker
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-DeviceObject-properties-type:
      example: computer
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-DeviceObject-properties-volume_percent:
      example: 59
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PagingObject-properties-href:
      example: |
        https://api.spotify.com/v1/me/shows?offset=0&limit=20
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PagingObject-properties-limit:
      example: 20
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PagingObject-properties-next:
      example: https://api.spotify.com/v1/me/shows?offset=1&limit=1
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PagingObject-properties-offset:
      example: 0
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PagingObject-properties-previous:
      example: https://api.spotify.com/v1/me/shows?offset=1&limit=1
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PagingObject-properties-total:
      example: 4
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PagingFeaturedPlaylistObject-properties-message:
      example: Popular Playlists
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-CategoryObject-properties-id:
      example: equal
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-CategoryObject-properties-name:
      example: EQUAL
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-EpisodeBase-properties-description:
      example: |
        A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-EpisodeBase-properties-audio_preview_url:
      example: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-EpisodeBase-properties-html_description:
      example: |
        <p>A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.</p>
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-EpisodeBase-properties-duration_ms:
      example: 1686230
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-EpisodeBase-properties-href:
      example: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-EpisodeBase-properties-id:
      example: 5Xt5DXGzch68nYYamXrNxZ
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-EpisodeBase-properties-language:
      example: en
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-EpisodeBase-properties-languages:
      example:
      - fr
      - en
      items:
        example: fr
        type: string
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-EpisodeBase-properties-name:
      example: |
        Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-EpisodeBase-properties-release_date:
      example: 1981-12-15
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-EpisodeBase-properties-release_date_precision:
      example: day
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-EpisodeBase-properties-uri:
      example: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudiobookBase-properties-edition:
      example: Unabridged
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AlbumBase-properties-album_type:
      example: compilation
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AlbumBase-properties-total_tracks:
      example: 9
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AlbumBase-properties-available_markets:
      example:
      - CA
      - BR
      - IT
      items:
        example: CA
        type: string
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AlbumBase-properties-id:
      example: 2up3OPMp9Tb4dAKM2erWXQ
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AlbumBase-properties-release_date:
      example: 1981-12
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AlbumBase-properties-release_date_precision:
      example: year
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AlbumBase-properties-uri:
      example: spotify:album:2up3OPMp9Tb4dAKM2erWXQ
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ArtistDiscographyAlbumObject-allOf-1-properties-album_group:
      example: compilation
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ChapterBase-properties-description:
      example: |
        We kept on ascending, with occasional periods of quick descent, but in the main always ascending. Suddenly, I became conscious of the fact that the driver was in the act of pulling up the horses in the courtyard of a vast ruined castle, from whose tall black windows came no ray of light, and whose broken battlements showed a jagged line against the moonlit sky.
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ChapterBase-properties-audio_preview_url:
      example: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ChapterBase-properties-chapter_number:
      example: 1
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ChapterBase-properties-html_description:
      example: |
        <p>We kept on ascending, with occasional periods of quick descent, but in the main always ascending. Suddenly, I became conscious of the fact that the driver was in the act of pulling up the horses in the courtyard of a vast ruined castle, from whose tall black windows came no ray of light, and whose broken battlements showed a jagged line against the moonlit sky.</p>
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ChapterBase-properties-duration_ms:
      example: 1686230
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ChapterBase-properties-href:
      example: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ChapterBase-properties-id:
      example: 5Xt5DXGzch68nYYamXrNxZ
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ChapterBase-properties-languages:
      example:
      - fr
      - en
      items:
        example: fr
        type: string
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ChapterBase-properties-name:
      example: |
        Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ChapterBase-properties-release_date:
      example: 1981-12-15
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ChapterBase-properties-release_date_precision:
      example: day
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ChapterBase-properties-uri:
      example: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AlbumObject-allOf-1-properties-genres:
      example:
      - Egg punk
      - Noise rock
      items:
        example: Egg punk
        type: string
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ImageObject-properties-url:
      example: |
        https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ImageObject-properties-height:
      example: 300
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-ImageObject-properties-width:
      example: 300
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlaylistsUpdateDetailsRequest:
      example:
        description: Updated playlist description
        name: Updated Playlist Name
        public: false
      properties:
        description:
          example: Updated playlist description
          type: string
        name:
          example: Updated Playlist Name
          type: string
        public:
          example: false
          type: boolean
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlaylistsUpdateDetailsRequest-properties-description:
      example: Updated playlist description
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlaylistsUpdateDetailsRequest-properties-name:
      example: Updated Playlist Name
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlaylistsUpdateDetailsRequest-properties-public:
      example: false
      type: boolean
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlaylistsUpdatePlaylistItemsRequest:
      example:
        range_start: 1
        insert_before: 3
        range_length: 2
      properties:
        range_start:
          example: 1
          type: number
        insert_before:
          example: 3
          type: number
        range_length:
          example: 2
          type: number
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlaylistsUpdatePlaylistItemsRequest-properties-range_start:
      example: 1
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlaylistsUpdatePlaylistItemsRequest-properties-insert_before:
      example: 3
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlaylistsUpdatePlaylistItemsRequest-properties-range_length:
      example: 2
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlaylistsCreatePlaylistRequest:
      example:
        description: New playlist description
        name: New Playlist
        public: false
      properties:
        description:
          example: New playlist description
          type: string
        name:
          example: New Playlist
          type: string
        public:
          example: false
          type: boolean
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlaylistsCreatePlaylistRequest-properties-description:
      example: New playlist description
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlaylistsCreatePlaylistRequest-properties-name:
      example: New Playlist
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlaylistsCreatePlaylistRequest-properties-public:
      example: false
      type: boolean
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-UsersFollowPlaylistRequest:
      example:
        public: false
      properties:
        public:
          example: false
          type: boolean
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-UsersFollowPlaylistRequest-properties-public:
      example: false
      type: boolean
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlaylistsReplaceCoverImageRequest:
      example: /9j/2wCEABoZGSccJz4lJT5CLy8vQkc9Ozs9R0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0cBHCcnMyYzPSYmPUc9Mj1HR0dEREdHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR//dAAQAAf/uAA5BZG9iZQBkwAAAAAH/wAARCAABAAEDACIAAREBAhEB/8QASwABAQAAAAAAAAAAAAAAAAAAAAYBAQAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAARAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwAAARECEQA/AJgAH//Z
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlayerTransferPlaybackToNewDeviceRequest:
      example:
        device_ids:
        - 74ASZWbe4lXaubB36ztrGX
      properties:
        device_ids:
          items:
            example: 74ASZWbe4lXaubB36ztrGX
            type: string
          type: array
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlayerStartPlaybackRequest:
      example:
        context_uri: spotify:album:5ht7ItJgpBH7W6vJ5BqpPr
        offset:
          position: 5
        position_ms: 0
      properties:
        context_uri:
          example: spotify:album:5ht7ItJgpBH7W6vJ5BqpPr
          type: string
        offset:
          properties:
            position:
              example: 5
              type: number
          type: object
        position_ms:
          example: 0
          type: number
      type: object
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlayerStartPlaybackRequest-properties-context_uri:
      example: spotify:album:5ht7ItJgpBH7W6vJ5BqpPr
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlayerStartPlaybackRequest-properties-position_ms:
      example: 0
      type: number
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-AudiobooksCheckUserSavedResponse:
      example:
      - false
      - true
      items:
        example: false
        type: boolean
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-PlaylistsRemoveItemsResponse-properties-snapshot_id:
      example: abc
      type: string
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-GenresGetAvailableSeedsResponse-properties-genres:
      example:
      - alternative
      - samba
      items:
        example: alternative
        type: string
      type: array
      x-do-not-generate: true
    konfig-generated-schema-components-schemas-MarketsListAvailableResponse-properties-markets:
      example:
      - CA
      - BR
      - IT
      items:
        example: CA
        type: string
      type: array
      x-do-not-generate: true
    konfig-generated-schema-single-parameter-schema-get--albums-id:
      properties:
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the album.
          example: 4aawyAB9vmqN3uQ7FjRGTy
          title: Spotify Album ID
          type: string
          x-konfig-original-example: 4aawyAB9vmqN3uQ7FjRGTy
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathAlbumId-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - market
    konfig-generated-schema-single-parameter-schema-get--albums:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs.
          example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          title: Spotify Album IDs
          type: string
          x-konfig-original-example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAlbumIds-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - market
    konfig-generated-schema-single-parameter-schema-get--albums-id-tracks:
      properties:
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the album.
          example: 4aawyAB9vmqN3uQ7FjRGTy
          title: Spotify Album ID
          type: string
          x-konfig-original-example: 4aawyAB9vmqN3uQ7FjRGTy
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathAlbumId-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - market
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-get--artists-id:
      properties:
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
          example: 0TnOYISbd1XYRBk9myaseg
          title: Spotify Artist ID
          type: string
          x-konfig-original-example: 0TnOYISbd1XYRBk9myaseg
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathArtistId-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
    konfig-generated-schema-single-parameter-schema-get--artists:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the artists. Maximum: 100 IDs.
          example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          title: Spotify Artist IDs
          type: string
          x-konfig-original-example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          x-konfig-generated-schema: konfig-generated-schema-paths--artists-get-parameters-0-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
    konfig-generated-schema-single-parameter-schema-get--artists-id-albums:
      properties:
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
          example: 0TnOYISbd1XYRBk9myaseg
          title: Spotify Artist ID
          type: string
          x-konfig-original-example: 0TnOYISbd1XYRBk9myaseg
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathArtistId-schema
        include_groups:
          description: |
            A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>
            Valid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.
          example: "single,appears_on"
          title: "Groups to include (single, album, appears_on, compilation)"
          type: string
          x-konfig-original-example: "single,appears_on"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryIncludeGroups-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - include_groups
      - market
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-get--artists-id-top-tracks:
      properties:
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
          example: 0TnOYISbd1XYRBk9myaseg
          title: Spotify Artist ID
          type: string
          x-konfig-original-example: 0TnOYISbd1XYRBk9myaseg
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathArtistId-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - market
    konfig-generated-schema-single-parameter-schema-get--artists-id-related-artists:
      properties:
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
          example: 0TnOYISbd1XYRBk9myaseg
          title: Spotify Artist ID
          type: string
          x-konfig-original-example: 0TnOYISbd1XYRBk9myaseg
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathArtistId-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
    konfig-generated-schema-single-parameter-schema-get--shows-id:
      properties:
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the show.
          example: 38bS44xjbVVZ3No3ByF1dJ
          title: Spotify Show ID
          type: string
          x-konfig-original-example: 38bS44xjbVVZ3No3ByF1dJ
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathShowId-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - market
      - id
    konfig-generated-schema-single-parameter-schema-get--shows:
      properties:
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs.
          example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          title: Ids
          type: string
          x-konfig-original-example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryShowIds-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - market
      - ids
    konfig-generated-schema-single-parameter-schema-get--shows-id-episodes:
      properties:
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the show.
          example: 38bS44xjbVVZ3No3ByF1dJ
          title: Spotify Show ID
          type: string
          x-konfig-original-example: 38bS44xjbVVZ3No3ByF1dJ
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathShowId-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - market
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-get--episodes-id:
      properties:
        id:
          description: "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)\
            \ for the episode."
          example: 512ojhOuo1ktJprKbVcKyQ
          title: Get an Episode
          type: string
          x-konfig-original-example: 512ojhOuo1ktJprKbVcKyQ
          x-konfig-generated-schema: konfig-generated-schema-paths--episodes-id-get-parameters-0-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - market
    konfig-generated-schema-single-parameter-schema-get--episodes:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the episodes. Maximum: 50 IDs.
          example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
          title: Ids
          type: string
          x-konfig-original-example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
          x-konfig-generated-schema: konfig-generated-schema-paths--episodes-get-parameters-0-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - market
    konfig-generated-schema-single-parameter-schema-get--audiobooks-id:
      properties:
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the audiobook.
          example: 7iHfbu1YPACw6oZPAFJtqe
          title: Spotify Audiobook ID
          type: string
          x-konfig-original-example: 7iHfbu1YPACw6oZPAFJtqe
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathAudiobookId-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - market
    konfig-generated-schema-single-parameter-schema-get--audiobooks:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ`. Maximum: 50 IDs.
          example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          title: Spotify Audiobook IDs
          type: string
          x-konfig-original-example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAudiobookIds-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - market
    konfig-generated-schema-single-parameter-schema-get--audiobooks-id-chapters:
      properties:
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the audiobook.
          example: 7iHfbu1YPACw6oZPAFJtqe
          title: Spotify Audiobook ID
          type: string
          x-konfig-original-example: 7iHfbu1YPACw6oZPAFJtqe
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathAudiobookId-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - market
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-delete--me-audiobooks:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ`. Maximum: 50 IDs.
          example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          title: Spotify Audiobook IDs
          type: string
          x-konfig-original-example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAudiobookIds-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
    konfig-generated-schema-single-parameter-schema-get--me-audiobooks:
      properties:
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-put--me-audiobooks:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ`. Maximum: 50 IDs.
          example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          title: Spotify Audiobook IDs
          type: string
          x-konfig-original-example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAudiobookIds-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
    konfig-generated-schema-single-parameter-schema-get--me-audiobooks-contains:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ`. Maximum: 50 IDs.
          example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          title: Spotify Audiobook IDs
          type: string
          x-konfig-original-example: "18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAudiobookIds-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
    konfig-generated-schema-single-parameter-schema-get--chapters-id:
      properties:
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the chapter.
          example: 0D5wENdkdwbqlrHoaJ9g29
          title: Spotify Chapter ID
          type: string
          x-konfig-original-example: 0D5wENdkdwbqlrHoaJ9g29
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathChapterId-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - market
    konfig-generated-schema-single-parameter-schema-get--chapters:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU`. Maximum: 50 IDs.
          example: "0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU,0D5wENdkdwbqlrHoaJ9g29"
          title: Spotify Chapter IDs
          type: string
          x-konfig-original-example: "0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU,0D5wENdkdwbqlrHoaJ9g29"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryChapterIds-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - market
    konfig-generated-schema-single-parameter-schema-get--tracks-id:
      properties:
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the track.
          example: 11dFghVXANMlKmJXsNCbNl
          title: Spotify Track ID
          type: string
          x-konfig-original-example: 11dFghVXANMlKmJXsNCbNl
          x-konfig-generated-schema: konfig-generated-schema-paths--tracks-id-get-parameters-0-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - market
    konfig-generated-schema-single-parameter-schema-get--tracks:
      properties:
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 100 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
          x-konfig-original-example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          x-konfig-generated-schema: konfig-generated-schema-paths--tracks-get-parameters-1-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - market
      - ids
    konfig-generated-schema-single-parameter-schema-get--search:
      properties:
        q:
          description: |
            Your search query.

            You can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.

            The `artist` and `year` filters can be used while searching albums, artists and tracks. You can filter on a single `year` or a range (e.g. 1955-1960).<br />
            The `album` filter can be used while searching albums and tracks.<br />
            The `genre` filter can be used while searching artists and tracks.<br />
            The `isrc` and `track` filters can be used while searching tracks.<br />
            The `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.<br />
          example: remaster%20track:Doxy%20artist:Miles%20Davis
          title: Query
          type: string
          x-konfig-original-example: remaster%20track:Doxy%20artist:Miles%20Davis
          x-konfig-generated-schema: konfig-generated-schema-paths--search-get-parameters-0-schema
        type:
          description: |
            A comma-separated list of item types to search across. Search results include hits
            from all the specified item types. For example: `q=abacab&type=album,track` returns
            both albums and tracks matching "abacab".
          items:
            enum:
            - album
            - artist
            - playlist
            - track
            - show
            - episode
            - audiobook
            type: string
          title: Item type
          type: array
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        limit:
          default: 20
          description: |
            The maximum number of results to return in each item type.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-paths--search-get-parameters-3-schema
        offset:
          default: 0
          description: |
            The index of the first result to return. Use
            with limit to get the next page of search results.
          example: 5
          maximum: 1000
          minimum: 0
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-paths--search-get-parameters-4-schema
        include_external:
          description: |
            If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks
            the content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.
          enum:
          - audio
          title: Include External
          type: string
      required:
      - q
      - type
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - q
      - type
      - market
      - limit
      - offset
      - include_external
    konfig-generated-schema-single-parameter-schema-get--me:
      properties: {}
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter: []
    konfig-generated-schema-single-parameter-schema-get--playlists-playlist_id:
      properties:
        playlist_id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        fields:
          description: |
            Filters for the query: a comma-separated list of the
            fields to return. If omitted, all fields are returned. For example, to get
            just the playlist''s description and URI: `fields=description,uri`. A dot
            separator can be used to specify non-reoccurring fields, while parentheses
            can be used to specify reoccurring fields within objects. For example, to
            get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.
            Use multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`.
            Fields can be excluded by prefixing them with an exclamation mark, for example:
            `fields=tracks.items(track(name,href,album(!name,href)))`
          example: "items(added_by.id,track(name,href,album(name,href)))"
          title: Fields
          type: string
          x-konfig-original-example: "items(added_by.id,track(name,href,album(name,href)))"
          x-konfig-generated-schema: konfig-generated-schema-paths--playlists-playlist_id-get-parameters-2-schema
        additional_types:
          description: |
            A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
            _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
            In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
          title: Additional Types
          type: string
      required:
      - playlist_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - playlist_id
      - market
      - fields
      - additional_types
    konfig-generated-schema-single-parameter-schema-put--playlists-playlist_id:
      properties:
        playlist_id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        description:
          description: |
            Value for playlist description as displayed in Spotify Clients and in the Web API.
          example: Updated playlist description
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsUpdateDetailsRequest-properties-description
        name:
          description: |
            The new name for the playlist, for example `"My New Playlist Title"`
          example: Updated Playlist Name
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsUpdateDetailsRequest-properties-name
        public:
          description: |
            If `true` the playlist will be public, if `false` it will be private.
          example: false
          type: boolean
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsUpdateDetailsRequest-properties-public
        collaborative:
          description: |
            If `true`, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. <br/>
            _**Note**: You can only set `collaborative` to `true` on non-public playlists._
          type: boolean
      required:
      - playlist_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - playlist_id
    konfig-generated-schema-single-parameter-schema-delete--playlists-playlist_id-tracks:
      properties:
        playlist_id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        tracks:
          description: |
            An array of objects containing [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) of the tracks or episodes to remove.
            For example: `{ "tracks": [{ "uri": "spotify:track:4iV5W9uYEdYUVa79Axb7Rh" },{ "uri": "spotify:track:1301WleyT98MSxVHPZCA6M" }] }`. A maximum of 100 objects can be sent at once.
          items:
            properties:
              uri:
                description: Spotify URI
                type: string
            type: object
          type: array
        snapshot_id:
          description: |
            The playlist's snapshot ID against which you want to make the changes.
            The API will validate that the specified items exist and in the specified positions and make the changes,
            even if more recent changes have been made to the playlist.
          type: string
      required:
      - playlist_id
      - tracks
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - playlist_id
    konfig-generated-schema-single-parameter-schema-get--playlists-playlist_id-tracks:
      properties:
        playlist_id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        fields:
          description: |
            Filters for the query: a comma-separated list of the
            fields to return. If omitted, all fields are returned. For example, to get
            just the total number of items and the request limit:<br/>`fields=total,limit`<br/>A
            dot separator can be used to specify non-reoccurring fields, while parentheses
            can be used to specify reoccurring fields within objects. For example, to
            get just the added date and user ID of the adder:<br/>`fields=items(added_at,added_by.id)`<br/>Use
            multiple parentheses to drill down into nested objects, for example:<br/>`fields=items(track(name,href,album(name,href)))`<br/>Fields
            can be excluded by prefixing them with an exclamation mark, for example:<br/>`fields=items.track.album(!external_urls,images)`
          example: "items(added_by.id,track(name,href,album(name,href)))"
          title: Fields
          type: string
          x-konfig-original-example: "items(added_by.id,track(name,href,album(name,href)))"
          x-konfig-generated-schema: konfig-generated-schema-paths--playlists-playlist_id-tracks-get-parameters-2-schema
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        additional_types:
          description: |
            A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
            _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
            In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
          title: Additional Types
          type: string
      required:
      - playlist_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - playlist_id
      - market
      - fields
      - limit
      - offset
      - additional_types
    konfig-generated-schema-single-parameter-schema-get--me-playlists:
      properties:
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            'The index of the first playlist to return. Default:
            0 (the first object). Maximum offset: 100.000\. Use with `limit` to get the
            next set of playlists.'
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-paths--me-playlists-get-parameters-1-schema
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-get--me-albums:
      properties:
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - limit
      - offset
      - market
    konfig-generated-schema-single-parameter-schema-get--me-albums-contains:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs.
          example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          title: Spotify Album IDs
          type: string
          x-konfig-original-example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryAlbumIds-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
    konfig-generated-schema-single-parameter-schema-get--me-tracks:
      properties:
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - market
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-get--me-tracks-contains:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
          x-konfig-original-example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryTrackIds-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
    konfig-generated-schema-single-parameter-schema-get--me-episodes:
      properties:
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - market
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-get--me-episodes-contains:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the episodes. Maximum: 50 IDs.
          example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
          title: Spotify Episode IDs
          type: string
          x-konfig-original-example: "77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf"
          x-konfig-generated-schema: konfig-generated-schema-paths--me-episodes-contains-get-parameters-0-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
    konfig-generated-schema-single-parameter-schema-delete--me-shows:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs.
          example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          title: Ids
          type: string
          x-konfig-original-example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryShowIds-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - market
    konfig-generated-schema-single-parameter-schema-get--me-shows:
      properties:
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-put--me-shows:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs.
          example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          title: Ids
          type: string
          x-konfig-original-example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryShowIds-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
    konfig-generated-schema-single-parameter-schema-get--me-shows-contains:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs.
          example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          title: Ids
          type: string
          x-konfig-original-example: "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryShowIds-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
    konfig-generated-schema-single-parameter-schema-get--me-top-type:
      properties:
        type:
          description: |
            The type of entity to return. Valid values: `artists` or `tracks`
          enum:
          - artists
          - tracks
          title: Type
          type: string
        time_range:
          default: medium_term
          description: |
            Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term` (approximately last 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`
          example: medium_term
          title: Time Range
          type: string
          x-konfig-original-example: medium_term
          x-konfig-generated-schema: konfig-generated-schema-paths--me-top-type-get-parameters-1-schema
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
      required:
      - type
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - type
      - time_range
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-get--users-user_id:
      properties:
        user_id:
          description: |
            The user's [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids).
          example: smedjan
          title: User ID
          type: string
          x-konfig-original-example: smedjan
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathUserId-schema
      required:
      - user_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - user_id
    konfig-generated-schema-single-parameter-schema-get--users-user_id-playlists:
      properties:
        user_id:
          description: |
            The user's [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids).
          example: smedjan
          title: User ID
          type: string
          x-konfig-original-example: smedjan
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathUserId-schema
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first playlist to return. Default:
            0 (the first object). Maximum offset: 100.000\. Use with `limit` to get the
            next set of playlists.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-paths--users-user_id-playlists-get-parameters-2-schema
      required:
      - user_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - user_id
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-post--users-user_id-playlists:
      properties:
        user_id:
          description: |
            The user's [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids).
          example: smedjan
          title: User ID
          type: string
          x-konfig-original-example: smedjan
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathUserId-schema
        description:
          description: |
            value for playlist description as displayed in Spotify Clients and in the Web API.
          example: New playlist description
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsCreatePlaylistRequest-properties-description
        name:
          description: |
            The name for the new playlist, for example `"Your Coolest Playlist"`. This name does not need to be unique; a user may have several playlists with the same name.
          example: New Playlist
          type: string
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsCreatePlaylistRequest-properties-name
        public:
          description: |
            Defaults to `true`. If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](/documentation/web-api/concepts/scopes/#list-of-scopes)
          example: false
          type: boolean
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlaylistsCreatePlaylistRequest-properties-public
        collaborative:
          description: |
            Defaults to `false`. If `true` the playlist will be collaborative. _**Note**: to create a collaborative playlist you must also set `public` to `false`. To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](/documentation/web-api/concepts/scopes/#list-of-scopes)._
          type: boolean
      required:
      - name
      - user_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - user_id
    konfig-generated-schema-single-parameter-schema-delete--playlists-playlist_id-followers:
      properties:
        playlist_id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
      required:
      - playlist_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - playlist_id
    konfig-generated-schema-single-parameter-schema-put--playlists-playlist_id-followers:
      properties:
        playlist_id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        public:
          description: |
            Defaults to `true`. If `true` the playlist will be included in user's public playlists, if `false` it will remain private.
          example: false
          type: boolean
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-UsersFollowPlaylistRequest-properties-public
      required:
      - playlist_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - playlist_id
    konfig-generated-schema-single-parameter-schema-get--browse-featured-playlists:
      properties:
        locale:
          description: |
            The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning &quot;Spanish (Mexico)&quot;. Provide this parameter if you want the category strings returned in a particular language.<br/> _**Note**: if `locale` is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English)._
          example: sv_SE
          title: Locale
          type: string
          x-konfig-original-example: sv_SE
          x-konfig-generated-schema: konfig-generated-schema-paths--browse-featured-playlists-get-parameters-0-schema
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - locale
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-get--browse-categories:
      properties:
        locale:
          description: |
            The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning &quot;Spanish (Mexico)&quot;. Provide this parameter if you want the category strings returned in a particular language.<br/> _**Note**: if `locale` is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English)._
          example: sv_SE
          title: Locale
          type: string
          x-konfig-original-example: sv_SE
          x-konfig-generated-schema: konfig-generated-schema-paths--browse-categories-get-parameters-0-schema
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - locale
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-get--browse-categories-category_id:
      properties:
        category_id:
          description: |
            The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) for the category.
          example: dinner
          title: Category ID
          type: string
          x-konfig-original-example: dinner
          x-konfig-generated-schema: konfig-generated-schema-paths--browse-categories-category_id-get-parameters-0-schema
        locale:
          description: |
            The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning &quot;Spanish (Mexico)&quot;. Provide this parameter if you want the category strings returned in a particular language.<br/> _**Note**: if `locale` is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English)._
          example: sv_SE
          title: Locale
          type: string
          x-konfig-original-example: sv_SE
          x-konfig-generated-schema: konfig-generated-schema-paths--browse-categories-category_id-get-parameters-1-schema
      required:
      - category_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - category_id
      - locale
    konfig-generated-schema-single-parameter-schema-get--browse-categories-category_id-playlists:
      properties:
        category_id:
          description: |
            The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) for the category.
          example: dinner
          title: Category ID
          type: string
          x-konfig-original-example: dinner
          x-konfig-generated-schema: konfig-generated-schema-paths--browse-categories-category_id-playlists-get-parameters-0-schema
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
      required:
      - category_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - category_id
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-get--playlists-playlist_id-images:
      properties:
        playlist_id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
      required:
      - playlist_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - playlist_id
    konfig-generated-schema-single-parameter-schema-get--browse-new-releases:
      properties:
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryLimit-schema
        offset:
          default: 0
          description: |
            The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
          example: 5
          title: Offset
          type: integer
          x-konfig-original-example: 5
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryOffset-schema
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - limit
      - offset
    konfig-generated-schema-single-parameter-schema-get--me-following:
      properties:
        type:
          description: |
            The ID type: currently only `artist` is supported.
          enum:
          - artist
          example: artist
          title: Item Type
          type: string
          x-konfig-original-example: artist
          x-konfig-generated-schema: konfig-generated-schema-paths--me-following-get-parameters-0-schema
        after:
          description: |
            The last artist ID retrieved from the previous request.
          example: 0I2XqVXqHScXjHhk6AYYRe
          title: After
          type: string
          x-konfig-original-example: 0I2XqVXqHScXjHhk6AYYRe
          x-konfig-generated-schema: konfig-generated-schema-paths--me-following-get-parameters-1-schema
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20\. Minimum: 1\. Maximum: 50\.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-paths--me-following-get-parameters-2-schema
      required:
      - type
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - type
      - after
      - limit
    konfig-generated-schema-single-parameter-schema-get--me-following-contains:
      properties:
        type:
          description: |
            The ID type: either `artist` or `user`.
          enum:
          - artist
          - user
          example: artist
          title: Item Type
          type: string
          x-konfig-original-example: artist
          x-konfig-generated-schema: konfig-generated-schema-paths--me-following-contains-get-parameters-0-schema
        ids:
          description: |
            A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) to check. For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50 IDs can be sent in one request.
          example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          title: Spotify IDs
          type: string
          x-konfig-original-example: "2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6"
          x-konfig-generated-schema: konfig-generated-schema-paths--me-following-contains-get-parameters-1-schema
      required:
      - ids
      - type
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - type
      - ids
    konfig-generated-schema-single-parameter-schema-get--playlists-playlist_id-followers-contains:
      properties:
        playlist_id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.
          example: 3cEYpjA9oz9GiPac4AsH4n
          title: Playlist ID
          type: string
          x-konfig-original-example: 3cEYpjA9oz9GiPac4AsH4n
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-PathPlaylistId-schema
        ids:
          description: |
            A comma-separated list of [Spotify User IDs](/documentation/web-api/concepts/spotify-uris-ids) ; the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids.
          example: "jmperezperez,thelinmichael,wizzler"
          title: Spotify user IDs
          type: string
          x-konfig-original-example: "jmperezperez,thelinmichael,wizzler"
          x-konfig-generated-schema: konfig-generated-schema-paths--playlists-playlist_id-followers-contains-get-parameters-1-schema
      required:
      - ids
      - playlist_id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - playlist_id
      - ids
    konfig-generated-schema-single-parameter-schema-get--audio-features:
      properties:
        ids:
          description: |
            A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids)
            for the tracks. Maximum: 100 IDs.
          example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          title: Spotify Track IDs
          type: string
          x-konfig-original-example: "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
          x-konfig-generated-schema: konfig-generated-schema-paths--audio-features-get-parameters-0-schema
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
    konfig-generated-schema-single-parameter-schema-get--audio-features-id:
      properties:
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
          example: 11dFghVXANMlKmJXsNCbNl
          title: Spotify Track ID
          type: string
          x-konfig-original-example: 11dFghVXANMlKmJXsNCbNl
          x-konfig-generated-schema: konfig-generated-schema-paths--audio-features-id-get-parameters-0-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
    konfig-generated-schema-single-parameter-schema-get--audio-analysis-id:
      properties:
        id:
          description: |
            The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)
            for the track.
          example: 11dFghVXANMlKmJXsNCbNl
          title: Spotify Track ID
          type: string
          x-konfig-original-example: 11dFghVXANMlKmJXsNCbNl
          x-konfig-generated-schema: konfig-generated-schema-paths--audio-analysis-id-get-parameters-0-schema
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
    konfig-generated-schema-single-parameter-schema-get--recommendations:
      properties:
        limit:
          default: 20
          description: |
            The target size of the list of recommended tracks. For seeds with unusually small pools or when highly restrictive filtering is applied, it may be impossible to generate the requested number of recommended tracks. Debugging information for such cases is available in the response. Default: 20\. Minimum: 1\. Maximum: 100.
          example: 10
          maximum: 100
          minimum: 1
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-paths--recommendations-get-parameters-0-schema
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        seed_artists:
          description: |
            A comma separated list of [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for seed artists.  Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.<br/> _**Note**: only required if `seed_genres` and `seed_tracks` are not set_.
          example: 4NHQUGzhtTLFvgF5SZesLK
          title: Spotify Artist ID Seeds
          type: string
          x-konfig-original-example: 4NHQUGzhtTLFvgF5SZesLK
          x-konfig-generated-schema: konfig-generated-schema-paths--recommendations-get-parameters-2-schema
        seed_genres:
          description: |
            A comma separated list of any genres in the set of [available genre seeds](/documentation/web-api/reference/get-recommendation-genres). Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.<br/> _**Note**: only required if `seed_artists` and `seed_tracks` are not set_.
          example: "classical,country"
          title: Genres Seeds
          type: string
          x-konfig-original-example: "classical,country"
          x-konfig-generated-schema: konfig-generated-schema-paths--recommendations-get-parameters-3-schema
        seed_tracks:
          description: |
            A comma separated list of [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for a seed track.  Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.<br/> _**Note**: only required if `seed_artists` and `seed_genres` are not set_.
          example: 0c6xIDDpzE81m2q797ordA
          title: Spotify Track ID Seeds
          type: string
          x-konfig-original-example: 0c6xIDDpzE81m2q797ordA
          x-konfig-generated-schema: konfig-generated-schema-paths--recommendations-get-parameters-4-schema
        min_acousticness:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Acousticness
          type: number
        max_acousticness:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Acousticness
          type: number
        target_acousticness:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Acousticness
          type: number
        min_danceability:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Danceability
          type: number
        max_danceability:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Danceability
          type: number
        target_danceability:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Danceability
          type: number
        min_duration_ms:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          title: Min. Duration (ms)
          type: integer
        max_duration_ms:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          title: Max. Duration (ms)
          type: integer
        target_duration_ms:
          description: Target duration of the track (ms)
          title: Target Duration (ms)
          type: integer
        min_energy:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Energy
          type: number
        max_energy:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Energy
          type: number
        target_energy:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Energy
          type: number
        min_instrumentalness:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Instrumentalness
          type: number
        max_instrumentalness:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Instrumentalness
          type: number
        target_instrumentalness:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Instrumentalness
          type: number
        min_key:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 11
          minimum: 0
          title: Min. Key
          type: integer
        max_key:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 11
          minimum: 0
          title: Max. Key
          type: integer
        target_key:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 11
          minimum: 0
          title: Target Key
          type: integer
        min_liveness:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Liveness
          type: number
        max_liveness:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Liveness
          type: number
        target_liveness:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Liveness
          type: number
        min_loudness:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          title: Min. Loudness
          type: number
        max_loudness:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          title: Max. Loudness
          type: number
        target_loudness:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          title: Target Loudness
          type: number
        min_mode:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Mode
          type: integer
        max_mode:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Mode
          type: integer
        target_mode:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Mode
          type: integer
        min_popularity:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 100
          minimum: 0
          title: Min. Popularity
          type: integer
        max_popularity:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 100
          minimum: 0
          title: Max. Popularity
          type: integer
        target_popularity:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 100
          minimum: 0
          title: Target Popularity
          type: integer
        min_speechiness:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Speechiness
          type: number
        max_speechiness:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Speechiness
          type: number
        target_speechiness:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Speechiness
          type: number
        min_tempo:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          title: Min. Tempo
          type: number
        max_tempo:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          title: Max. Tempo
          type: number
        target_tempo:
          description: Target tempo (BPM)
          title: Target Tempo
          type: number
        min_time_signature:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 11
          title: Min. Time Signature
          type: integer
        max_time_signature:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          title: Max. Time Signature
          type: integer
        target_time_signature:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          title: Target Time Signature
          type: integer
        min_valence:
          description: |
            For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
          maximum: 1
          minimum: 0
          title: Min. Valence
          type: number
        max_valence:
          description: |
            For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.
          maximum: 1
          minimum: 0
          title: Max. Valence
          type: number
        target_valence:
          description: |
            For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.
          maximum: 1
          minimum: 0
          title: Target Valence
          type: number
      required:
      - seed_artists
      - seed_genres
      - seed_tracks
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - limit
      - market
      - seed_artists
      - seed_genres
      - seed_tracks
      - min_acousticness
      - max_acousticness
      - target_acousticness
      - min_danceability
      - max_danceability
      - target_danceability
      - min_duration_ms
      - max_duration_ms
      - target_duration_ms
      - min_energy
      - max_energy
      - target_energy
      - min_instrumentalness
      - max_instrumentalness
      - target_instrumentalness
      - min_key
      - max_key
      - target_key
      - min_liveness
      - max_liveness
      - target_liveness
      - min_loudness
      - max_loudness
      - target_loudness
      - min_mode
      - max_mode
      - target_mode
      - min_popularity
      - max_popularity
      - target_popularity
      - min_speechiness
      - max_speechiness
      - target_speechiness
      - min_tempo
      - max_tempo
      - target_tempo
      - min_time_signature
      - max_time_signature
      - target_time_signature
      - min_valence
      - max_valence
      - target_valence
    konfig-generated-schema-single-parameter-schema-get--recommendations-available-genre-seeds:
      properties: {}
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter: []
    konfig-generated-schema-single-parameter-schema-get--me-player:
      properties:
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        additional_types:
          description: |
            A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
            _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
            In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
          title: Additional Types
          type: string
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - market
      - additional_types
    konfig-generated-schema-single-parameter-schema-put--me-player:
      properties:
        device_ids:
          description: |
            A JSON array containing the ID of the device on which playback should be started/transferred.<br/>For example:`{device_ids:["74ASZWbe4lXaubB36ztrGX"]}`<br/>_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`_
          items:
            type: string
          type: array
        play:
          additionalProperties: true
          description: |
            **true**: ensure playback happens on new device.<br/>**false** or not provided: keep the current playback state.
          type: object
      required:
      - device_ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter: []
    konfig-generated-schema-single-parameter-schema-get--me-player-devices:
      properties: {}
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter: []
    konfig-generated-schema-single-parameter-schema-get--me-player-currently-playing:
      properties:
        market:
          description: |
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
              If a country code is specified, only content that is available in that market will be returned.<br/>
              If a valid user access token is specified in the request header, the country associated with
              the user account will take priority over this parameter.<br/>
              _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
              Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          example: ES
          title: Market
          type: string
          x-konfig-original-example: ES
          x-konfig-generated-schema: konfig-generated-schema-components-parameters-QueryMarket-schema
        additional_types:
          description: |
            A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
            _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
            In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
          title: Additional Types
          type: string
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - market
      - additional_types
    konfig-generated-schema-single-parameter-schema-put--me-player-play:
      properties:
        device_id:
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-play-put-parameters-0-schema
        context_uri:
          additionalProperties: true
          description: |
            Optional. Spotify URI of the context to play.
            Valid contexts are albums, artists & playlists.
            `{context_uri:"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT"}`
          example: spotify:album:5ht7ItJgpBH7W6vJ5BqpPr
          type: object
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlayerStartPlaybackRequest-properties-context_uri
        uris:
          description: |
            Optional. A JSON array of the Spotify track URIs to play.
            For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh", "spotify:track:1301WleyT98MSxVHPZCA6M"]}`
          items:
            type: string
          type: array
        offset:
          additionalProperties: true
          description: |
            Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object
            "position" is zero based and can’t be negative. Example: `"offset": {"position": 5}`
            "uri" is a string representing the uri of the item to start at. Example: `"offset": {"uri": "spotify:track:1301WleyT98MSxVHPZCA6M"}`
          type: object
        position_ms:
          additionalProperties: true
          description: integer
          example: 0
          type: object
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-PlayerStartPlaybackRequest-properties-position_ms
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - device_id
    konfig-generated-schema-single-parameter-schema-put--me-player-pause:
      properties:
        device_id:
          description: |
            The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-pause-put-parameters-0-schema
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - device_id
    konfig-generated-schema-single-parameter-schema-post--me-player-next:
      properties:
        device_id:
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-next-post-parameters-0-schema
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - device_id
    konfig-generated-schema-single-parameter-schema-post--me-player-previous:
      properties:
        device_id:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-previous-post-parameters-0-schema
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - device_id
    konfig-generated-schema-single-parameter-schema-put--me-player-seek:
      properties:
        position_ms:
          description: |
            The position in milliseconds to seek to. Must be a
            positive number. Passing in a position that is greater than the length of
            the track will cause the player to start playing the next song.
          example: 25000
          title: Position (ms)
          type: integer
          x-konfig-original-example: 25000
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-seek-put-parameters-0-schema
        device_id:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-seek-put-parameters-1-schema
      required:
      - position_ms
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - position_ms
      - device_id
    konfig-generated-schema-single-parameter-schema-put--me-player-repeat:
      properties:
        state:
          description: |
            **track**, **context** or **off**.<br/>
            **track** will repeat the current track.<br/>
            **context** will repeat the current context.<br/>
            **off** will turn repeat off.
          example: context
          title: State
          type: string
          x-konfig-original-example: context
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-repeat-put-parameters-0-schema
        device_id:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-repeat-put-parameters-1-schema
      required:
      - state
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - state
      - device_id
    konfig-generated-schema-single-parameter-schema-put--me-player-volume:
      properties:
        volume_percent:
          description: |
            The volume to set. Must be a value from 0 to 100 inclusive.
          example: 50
          title: Volume %
          type: integer
          x-konfig-original-example: 50
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-volume-put-parameters-0-schema
        device_id:
          description: |
            The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-volume-put-parameters-1-schema
      required:
      - volume_percent
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - volume_percent
      - device_id
    konfig-generated-schema-single-parameter-schema-put--me-player-shuffle:
      properties:
        state:
          description: |
            **true** : Shuffle user's playback.<br/>
            **false** : Do not shuffle user's playback.
          example: true
          title: State
          type: boolean
          x-konfig-original-example: true
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-shuffle-put-parameters-0-schema
        device_id:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-shuffle-put-parameters-1-schema
      required:
      - state
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - state
      - device_id
    konfig-generated-schema-single-parameter-schema-get--me-player-recently-played:
      properties:
        limit:
          default: 20
          description: |
            The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
          example: 10
          maximum: 50
          minimum: 0
          title: Limit
          type: integer
          x-konfig-original-example: 10
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-recently-played-get-parameters-0-schema
        after:
          description: |
            A Unix timestamp in milliseconds. Returns all items
            after (but not including) this cursor position. If `after` is specified, `before`
            must not be specified.
          example: 1484811043508
          title: After
          type: integer
          x-konfig-original-example: 1484811043508
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-recently-played-get-parameters-1-schema
        before:
          description: |
            A Unix timestamp in milliseconds. Returns all items
            before (but not including) this cursor position. If `before` is specified,
            `after` must not be specified.
          title: Before
          type: integer
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - limit
      - after
      - before
    konfig-generated-schema-single-parameter-schema-get--me-player-queue:
      properties: {}
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter: []
    konfig-generated-schema-single-parameter-schema-post--me-player-queue:
      properties:
        uri:
          description: |
            The uri of the item to add to the queue. Must be a track or an episode uri.
          example: spotify:track:4iV5W9uYEdYUVa79Axb7Rh
          title: Spotify URI
          type: string
          x-konfig-original-example: spotify:track:4iV5W9uYEdYUVa79Axb7Rh
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-queue-post-parameters-0-schema
        device_id:
          description: |
            The id of the device this command is targeting. If
            not supplied, the user's currently active device is the target.
          example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          title: Device ID
          type: string
          x-konfig-original-example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
          x-konfig-generated-schema: konfig-generated-schema-paths--me-player-queue-post-parameters-1-schema
      required:
      - uri
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - uri
      - device_id
    konfig-generated-schema-single-parameter-schema-get--markets:
      properties: {}
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter: []
    AudioAnalysisObject_meta:
      example:
        detailed_status: OK
        status_code: 0
        analyzer_version: 4.0.0
        analysis_time: 6.93906
        input_process: libvorbisfile L+R 44100->22050
        platform: Linux
        timestamp: 1495193577
      properties:
        analyzer_version:
          description: The version of the Analyzer used to analyze this track.
          example: 4.0.0
          type: string
          x-konfig-original-example: 4.0.0
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-meta-properties-analyzer_version
        platform:
          description: The platform used to read the track's audio data.
          example: Linux
          type: string
          x-konfig-original-example: Linux
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-meta-properties-platform
        detailed_status:
          description: "A detailed status code for this track. If analysis data is\
            \ missing, this code may explain why."
          example: OK
          type: string
          x-konfig-original-example: OK
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-meta-properties-detailed_status
        status_code:
          description: "The return code of the analyzer process. 0 if successful,\
            \ 1 if any errors occurred."
          example: 0
          type: integer
          x-konfig-original-example: 0
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-meta-properties-status_code
        timestamp:
          description: The Unix timestamp (in seconds) at which this track was analyzed.
          example: 1495193577
          type: integer
          x-konfig-original-example: 1495193577
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-meta-properties-timestamp
        analysis_time:
          description: The amount of time taken to analyze this track.
          example: 6.93906
          type: number
          x-konfig-original-example: 6.93906
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-meta-properties-analysis_time
        input_process:
          description: The method used to read the track's audio data.
          example: libvorbisfile L+R 44100->22050
          type: string
          x-konfig-original-example: libvorbisfile L+R 44100->22050
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-meta-properties-input_process
      type: object
    AudioAnalysisObject_track:
      example:
        mode_confidence: 0.485
        loudness: -5.883
        tempo: 118.211
        key_confidence: 0.408
        codestring: codestring
        echoprint_version: 4.15
        offset_seconds: 0
        duration: 207.95985
        mode: 0
        tempo_confidence: 0.73
        window_seconds: 0
        start_of_fade_out: 201.13705
        synch_version: 1
        code_version: 3.15
        time_signature_confidence: 0.994
        analysis_channels: 1
        key: 9
        time_signature: 4
        sample_md5: sample_md5
        end_of_fade_in: 0
        echoprintstring: echoprintstring
        analysis_sample_rate: 22050
        synchstring: synchstring
        rhythmstring: rhythmstring
        rhythm_version: 1
        num_samples: 4585515
      properties:
        num_samples:
          description: The exact number of audio samples analyzed from this track.
            See also `analysis_sample_rate`.
          example: 4585515
          type: integer
          x-konfig-original-example: 4585515
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-num_samples
        duration:
          description: Length of the track in seconds.
          example: 207.95985
          type: number
          x-konfig-original-example: 207.95985
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-duration
        sample_md5:
          description: This field will always contain the empty string.
          type: string
        offset_seconds:
          description: "An offset to the start of the region of the track that was\
            \ analyzed. (As the entire track is analyzed, this should always be 0.)"
          example: 0
          type: integer
          x-konfig-original-example: 0
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-offset_seconds
        window_seconds:
          description: "The length of the region of the track was analyzed, if a subset\
            \ of the track was analyzed. (As the entire track is analyzed, this should\
            \ always be 0.)"
          example: 0
          type: integer
          x-konfig-original-example: 0
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-window_seconds
        analysis_sample_rate:
          description: The sample rate used to decode and analyze this track. May
            differ from the actual sample rate of this track available on Spotify.
          example: 22050
          type: integer
          x-konfig-original-example: 22050
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-analysis_sample_rate
        analysis_channels:
          description: "The number of channels used for analysis. If 1, all channels\
            \ are summed together to mono before analysis."
          example: 1
          type: integer
          x-konfig-original-example: 1
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-analysis_channels
        end_of_fade_in:
          description: "The time, in seconds, at which the track's fade-in period\
            \ ends. If the track has no fade-in, this will be 0.0."
          example: 0
          type: number
          x-konfig-original-example: 0
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-end_of_fade_in
        start_of_fade_out:
          description: "The time, in seconds, at which the track's fade-out period\
            \ starts. If the track has no fade-out, this should match the track's\
            \ length."
          example: 201.13705
          type: number
          x-konfig-original-example: 201.13705
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-start_of_fade_out
        loudness:
          description: |
            The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.
          example: -5.883
          format: float
          type: number
          x-spotify-docs-type: Float
          x-konfig-original-example: -5.883
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-Loudness
        tempo:
          description: |
            The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
          example: 118.211
          format: float
          type: number
          x-spotify-docs-type: Float
          x-konfig-original-example: 118.211
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-Tempo
        tempo_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ `tempo`."
          example: 0.73
          maximum: 1
          minimum: 0
          type: number
          x-konfig-original-example: 0.73
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-tempo_confidence
        time_signature:
          description: "An estimated time signature. The time signature (meter) is\
            \ a notational convention to specify how many beats are in each bar (or\
            \ measure). The time signature ranges from 3 to 7 indicating time signatures\
            \ of \"3/4\", to \"7/4\"."
          example: 4
          maximum: 7
          minimum: 3
          type: integer
          x-konfig-original-example: 4
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-TimeSignature
        time_signature_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ `time_signature`."
          example: 0.994
          maximum: 1
          minimum: 0
          type: number
          x-konfig-original-example: 0.994
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-time_signature_confidence
        key:
          description: |
            The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
          example: 9
          maximum: 11
          minimum: -1
          type: integer
          x-konfig-original-example: 9
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-Key
        key_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ `key`."
          example: 0.408
          maximum: 1
          minimum: 0
          type: number
          x-konfig-original-example: 0.408
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-key_confidence
        mode:
          description: |
            Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
          example: 0
          type: integer
          x-konfig-original-example: 0
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-Mode
        mode_confidence:
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ `mode`."
          example: 0.485
          maximum: 1
          minimum: 0
          type: number
          x-konfig-original-example: 0.485
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-mode_confidence
        codestring:
          description: "An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4)\
            \ codestring for this track."
          type: string
        code_version:
          description: A version number for the Echo Nest Musical Fingerprint format
            used in the codestring field.
          example: 3.15
          type: number
          x-konfig-original-example: 3.15
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-code_version
        echoprintstring:
          description: "An [EchoPrint](https://github.com/spotify/echoprint-codegen)\
            \ codestring for this track."
          type: string
        echoprint_version:
          description: A version number for the EchoPrint format used in the echoprintstring
            field.
          example: 4.15
          type: number
          x-konfig-original-example: 4.15
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-echoprint_version
        synchstring:
          description: "A [Synchstring](https://github.com/echonest/synchdata) for\
            \ this track."
          type: string
        synch_version:
          description: A version number for the Synchstring used in the synchstring
            field.
          example: 1
          type: number
          x-konfig-original-example: 1
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-synch_version
        rhythmstring:
          description: A Rhythmstring for this track. The format of this string is
            similar to the Synchstring.
          type: string
        rhythm_version:
          description: A version number for the Rhythmstring used in the rhythmstring
            field.
          example: 1
          type: number
          x-konfig-original-example: 1
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AudioAnalysisObject-properties-track-properties-rhythm_version
      type: object
    CursorPagingPlayHistoryObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/PlayHistoryObject'
          type: array
      type: object
      example: null
    CursorPagingSimplifiedArtistObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ArtistObject'
          type: array
      type: object
      example: null
    PagingPlaylistObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SimplifiedPlaylistObject'
          type: array
      type: object
      example: null
    PagingArtistDiscographyAlbumObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ArtistDiscographyAlbumObject'
          type: array
      type: object
      example: null
    PagingSimplifiedAlbumObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SimplifiedAlbumObject'
          type: array
      type: object
      example: null
    PagingSavedAlbumObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SavedAlbumObject'
          type: array
      type: object
      example: null
    PagingSimplifiedTrackObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SimplifiedTrackObject'
          type: array
      type: object
      example: null
    PagingSavedTrackObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SavedTrackObject'
          type: array
      type: object
      example: null
    PagingTrackObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/TrackObject'
          type: array
      type: object
      example: null
    PagingPlaylistTrackObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/PlaylistTrackObject'
          type: array
      type: object
      example: null
    PagingSimplifiedShowObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SimplifiedShowObject'
          type: array
      type: object
      example: null
    PagingSavedShowObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SavedShowObject'
          type: array
      type: object
      example: null
    PagingSimplifiedEpisodeObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SimplifiedEpisodeObject'
          type: array
      type: object
      example: null
    PagingSavedEpisodeObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SavedEpisodeObject'
          type: array
      type: object
      example: null
    PagingSimplifiedAudiobookObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SimplifiedAudiobookObject'
          type: array
      type: object
      example: null
    PagingSimplifiedChapterObject_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SimplifiedChapterObject'
          type: array
      type: object
      example: null
    PlaylistOwnerObject_allOf:
      properties:
        display_name:
          description: |
            The name displayed on the user's profile. `null` if not available.
          nullable: true
          type: string
      type: object
      example: null
    EpisodeObject_allOf:
      properties:
        show:
          $ref: '#/components/schemas/SimplifiedShowObject'
      required:
      - show
      type: object
      x-konfig-properties:
        show:
          description: |
            The show on which the episode belongs.
      example: null
    ShowObject_allOf:
      properties:
        episodes:
          $ref: '#/components/schemas/PagingSimplifiedEpisodeObject'
      required:
      - episodes
      type: object
      x-konfig-properties:
        episodes:
          description: |
            The episodes of the show.
          type: object
      example: null
    AudiobookObject_allOf:
      properties:
        chapters:
          $ref: '#/components/schemas/PagingSimplifiedChapterObject'
      required:
      - chapters
      type: object
      x-konfig-properties:
        chapters:
          description: |
            The chapters of the audiobook.
          type: object
      example: null
    SimplifiedAlbumObject_allOf:
      properties:
        artists:
          description: |
            The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
          items:
            $ref: '#/components/schemas/SimplifiedArtistObject'
          type: array
      required:
      - artists
      type: object
      example: null
    ArtistDiscographyAlbumObject_allOf:
      properties:
        album_group:
          description: |
            This field describes the relationship between the artist and the album.
          enum:
          - album
          - single
          - compilation
          - appears_on
          example: compilation
          type: string
          x-konfig-original-example: compilation
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-ArtistDiscographyAlbumObject-allOf-1-properties-album_group
      required:
      - album_group
      type: object
      example: null
    ChapterObject_allOf:
      properties:
        audiobook:
          $ref: '#/components/schemas/SimplifiedAudiobookObject'
      required:
      - audiobook
      type: object
      x-konfig-properties:
        audiobook:
          description: |
            The audiobook for which the chapter belongs.
      example: null
    AlbumObject_allOf:
      properties:
        artists:
          description: |
            The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
          items:
            $ref: '#/components/schemas/SimplifiedArtistObject'
          type: array
        tracks:
          $ref: '#/components/schemas/PagingSimplifiedTrackObject'
        copyrights:
          description: |
            The copyright statements of the album.
          items:
            $ref: '#/components/schemas/CopyrightObject'
          type: array
        external_ids:
          $ref: '#/components/schemas/ExternalIdObject'
        genres:
          description: |
            A list of the genres the album is associated with. If not yet classified, the array is empty.
          example:
          - Egg punk
          - Noise rock
          items:
            type: string
          type: array
          x-konfig-original-example:
          - Egg punk
          - Noise rock
          x-konfig-generated-schema: konfig-generated-schema-components-schemas-AlbumObject-allOf-1-properties-genres
        label:
          description: |
            The label associated with the album.
          type: string
        popularity:
          description: |
            The popularity of the album. The value will be between 0 and 100, with 100 being the most popular.
          type: integer
      type: object
      x-konfig-properties:
        tracks:
          description: |
            The tracks of the album.
        external_ids:
          description: |
            Known external IDs for the album.
      example: null
    PlaylistsRemoveItemsRequest_tracks_inner:
      example:
        uri: uri
      properties:
        uri:
          description: Spotify URI
          type: string
      type: object
    UsersGetTopItemsResponse_allOf:
      properties:
        items:
          items: {}
          type: array
      type: object
      example: null
    CategoriesListSeveralResponse_categories_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/CategoryObject'
          type: array
      type: object
    CategoriesListSeveralResponse_categories:
      allOf:
      - $ref: '#/components/schemas/PagingObject'
      - $ref: '#/components/schemas/CategoriesListSeveralResponse_categories_allOf'
      type: object
  securitySchemes:
    oauth_2_0:
      description: Spotify supports OAuth 2.0 for authenticating all API requests.
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.spotify.com/authorize
          scopes:
            app-remote-control: |
              Communicate with the Spotify app on your device.
            playlist-read-private: |
              Access your private playlists.
            playlist-read-collaborative: |
              Access your collaborative playlists.
            playlist-modify-public: |
              Manage your public playlists.
            playlist-modify-private: |
              Manage your private playlists.
            user-library-read: |
              Access your saved content.
            user-library-modify: |
              Manage your saved content.
            user-read-private: |
              Access your subscription details.
            user-read-email: |
              Get your real email address.
            user-follow-read: |
              Access your followers and who you are following.
            user-follow-modify: |
              Manage your saved content.
            user-top-read: |
              Read your top artists and content.
            user-read-playback-position: |
              Read your position in content you have played.
            user-read-playback-state: |
              Read your currently playing content and Spotify Connect devices information.
            user-read-recently-played: |
              Access your recently played items.
            user-read-currently-playing: |
              Read your currently playing content.
            user-modify-playback-state: |
              Control playback on your Spotify clients and Spotify Connect devices.
            ugc-image-upload: |
              Upload images to Spotify on your behalf.
            streaming: |
              Play content and control playback on your other devices.
          tokenUrl: https://accounts.spotify.com/api/token
      type: oauth2
      x-konfig-globally-required-security: true
  x-spotify-policy:
    metadataPolicyList:
    - $ref: '#/components/x-spotify-policy/policies/Downloading'
    - $ref: '#/components/x-spotify-policy/policies/VisualAlteration'
    - $ref: '#/components/x-spotify-policy/policies/Attribution'
    metadataWithMachineLearningPolicyList:
    - $ref: '#/components/x-spotify-policy/policies/Downloading'
    - $ref: '#/components/x-spotify-policy/policies/VisualAlteration'
    - $ref: '#/components/x-spotify-policy/policies/Attribution'
    - $ref: '#/components/x-spotify-policy/policies/MachineLearning'
    playerPolicyList:
    - $ref: '#/components/x-spotify-policy/policies/CommercialStreaming'
    - $ref: '#/components/x-spotify-policy/policies/ContentAlteration'
    - $ref: '#/components/x-spotify-policy/policies/Synchronization'
    - $ref: '#/components/x-spotify-policy/policies/Broadcasting'
    downloading:
      $ref: '#/components/x-spotify-policy/policies/Downloading'

